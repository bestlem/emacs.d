#+ TITLE Org mode emacs startup
#+PROPERTY:header-args :cache yes :tangle no :comments link
#+STARTUP: showall

* Introduction
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.198947
:END:
OK I caught the bug to create an org mode file to document my init files.

The reason is not for the pretty files that you see on the web or github but that I was writing a few comments and realised that org mode looks nicer for those (no comment marker ; on lines) and you can deal in text mode for documentation.

I would note that my programming style is to have lots of small functions. With org-mode I can execute code from a block and not from a tangle. Unfortunately for init files use-package wants you to pout all code into one lisp form so making comments away from code, so you have an incentive to use weaving - but then the top level code is not executable you have to tangle first.

* Structure of startup files
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T144238.850528
:END:
** init.org
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122437.576128
:END:
generates init.el and early-init.el (if emacs > 26). These .el files need to be in source code control as they need to run the startup. They include a minimal tangle method, this does not allow weaving or other controls. This minimal method is used on config.org (init.org currently could use this as well)

init.org contains the minimal amout to load otyher things so in essence should not need to be edited.-originally put this text in here.

There is now an alternate - which is a way to try other init setups

** config.org
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122437.573251
:END:
Basically loads org-mode using packaging etc. Note uses the minimal tangle so no weaving etc.
The last thing it does is load init/org.all

The only reason to do this rather than init.org is that you don't need to save the .el as well. But config.org has 156 commits and init.org has 31.
Also the separate allows easy choice of alt-init.

** init
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T144238.849064
:END:
This directory includes all the files that can have the full detangle i.e. including weaving.

The files directly in init are explicitly loaded. Subdirectories are loaded by iterating over all the files in them, they contain files where the order of loading does not matter - well strictly done by length of file so can add some dependency.

** init/all.org
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T155316.632809
:END:
Ideally this should just controls the order of loading things but originally did various things inline.
*** behaviour
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T155316.631696
:END:
This controls how emacs works. Sets up the environment for how other things work.
This is behaviour.org , completion.org and then all the file in behaviours ibuffer is a mode and can be separated out.
In general these are needed and can't be lazy loaded.
Given latest insight to prog-modes - this is mainly minor modes that need to be available and not loaded after a major mode.
*** modes
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T155316.629706
:END:
Originally programming modes but these are all the modes. The load order dies not need to be determined.
Much of progmodes.org can be put into individual modes or behaviours.
In general any lazy loaded stuff can go here.
Actually this looks like this is major mode specific stuff
*** command completion
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T171159.512509
:END:
I think can be moved out to modes or behaviours - the latter makes sense
*** keys
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T171159.511861
:END:
Well this can be the last - basically sets up my key bindings.\
The one odd case is dealing with Aquamacs/macOS differences which have to be done upfront.
*** Startup
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T171159.511203
:END:
Detailed of extra setup at end
*** Appearance
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T171159.510292
:END:
How things look

* Use of org mode
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.198055
:END:
** Tangling
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.197145
:END:
After experience and a problem with org mode with Aquamacs having issues the setup is.

** Original commentary
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.196224
:END:
init.el checks config.org and all its sub org and if needed generate a new config.el, then loads the config.el.
Possibly try to do without org mode as you won't have the up to date one without running the init and loading a package. org seems to make changing breaks.  The best would be similar to [[http://nullman.net/emacs/][nullman's init files]] where init is in the same config file as the rest but generated by itself.  I have the latter but must use org mode as I also use noweb.
I would have started with his file but the org mode view is not available (not certain what I mean there). So I can't create the correct header yet.

Re tangling I am happy to end with just org files and generate elisp on the fly as I use GUIs and start emacs and leave it running - even if I use docker that would be via tramp so still the main emacs.

** Commentary on process after a few months
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.195286
:END:

*** Tangling
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.193933
:END:
Well I put it all under an org file to generate but I thought about  changing back to plain elisp - well with comments.

The issues ere
1. automatic generation of .el files can go wrong when you have bad code and
      a) it is difficult to spot
      b) org mode versions change the file ids so can differ.
2. If in emacs lisp there are tools for searching etc. Most of the time as this is just a config this does not matter but on complex setups (e.g. ironically, org-mode you have to write mal-formed code
3. init.el still needs to be generated.

But org mode is nice as much more readable then commented elisp. ie variable face font and wrapping to screen.

So this file will have odd random comments taken from the code.

So  are you reading or debugging?
Doing a course in ml would be better in org-mode

Alternative is can you edit the source buffers - means no weave but can have bad source in the org file but good in the elisp. So try that first and I think an org mode bug - need to set name and not :noweb-ref perhaps latter only works if not light.
So use this correctly and stick with org mode. But to work each code block needs a separate name or at least they must be in the file next to each other - which blows up my put all hooks on one ref and all config on another and then group by topic.

Issue I think is how much do you need the IDE features.

*** Nullman expansion
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.193065
:END:
This does not use org-mode but does not allow weaving - and just found out tangling to separate files. SO need an init.org and a config.org

*** Others
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.192194
:END:
For resilience over org version issues put as much after org as possible (makes case for using non org mode expand until org mode loaded)
The important bits are init - the loader, packaging and org mode itself. The rest goes to all.org

Seems that really each tangled bit should be in a separate file that if fails can be ignored. and my init load function does the catch so this is why some bits only failed.

So use smaller files.and only call from upper level ie org-base calling org-all is bad but that is a special case, as that has to work - all othe code tends to be independant or at least the editor runs.

*** Debugging and weaving
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.190986
:END:
Basically if you write code and can run a test and all is OK then weaving etc is good.

However if you need to debug or search in code semantically then weaving is an issue.

Also it helps to have each src block be valid code. So I would now note use use-package keywords for large code but rather weave.

**** Detangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.190058
:END:
Detangle works if simple but if you start using weaving then jumping back to code does not seem to work org-babel-tangle-jump-to-org does not find - see org-all.org 19/1/2020 Debugging this is nasty as the code uses regexes

**** Code jumping
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.189194
:END:
The code tools work on the tangled files
*** Problems
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.188365
:END:

*** DONE Spaces
CLOSED: [2020-01-19 Sun 22:18]
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.187351
:END:
Current babel code encodes files with spaces by http encoding so result is not the same as the start. I think that this is not required in tangle but that is a code change. Safest fix is to move init files but need to deal with customisation
I think newer org-mode fixes this.

*** DONE Links
CLOSED: [2019-12-16 Mon 15:15]
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.186336
:END:
I tried to include all the org text in the source code but that adds extra links which seem to defeat detangle - but could be space related
** Include
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.185381
:END:
I want separate files - so when fiddling a mode then I can see it git history easily what changed.

Methods seem to be
1.  use org-mode's include - which they have not done for babel.
2.  else as [[https://github.com/eschulte/emacs24-starter-kit][Emacs starter kit]]. Which has a special elisp load of then  org file. But this does not save .el to disk so issue with debugging
3. Just require the el file - you tangle the org file first. - but  need to make them all save

There are also loaders that optionally load - but as I just have one machine just load all.
With experience messing stuff up.

You need the .el to edit if crashed.

*** TODO Hack
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.184541
:END:
Eventual is probably based off nullman.net
Start by tangle on save if in init dir [[https://emacs.stackexchange.com/a/20733/9874][SO answer]] and also do a starterkit loader that check date of el and org and regenerates if needed. Eventually the el file is not needed but let's convert fully first (unless you need fast starts)

** Aquamacs
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.183708
:END:
 This file runs under Aquamacs, I use Aquamacs because it was the easiest distribution to set up in 2002. Nowadays with package loaders and starter kits this is not so needed.
 Aquamacs does have one advantage it uses Apple's spellchecker and that will not be rolled into GNU.
 Aquamacs though is old Aquamacs 3.4 GNU Emacs 25.3.50.1 Emacs is now on 26 and has been for over a year but if we just need new packages then version is OK.

*** user-emacs-directory
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.182819
:END:
This is the directory emacs reads and writers support files from. This is a mess as some files are under version control and others are created on the fly. The ones on the fly can have the same name as packages and so stop loading (e.g. Tramp and Calc). There are several ways round this e.g. [[https://github.com/emacscollective/no-littering][No Littering]] Aquamacs does this by moving user-emacs-directory and putting the start dir on the load-path but also every possible directory so can't find it easily and hard codes paths and no use a directory so have to have our own const.

Aquamacs does drop a lot into its directory and makes use-emacs-directory always this even if the config files are elsewhere.

Now text based things don't like spaces (programmers are lazy) I want a structured text editor.
The issue here is when tangling the references to files are encoded to remove spaces so the directory becomes ~/Library/Preferences/Aquamacs%20Emacs so round tripping fails.

On using no-littering - all it does is special case some things but not many so better either do Aquamacs way but use a new directory or deal on case by case basis. The latter might be needed for etc files.

**** DONE Need to move all init files into a path that has no spaces
	  CLOSED: [2019-05-06 Mon 02:21]
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.181719
:END:

*** Load order
:PROPERTIES:
:ID:       org_mark_mini20.local:20210424T122854.180477
:END:
Startup files aquamacs looks in are site-start.el then init.el and in a directory order not including ~/.emacs.d/ (actually it does include this)(Aquamacs loads Preferences.el I just make that load init.el so I could use a more standard emacs note that would need to deal with customizations as Aquamacs already has set that.
Also see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Emacs manual on init-files]]

From  aquamacs-get-custom-file-dotemacs-warning
;; %s
;; Warning: After loading this .emacs file, Aquamacs will also load
;; customizations from `custom-file' (customizations.el). Any settings there
;; will override those made here.
;; Consider moving your startup settings to the Preferences.el file, which
;; is loaded after `custom-file':


#  LocalWords:  ibuffer progmodes starterkit
