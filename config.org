#+TITLE Emacs configuration
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Overview
** Introduction
 OK I caught the bug to create an org mode file to document my init files.

 The reason is not for the pretty files that you see on the web or github but that I was writing a few comments and realised that org mode looks nicer for those (no comment marker ; on lines) and you can deal in text mode for documentation.

I would note that my programming style is to have lots of small functions. With org-mode I can execute code from a block and not from a tangle. Unfortunately for init files use-package wants you to pout all code into one lisp form so making comments away from code.

** Use of org mode

*** Tangling
Currently this is all being manually tangled and the generated
config.el is being checked in as well.

Ideally init.el should check config.org and all its sub org and if
needed generate a new config.el, then loads the config.el. Also try to
do without org mode as you won't have the up to date ine without
running the init. The best would be similar to
[[http://nullman.net/emacs/][nullman's init files]] where init is in
the same config file as the rest but generated by itself. I would have
started with his file but the org mode view is not available so I
can't create the correct header yet.
Re tangling I am happy to end with just org files and generate elisp
on the fly as I use GUIs and start emacs and leave it running - even
if I use docker that would be via tramp so still the main emacs.

*** Problems

**** TODO Spaces
 Current babel code encodes files with spaces by http encoding so result is not the sanme as the start. I think that this is not required in tangle but that is a code change. Safest fix is to move init files but need to deal with customisation

**** TODO Links
I tried to include all the org text in the source code but that adds extra links which seem to defeat detangle - but could be space related
*** Include
I want separate files - so when fiddling a mode then I can see it git
history easily what changed.
Methods seem to be
1. use org-mode's include
2.  else as [[https://github.com/eschulte/emacs24-starter-kit][Emacs starter kit]]. Which has a special elisp load of then
   org file. But this does not save .el to disk so issue with debugging
3. Just require the el file - you tangle the org file first. - but
   need to make them all save
There are also loaders that optionally load - but as I just have one
machine just load all.
With experience messing stuff up.
You need the .el to edit if crashed.

**** TODO Hack
Eventual is probably based off nullman.net
Start by tangle on save if in init dir [[https://emacs.stackexchange.com/a/20733/9874][SO answer]] and also do a
starterkit loader that check date of el and org and regenerates if
needed. Eventually the el file is not needed but let's convert fully
first (unless you need fast starts)

*** Aquamacs
 This file runs under Aquamacs, I use Aquamacs because it was the easiest distribution to set up in 2002. Nowadays with package loaders and starter kits this is not so needed.
 Aquamacs does have one advantage it uses Apple's spellchecker and that will not be rolled into GNU.
 Aquamacs though is old Aquamacs 3.4 GNU Emacs 25.3.50.1 Emacs is now on 26 and has been for over a year but if we just need new packages then version is OK.

**** user-emacs-directory
 This is the directory emacs reads and writers support files from. This is a mess as some files are under version control and others are created on the fly. The ones on the fly can have the same name as packages and so stop loading (e.g. Tramp and Calc). There are several ways round this e.g. [[https://github.com/emacscollective/no-littering][No Littering]] Aquamacs does this by moving user-emacs-directory and putting the start dir on the load-path but also every possible directory so can't find it easily and hard codes paths and no use a directory so have to have our own const.

  Aquamacs does drop a lot into its directory and makes use-emacs-directory always this even if the config files are elsewhere.

 Now text based things donm't like spaces (programmers are lazy) I want a structured text editor
 The issue here is when tangling the references to files are encoded to remove spaces so the directory becomes ~/Library/Preferences/Aquamacs%20Emacs so riund tripping fails.

***** DONE Need to move all init files into a path that has no spaces
	  CLOSED: [2019-05-06 Mon 02:21]

***** DONE Look at xah lee's get filename codes
	  CLOSED: [2019-05-04 Sat 04:57]

*** Load order
Startup files aquamacs looks in are site-start.el then init.el and in a directory order not including ~/.emacs.d/ (actually it does include this)(Aquamacs loads Preferences.el I just make that load init.el so I could use a more standard emacs note that would need to deal with customizations as Aquamacs already has set that.
Also see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Emacs manual
on init-files]]

From  aquamacs-get-custom-file-dotemacs-warning
;; %s
;; Warning: After loading this .emacs file, Aquamacs will also load
;; customizations from `custom-file' (customizations.el). Any settings there
;; will override those made here.
;; Consider moving your startup settings to the Preferences.el file, which
;; is loaded after `custom-file':

* Implement
Full init
*** Control init environment
:PROPERTIES:
  :header-args:    :tangle init.el :comments link
  :END:
All this is tangled into init.el which is also under git.

**** Startup
 These are speedup and safety changes but note that  Aquamacs has probably already taken most of the time.

 Elisps and init files have two ways of doing this. One is to put the whole init inside a let block but I want each src block to be runnable from the org file so not good. The other is to set and copy old values at the beginning then use an end hook to put them back. A long term alternative is to make the loader function do that work.
 The time is probably not that useful - build on Aquamacs instead and there is an emacs profiler. I did get the Aquamacs nightly and that is much slower and displaying menus is an issue. I have changed accessibility in System Preferences->Privacy so we will see. Probably wait until emacs 27 is out and use a plain emacs and see about spell checking
 The file-name-handler-alist is probably needed as some of the hooks slow things heavily

 This is from [[ https://github.com/jwiegley/dot-emacs/blob/master/init.el#L1013][John Wiegley]]
 #+begin_src emacs-lisp
 (defconst emacs-start-time (current-time))

 (defvar file-name-handler-alist-old file-name-handler-alist)

 (setq package-enable-at-startup nil
	   file-name-handler-alist nil
	   message-log-max 16384
	   gc-cons-threshold 402653184
	   gc-cons-percentage 0.6
	   auto-window-vscroll nil)
 #+end_src
**** Debug flag
	 #+begin_src emacs-lisp
(setq init-file-debug nil)
	 #+end_src

**** Code to do loading
  Need to get the correct directory

  Function to load the code for this part of the init.
  Currently it just loads the .el of that name so could just be (load "mwb-init-load"). I now tangle all org-mode buffers on save. Eventually it will get the data from mwb-init-load.org and tangle it and use that.

**** Helper functions
Thse are required elisp for initialisation

***** Set where the init file is
 In constant mwb-user-emacs-directory
	  #+begin_src emacs-lisp
 ;; Need the directory from here.
 (defun mwb-get-directory-of-current-file ()
   "Return the full directory path of the caller's file location."
   (file-name-directory (or load-file-name buffer-file-name))
   )
 (defconst mwb-user-emacs-directory (mwb-get-directory-of-current-file))
	  #+end_src

***** Where my init code is
  See [[http://ergoemacs.org/emacs/organize_your_dot_emacs.html][Xah Lee get directory name for file]] for possible work around for user-emacs-directory. Except in some cases I do want the directory so break it up
  #+begin_src emacs-lisp
(defun mwb-user-emacs-file (name)
	"Return an absolute per-user Emacs-specific file name around where the init file is.
  It is basically locate-user-emacs-file but I have followed Aquiamacs is setting that not where my init.el file is.
  Main reason to use is so that I can put init under version control and the rest go elsewhere."
	(expand-file-name name mwb-user-emacs-directory))
  #+end_src
***** The loader
 Actually load the init files, protect is aquamacs macro to carch errors also see [[https://emacs.stackexchange.com/a/671/9874][Stack Exchange answer]]
This fails for config.org so that needs to be in version control.
   #+begin_src emacs-lisp
   (defun mwb-init-load (file-root)
	 "Load the relevant code. Currently just the same as load it loads
		 <file-root>.el but eventually will load <file-root>.org"
	 (let* ((org-file
			 (concat (expand-file-name file-root mwb-user-emacs-directory) ".org"))
			(el-file
			 (concat (expand-file-name file-root mwb-user-emacs-directory) ".el")))

	   (when (file-newer-than-file-p org-file el-file)
		 (require 'org)
		 (message "This loaded an org mode but from the system - best to restart")
		 (message "tangle <%s> to <%s>" org-file el-file)
		 (org-babel-tangle-file org-file el-file))

	   (condition-case err
		   (load el-file)
		 (error (message "Error loading %s: \"%s\""
						 file-root
						 (error-message-string err))
				nil))))
      #+end_src
**** The Load
	 #+begin_src emacs-lisp
	 (mwb-init-load "config")
	 #+end_src
*** Emacs environment
Setup minimum to run the configuration.
I suspect the order after this does not matter
**** After initialisation
Although see starter kit where they run after init.
  #+begin_src emacs-lisp
  (add-hook 'after-init-hook
			`(lambda ()
			   (setq file-name-handler-alist file-name-handler-alist-old
					 gc-cons-threshold 800000
					 gc-cons-percentage 0.1)
			   (garbage-collect)
			   (message "Emacs init-time %s" (emacs-init-time))) t)
  #+end_src
**** Message
	 Show message with timestamp
     #+begin_src emacs-lisp
	 (defun my-message-with-timestamp (old-func fmt-string &rest args)
	   "Prepend current timestamp (with microsecond precision) to a message"
	   (apply old-func
			  (concat (format-time-string "[%F %T.%3N %Z] ")
					  fmt-string)
			  args))
	 (advice-add 'message :around #'my-message-with-timestamp)

	 (defun mwb-message-remove-timestanp ()
	   (interactive)
	   (advice-remove 'message #'my-message-with-timestamp)
	   (message "remove timestamp"))

	 (add-hook 'after-init-hook 'mwb-message-remove-timestanp)
      #+end_src
**** Emacs Lisp
***** Debugging
	  This slows things down so for debugging outside init. but I now don't like Backtrace mainly as trying to use emacs not edit it.
	  But for debugging init we don't want the backtrace

      #+begin_src emacs-lisp
      ;;  setting to nil turns them off
      (add-hook 'after-init-hook
                (lambda () (setq debug-on-error nil)))
      (setq debug-on-error nil)
      (setq debug-on-quit nil)
     #+end_src
***** Use source where newer
 This variable tells Emacs to prefer the .el file if it’s newer, even if there is a corresponding .elc file.
	  #+begin_src emacs-lisp
(setq load-prefer-newer t)
	  #+end_src
**** Customisation file
 Yes Aquamacs does this but in a directory with a space. SO put with code so can be under source code control and user-emacs-directory is not.
 Needs to have initsplit added so can seperate out customization files.
 #+begin_src emacs-lisp
 (setq custom-file (mwb-user-emacs-file "custom/custom.el"))
 (load custom-file 'noerror)
 #+end_src
**** Packaging
      #+begin_src emacs-lisp
	  (mwb-init-load "mwb-init-packaging")
	  #+end_src
**** Startup screen
    #+begin_src emacs-lisp
    (use-package dashboard
:disabled
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 5)
                              (bookmarks . 5)
                              (projects . 5)
                              (agenda . 5)
                              (registers . 5))))
    #+end_src
**** Matcha
		Menu bindings from [[https://github.com/jojojames/matcha][jojojames]] originally using hydra but changed to transient as I was editing so a fun day where it did not work. Transient programming interface seems nearer what I want but hydra I suspect has better functionality for my use e.g. can do commands and stay in hydra/
		#+begin_src emacs-lisp
        (use-package matcha
          :mwb-load-path "fork/matcha"
          :config
          (matcha-setup))
		#+end_src

***** Support code
		 Extra functions from JoJoJames
		 #+begin_src emacs-lisp
         (use-package jp-projectile-utils
           :mwb-load-path "site-lisp/jojojames")
		 #+end_src
***** Transient
qqqqAnother key bind menuy like hydra [[https://emacsair.me/2019/02/14/transient-0.1/][from the author of magit]]
In many ways simpler as just defines a menu but does not allow menu to remain and all entries must be named methods not lambdas.
		#+begin_src emacs-lisp
        (use-package transient
          :diminish
          :ensure t
          :config (transient-bind-q-to-quit))
		#+end_src

**** Org Mode
	  #+begin_src emacs-lisp
	  (mwb-init-load "mwb-init-org-mode")
	  #+end_src

**** Setting variables with a check on type
Used when overriding a defcustom or defvar.
Note should check on defconst
#+begin_src emacs-lisp
(use-package validate
  :ensure t)
#+end_src

*** Emacs server
 This is a simple server start - to allow emacsclient from Terminal. There are more complex starters.
 #+begin_src emacs-lisp
(use-package server
  :ensure nil
  :hook (after-init . server-mode))
 #+end_src

*** Emacs settings
**** Appearance
   #+begin_src emacs-lisp
   (mwb-init-load  "mwb-init-appearance")
   #+end_src

**** Emacs behaviour
 General emacs stuff - not common-setup used to have this but separate file might not make sense
  #+begin_src emacs-lisp
  (mwb-init-load  "mwb-init-emacs-behaviour"); odds mainly variables
  (mwb-init-load  "mwb-init-ibuffer")

  #+end_src
*** Applications
**** Gnus
	 #+begin_src emacs-lisp
	 (mwb-init-load "mwb-init-gnus")
	 #+end_src
*** Major modes

***** System management
Interfacing with the operating system
  #+begin_src emacs-lisp
  (mwb-init-load "mwb-init-file-management")
  #+end_src

***** Text modes
****** Epub reading
	   #+begin_src emacs-lisp
	   ;; Epub reader
	   (use-package nov
		 :ensure t
		 :mode ("\\.epub\\'" . nov-mode)
		 :preface
		 (defun my-nov-setup ()
		   (visual-line-mode 1)
		   (face-remap-add-relative 'variable-pitch :family "Times New Roman" :height 1.5)
		   :hook (nov-mode . my-nov-setup)))
	   #+end_src
****** Web display
	   Make contrast higher from steckemacs
	   #+begin_src emacs-lisp
	   (use-package shr
		 :custom
		 ;; increase contrast between similar colors
		 (shr-color-visible-luminance-min 60))
	   #+end_src
***** Programming modes
Includes structured data
#+begin_src emacs-lisp
(mwb-init-load "mwb-init-prog-modes")
 #+end_src
*** Key binding
  No comments as just open the files.
  #+begin_src emacs-lisp
  (mwb-init-load "mwb-init-global-keys")
  #+end_src
