#+ TITLE minimal emacs startup
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Implement init preload
:PROPERTIES:
:header-args:    :tangle early-init.el :comments link
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:0952DED1-1095-4176-8826-251CEE37BDB2
:END:

Emacs 27 introduces early-init.el to go stuff before the graphics - basically package and some gui suppression
This is taken from https://github.com/MatthewZMD/.emacs.d/blob/master/early-init.el and https://gitlab.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/emacs-init.org but many see the same

** TODO Startup
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:B524CE3C-6A8D-49DA-85A5-8504DC43F0D6
:END:
These are speedup and safety changes but note that  Aquamacs has probably already taken most of the time.

Elisps and init files have two ways of doing this. One is to put the whole init inside a let block but I want each src block to be runnable from the org file so not good. The other is to set and copy old values at the beginning then use an end hook to put them back. A long term alternative is to make the loader function do that work.

The time is probably not that useful - build on Aquamacs instead and there is an emacs profiler. (the profiler for startup files only really work if there is one init file) I did get the Aquamacs nightly and that is much slower and displaying menus is an issue. I have changed accessibility in System Preferences->Privacy so we will see. Probably wait until emacs 27 is out and use a plain emacs and see about spell checking

The file-name-handler-alist is probably needed as some of the hooks slow things heavily

This is from [[ https://github.com/jwiegley/dot-emacs/blob/master/init.el#L1013][John Wiegley]] It might make sense more in early-init.el but also needed for Emacs < 27
 #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_EC7FD451-253D-4F87-90DC-AD484305487F
 #+begin_src emacs-lisp
 ;;(defconst emacs-start-time (current-time))

 (defvar file-name-handler-alist-old file-name-handler-alist)

 (setq file-name-handler-alist nil
	   message-log-max 16384
	   gc-cons-threshold 402653184
	   gc-cons-percentage 0.6
	   auto-window-vscroll nil)
 #+end_src

** Package
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:D069442D-B7AF-4771-800A-87C4F3376AF0
:END:
Package initialize occurs automatically, before `user-init-file' is loaded, but after `early-init-file'. emacs handles package initialization, so we must prevent Emacs from doing it early!
But if using package we do want it done - early-init turn off is for straight.el etc
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_407877DD-DF72-4900-9475-7723E8D855A2
#+begin_src emacs-lisp
;;(setq package-enable-at-startup nil)
#+end_src
Set the path to packages
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_0E90CFE6-BBAC-4DA3-8461-12811764098F
#+begin_src emacs-lisp
(setq package-user-dir
                 (expand-file-name
                  (format "elpa/%s/elpa"
                          (concat emacs-version (when (getenv "MELPA_STABLE") "-stable"))) user-emacs-directory))
#+end_src
** Graphical suppression
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:11552906-7CE1-4A2D-90DF-111015341ACB
:END:
Fiddle with suppressing graphics. I do want some of these
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_19B4CE88-E1D4-4E44-91B7-AD3D8E74C2D3
#+begin_src emacs-lisp
;;(menu-bar-mode -1)
(unless (and (display-graphic-p) (eq system-type 'darwin))
  (push '(menu-bar-lines . 0) default-frame-alist))
(push '(tool-bar-lines . 0) default-frame-alist)
;;(push '(vertical-scroll-bars) default-frame-alist)
(setq tool-bar-mode nil)
#+end_src
** Elisp code for use in all
:PROPERTIES:
:ID:       org_mark_2020-11-13T08-54-14+00-00_mini12.local:5DDEB242-A0B0-4733-BCA1-7C5602A55762
:END:

For some useful macros [[https://github.com/waymondo/hemacs][hemacs]]

#+NAME: org_mark_2020-11-13T08-54-14+00-00_mini12.local_B13702B5-689F-4646-85F2-FD570054EAC4
#+begin_src emacs-lisp
(defmacro add-hook-lambda (hook &rest body)
  (declare (indent 1) (debug t))
  `(add-hook ,hook (lambda () ,@body)))
#+end_src
* Implement init environment (init.el)
:PROPERTIES:
  :header-args:    :tangle init.el :comments link
  :ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:026AF0E8-C6EC-470F-906D-602EF7F08477
  :END:
All this is tangled into init.el which is also under git.

** Where the files are
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:EC710A48-6A42-4CEE-BF2B-BBA63EA929B1
:END:
We need to sort out paths - ideally after init timers etc but we also need them to load early-init so timer is less accurate but then it is wrong for aquamacs anyway
*** Set where the init file is
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:5F44E496-0565-4D23-9D8B-128A663B9280
:END:
 In constant mwb-user-emacs-directory
	  #+begin_src emacs-lisp
 ;; Need the directory from here.
 (defun mwb-get-directory-of-current-file ()
   "Return the full directory path of the caller's file location."
   (file-name-directory (or load-file-name buffer-file-name))
   )
 (defconst mwb-user-emacs-directory (mwb-get-directory-of-current-file))
	  #+end_src
*** Where my init code is
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:F550A4FA-B16B-4FD2-B11F-9F7DB4F82859
:END:
  See [[http://ergoemacs.org/emacs/organize_your_dot_emacs.html][Xah Lee get directory name for file]] for possible work around for user-emacs-directory. Except in some cases I do want the directory so break it up
  #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_86BD52C1-8055-4BB2-834D-2F088719C835
  #+begin_src emacs-lisp
(defun mwb-user-emacs-file (name)
	"Return an absolute per-user Emacs-specific file name around where the init file is.
  It is basically locate-user-emacs-file but I have followed Aquamacs is setting that not where my init.el file is.
  Main reason to use is so that I can put init under version control and the rest go elsewhere."
	(expand-file-name name mwb-user-emacs-directory))
  #+end_src

** Early init
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:4AA8B45F-675E-4673-91C4-D60292B1B349
:END:
For Emacs < 27 we need early -init
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_E7D671F1-9D29-4FF6-A8E5-8884826E6E4B
#+begin_src emacs-lisp
(when (version< emacs-version "27")
  (load (mwb-user-emacs-file "early-init")))
#+end_src
** package
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:A5028037-4023-4BE2-AFD4-68CCEDF2F249
:END:
As this is now ~/.emacs.d/init.el and not in ~/Library/Preferences Emacs sees this as startup and adds the package-initialise. So need to add here to stop init.el changing and being see in github
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_B623E658-A6AA-46DF-AD9C-6EAC3BDC1BEE
#+begin_src emacs-lisp
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;(package-initialize)
#+end_src
** Debug flag
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:20E9D7CA-52FB-4C0D-94B7-380665846841
:END:
	 #+begin_src emacs-lisp
(setq init-file-debug 'nil)
;; (require 'profiler)
;; (profiler-start 'cpu+mem)
;; (add-hook-lambda after-init-hook (profiler-stop))
	 #+end_src

** Code to do loading
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:3A4B05D6-A440-46F1-8A2F-1AFF3B0CAA2D
:END:
  Need to get the correct directory

  Function to load the code for this part of the init.
  Currently it just loads the .el of that name so could just be (load "mwb-init-load"). I now tangle all org-mode buffers on save. Eventually it will get the data from mwb-init-load.org and tangle it and use that.

*** Helper functions
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:438D5698-5B55-4E44-8E21-3F2F1FDC8DBF
:END:
Thse are required elisp for initialisation

**** Non org mode expander
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:7F3FFC0C-4CF3-45B1-B0DB-C268A0350E9D
:END:
This is from nullman's init files]]  withn a rename to show it is not part of org.
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_315EE687-FC28-4D41-810D-4FF19AA66CD4
#+begin_src emacs-lisp

(defun nullman/org-babel-generate-elisp-file (file &optional byte-compile force)
  "Generate an emacs-lisp file from an org-babel FILE.

Additionally, byte compile the file if BYTE-COMPILE is
non-nil.

Process file even if timestamp is not newer than target if FORCE
is non-nil."
  (let* ((case-fold-search t)
         (file-base (expand-file-name (file-name-sans-extension file)))
         (file-org (concat file-base ".org"))
         (file-elisp (concat file-base ".el"))
         (file-comp (concat file-base ".elc"))
         (heading-regexp "^\*+ ")
         (heading-comment-regexp "^\*+ COMMENT ")
         (begin-regexp "^[ \t]*#\\+BEGIN_SRC emacs-lisp")
         (begin-tangle-regexp "^[ \t]*#\\+BEGIN_SRC .*:tangle ")
         (end-regexp "^[ \t]*#\\+END_SRC")
         (indent-regexp "^  "))
    ;; generate elisp file if needed
    (when (or force
              (not (file-exists-p file-elisp))
              (file-newer-than-file-p file-org file-elisp))
      (message "Nullman Writing %s..." file-elisp)
      (with-temp-file file-elisp
        (insert-file-contents file)
        (goto-char (point-min))
        (let (code
              headings-counts
              (level 1)
              (comment-level 0)
              (end-comment ""))
          (while (not (eobp))
            (cond
             ;; comment heading
             ((let ((case-fold-search nil))
                (looking-at heading-comment-regexp))
              (setq level (/ (- (match-end 0) (line-beginning-position) 8) 2))
              (when (or (zerop comment-level)
                        (< level comment-level))
                (setq comment-level level))
              (delete-region (line-beginning-position) (progn (forward-line) (point))))
             ;; normal heading
             ((looking-at heading-regexp)
              (setq level (/ (- (match-end 0) (line-beginning-position)) 2))
              (when (or (zerop comment-level)
                        (<= level comment-level))
                (setq comment-level 0)
                (if (assoc level headings-counts)
                    (setf (cdr (assoc level headings-counts))
                          (cons (buffer-substring-no-properties (match-end 0) (line-end-position)) 1))
                  (setq headings-counts (append headings-counts (list (cons level (cons "No heading" 1)))))))
              (delete-region (line-beginning-position) (progn (forward-line) (point))))
             ;; start of tangled source block
             ((and (looking-at begin-regexp)
                   (zerop comment-level)
                   (not (looking-at begin-tangle-regexp))) ; skip blocks with their own tangle directive
              (let* ((heading-count (cdr (assoc level headings-counts)))
                     (heading (car heading-count))
                     (count (cdr heading-count)))
                (delete-region (line-beginning-position) (progn (forward-line) (point)))
                (unless (bobp)
                  (newline))
                (when (fboundp 'org-link-escape)
                  (insert (format ";; [[file:%s::*%s][%s:%s]]\n" file-org (org-link-escape heading) heading count))
                  (setq end-comment (format ";; %s:%s ends here\n" heading count))
                  (cl-incf (cddr (assoc level headings-counts))))
                (setq code t)))
             ;; end of tangled source block
             ((and code
                   (looking-at end-regexp))
              (delete-region (line-beginning-position) (progn (forward-line) (point)))
              (insert end-comment)
              (setq code nil
                    end-comment ""))
             ;; inside tangled source block
             (code
              (when (looking-at indent-regexp)
                (delete-char (if (boundp 'org-edit-src-content-indentation)
                                 org-edit-src-content-indentation
                               2)))
              (forward-line))
             ;; outside tangled source block
             (t
              (delete-region (line-beginning-position) (progn (forward-line) (point))))))
          (time-stamp))
        (message "Nullman Wrote %s..." file-elisp)))

    ))
#+end_src

**** The loader
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:E5C792B6-CEE6-49E0-BB4B-F0C9636159E8
:END:
 Actually load the init files, protect is aquamacs macro to carch errors also see [[https://emacs.stackexchange.com/a/671/9874][Stack Exchange answer]]
***** Internal loader function
:PROPERTIES:
:ID:       org_mark_mini20.local:20210126T224850.541695
:END:
Does the actual work

#+NAME: org_mark_mini20.local_20210126T224850.526804
#+begin_src emacs-lisp
(setq mwb-esup-depth 1)                 ; Some attempt at benchmarking

(defun mwb-init--load (file-root-abs &optional no-org)
  "Load the relevant code.
<file-root> is an absolute file root
Look for <file-root>.org and <file-root>.el files.
If org and no el or org file is newer then retangle the org file if noorg is not nil then use nullmans expand then load <file-root>.el "
  (let* ((org-file
          (concat file-root-abs ".org"))
         (el-file
          (concat file-root-abs ".el")))
    (setq esup-depth mwb-esup-depth)
    ;; (setq esup-child-max-depth mwb-esup-depth )
    (setq esup-child-current-depth 0)
    (when (file-newer-than-file-p org-file el-file)
      (cond (no-org
             (message "tangle <%s> to <%s> using regex replacement not org mode"
                      org-file el-file)
             (nullman/org-babel-generate-elisp-file org-file el-file))
            (t
             (require 'org)
             (message "This loaded an org mode but from the system - best to restart")
             (message "tangle <%s> to <%s> using org version %s"
                      org-file el-file org-version)
             (org-babel-tangle-file org-file el-file))))

    (condition-case err
        (load el-file)
      (error (let ((msg (format-message "Error loading %s: \"%s\""
                                        el-file
                                        (error-message-string err))))
               (warn msg)
               (message msg))))))
#+end_src
***** Load one file
:PROPERTIES:
:ID:       org_mark_mini20.local:20210126T224850.540945
:END:
Use in the main init
#+NAME: org_mark_mini20.local_20210126T224850.527570
#+begin_src emacs-lisp
(defun mwb-init-load (file-root &optional no-org)
  (mwb-init--load (expand-file-name file-root mwb-user-emacs-directory) no-org))
#+end_src
***** Load all the files from a directory.
:PROPERTIES:
:ID:       org_mark_mini20.local:20210126T224850.539290
:END:
Perhaps might need to sort by length as - is before . so lisp.org loads after lisp-emacs.org. Currently use _ as separator.
#+NAME: org_mark_mini20.local_20210126T224850.527835
#+begin_src emacs-lisp
(defun mwb-init-load-directory (rel-dir-name)
  "Load up all the files using the init loaded from a directory"
  (let* ((directory-name (expand-file-name rel-dir-name mwb-user-emacs-directory))
         (files (directory-files
                 directory-name
                 nil
                 (rx-to-string '(seq any ".org" eol)))))

    (dolist (f files)
      (mwb-init--load (expand-file-name (file-name-sans-extension f) directory-name)))))
#+end_src
** The Load
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:97D3202A-5B42-411F-9312-331821931E25
:END:
Also switch between an alternate setup - ideally should be driven from command line but.....

#+NAME: org_mark_mini12.local_20201213T195905.304356
#+begin_src emacs-lisp
(mwb-init-load "config" "no-org")
;; (load (concat (expand-file-name "alt/alt_init" mwb-user-emacs-directory) ".el"))
#+end_src
