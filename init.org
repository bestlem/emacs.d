 description and copy of init
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Overview
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:06048FCE-5B9D-417E-81DD-36BD1813BD37
:END:
** Introduction
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:FDC94923-0A02-4D12-8EB9-FC9149C88874
:END:
 OK I caught the bug to create an org mode file to document my init files.

 The reason is not for the pretty files that you see on the web or github but that I was writing a few comments and realised that org mode looks nicer for those (no comment marker ; on lines) and you can deal in text mode for documentation.

I would note that my programming style is to have lots of small functions. With org-mode I can execute code from a block and not from a tangle. Unfortunately for init files use-package wants you to pout all code into one lisp form so making comments away from code.

** Use of org mode
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:81D2E3E8-E6B8-4590-9483-5B0653C7E86C
:END:

*** Tangling
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:426BD1FC-A27E-4F4C-A055-CFA3548A3D5A
:END:
init.el checks config.org and all its sub org and if needed generate a new config.el, then loads the config.el.
Possibly try to do without org mode as you won't have the up to date one without running the init and loading a package. org seems to make changing breaks.  The best would be similar to [[http://nullman.net/emacs/][nullman's init files]] where init is in
the same config file as the rest but generated by itself., I have the latter but must use org mode as I also use noweb.
I would have started with his file but the org mode view is not available (not certain what I mean there). So I can't create the correct header yet.

Re tangling I am happy to end with just org files and generate elisp on the fly as I use GUIs and start emacs and leave it running - even if I use docker that would be via tramp so still the main emacs.

*** Commentary on process after a few months
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:7B2EE29E-B50D-46C1-A0C8-2E5E3FB087D8
:END:

**** Tangling
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:07C73218-3E08-4101-B6A1-9A54C1B8339F
:END:
Well I put it all under an org file to generate but I thought about  changing back to plain elisp - well with comments.

The issues ere
1. automatic generation of .el files can go wrong when you have bad code and
a) it is difficult to spot
b) org mode versions change the file ids so can differ.
2. If in emacs lisp there are tools for searching etc. Most of the time as this is just a config this does not matter but on complex setups (e.g. ironically, org-mode you have to write mal-formed code
3. init.el still needs to be generated.

But org mode is nice as much more readable then commented elisp. ie variable face font and wrapping to screen.

So this file will have odd random comments taken from the code.

So it is are you reading or debugging?
Doing a course in ml would be better in org-mode

Alternative is can you edit the source buffers - means no weave but can have bad source in the org file but good in the elisp. So try that first and I think an org mode bug - need to set name and not :noweb-ref perhaps latter only works if not light.
So use this correctly and stick with org mode. But to work each code block needs a separate name or at least they must be in the file next to each other - which blows up my put all hooks on one ref and all config on another and then group by topic.

Issue I think is how much do you need the IDE features.

**** Nullman expansion
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:BA28A92A-0B52-45ED-9FA7-A9EDC53F853B
:END:
This does not use org-mode but does not allow weaving - and just found out tangling to separate files. SO need an init.org and a config.org

**** Others
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:14A8D18F-05E7-43C0-B597-2F14982E5964
:END:
For resilience over org version issues put as much after org as possible (makes case for using non org mode expand until org mode loaded)
The important bits are init - the loader, packaging and org mode itself. The rest goes to all.org

Seems that really each tangled bit should be in a separate file that if fails can be ignored. and my init load function does the catch so this is why some bits only failed.

So use smaller files.and only call from upper level ie org-base calling org-all is bad but that is a special case, as that has to work - all othe code tends to be independant or at least the editor runs.

**** Debugging and weaving
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:1EEE4B54-423E-4CF3-BD94-2B0739EBA271
:END:
Basically if you write code and can run a test and all is OK then weaving etc is good.

However if you need to debug or search in code semantically then weaving is an issue.

Also it helps to have each src block be valid code. So I would now note use use-package keywords for large code but rather weave.

***** Detangle
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:FB40535D-AC32-4827-9BCA-6A0AA012530C
:END:
Detangle works if simple but if you start using weaving then jumping back to code does not seem to work org-babel-tangle-jump-to-org does not find - see org-all.org 19/1/2020 Debugging this is nasty as the code uses regexes

***** Code jumping
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:A459B9E9-2F49-427B-B922-21E91EB62C78
:END:
The code tools work on the tangled files
*** Problems
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:975526D0-699C-4029-A478-31E9A425E023
:END:

**** DONE Spaces
CLOSED: [2020-01-19 Sun 22:18]
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:E875054D-6847-45DC-A1B6-F942E4B610DF
:END:
 Current babel code encodes files with spaces by http encoding so result is not the sanme as the start. I think that this is not required in tangle but that is a code change. Safest fix is to move init files but need to deal with customisation
I think newer org-mode fixes this.

**** DONE Links
CLOSED: [2019-12-16 Mon 15:15]
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:9473271B-E3A3-428E-A5F8-0E83BAC068E9
:END:
I tried to include all the org text in the source code but that adds extra links which seem to defeat detangle - but could be space related
*** Include
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:74BA1982-CD5C-46E1-A35A-B661B3FBF75B
:END:
I want separate files - so when fiddling a mode then I can see it git
history easily what changed.
Methods seem to be
1. use org-mode's include
2.  else as [[https://github.com/eschulte/emacs24-starter-kit][Emacs starter kit]]. Which has a special elisp load of then
   org file. But this does not save .el to disk so issue with debugging
3. Just require the el file - you tangle the org file first. - but
   need to make them all save
There are also loaders that optionally load - but as I just have one
machine just load all.
With experience messing stuff up.
You need the .el to edit if crashed.

**** TODO Hack
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:1B3D8456-5143-4FCB-9A9D-BF3388034DC6
:END:
Eventual is probably based off nullman.net
Start by tangle on save if in init dir [[https://emacs.stackexchange.com/a/20733/9874][SO answer]] and also do a
starterkit loader that check date of el and org and regenerates if
needed. Eventually the el file is not needed but let's convert fully
first (unless you need fast starts)

*** Aquamacs
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:2C2ECB04-6F35-443F-B338-CF0568950E32
:END:
 This file runs under Aquamacs, I use Aquamacs because it was the easiest distribution to set up in 2002. Nowadays with package loaders and starter kits this is not so needed.
 Aquamacs does have one advantage it uses Apple's spellchecker and that will not be rolled into GNU.
 Aquamacs though is old Aquamacs 3.4 GNU Emacs 25.3.50.1 Emacs is now on 26 and has been for over a year but if we just need new packages then version is OK.

**** user-emacs-directory
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:33CC1C76-14C5-4343-9409-081892FDCDB8
:END:
 This is the directory emacs reads and writers support files from. This is a mess as some files are under version control and others are created on the fly. The ones on the fly can have the same name as packages and so stop loading (e.g. Tramp and Calc). There are several ways round this e.g. [[https://github.com/emacscollective/no-littering][No Littering]] Aquamacs does this by moving user-emacs-directory and putting the start dir on the load-path but also every possible directory so can't find it easily and hard codes paths and no use a directory so have to have our own const.

  Aquamacs does drop a lot into its directory and makes use-emacs-directory always this even if the config files are elsewhere.

 Now text based things don't like spaces (programmers are lazy) I want a structured text editor
 The issue here is when tangling the references to files are encoded to remove spaces so the directory becomes ~/Library/Preferences/Aquamacs%20Emacs so riund tripping fails.

 On using no-littering - all it does is special case some things but not many so better either do Aquamacs way but use a new directory or deal on case by case basis. The latter might be needed for etc files.

***** DONE Need to move all init files into a path that has no spaces
	  CLOSED: [2019-05-06 Mon 02:21]
      :PROPERTIES:
      :ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:B72D3AD0-0C0E-4B84-A223-84DB8DF0B729
      :END:

***** DONE Look at xah lee's get filename codes
	  CLOSED: [2019-05-04 Sat 04:57]
      :PROPERTIES:
      :ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:9B340F79-40DE-4483-A896-BF2A928D7528
      :END:

*** Load order
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:3EE6A848-A0ED-4EC7-A398-58F3ABAFA76E
:END:
Startup files aquamacs looks in are site-start.el then init.el and in a directory order not including ~/.emacs.d/ (actually it does include this)(Aquamacs loads Preferences.el I just make that load init.el so I could use a more standard emacs note that would need to deal with customizations as Aquamacs already has set that.
Also see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Emacs manual
on init-files]]

From  aquamacs-get-custom-file-dotemacs-warning
;; %s
;; Warning: After loading this .emacs file, Aquamacs will also load
;; customizations from `custom-file' (customizations.el). Any settings there
;; will override those made here.
;; Consider moving your startup settings to the Preferences.el file, which
;; is loaded after `custom-file':

* Implement init preload
:PROPERTIES:
:header-args:    :tangle early-init.el :comments link
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:0952DED1-1095-4176-8826-251CEE37BDB2
:END:

Emacs 27 introduces early-init.el to go stuff before the graphics - basically package and some gui suppression
This is taken from https://github.com/MatthewZMD/.emacs.d/blob/master/early-init.el and https://gitlab.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/emacs-init.org but many see the same

** TODO Startup
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:B524CE3C-6A8D-49DA-85A5-8504DC43F0D6
:END:
 These are speedup and safety changes but note that  Aquamacs has probably already taken most of the time.

 Elisps and init files have two ways of doing this. One is to put the whole init inside a let block but I want each src block to be runnable from the org file so not good. The other is to set and copy old values at the beginning then use an end hook to put them back. A long term alternative is to make the loader function do that work.
 The time is probably not that useful - build on Aquamacs instead and there is an emacs profiler. I did get the Aquamacs nightly and that is much slower and displaying menus is an issue. I have changed accessibility in System Preferences->Privacy so we will see. Probably wait until emacs 27 is out and use a plain emacs and see about spell checking
 The file-name-handler-alist is probably needed as some of the hooks slow things heavily

 This is from [[ https://github.com/jwiegley/dot-emacs/blob/master/init.el#L1013][John Wiegley]] It might make sense more in early-init.el but also needed for Emacs < 27
 #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_EC7FD451-253D-4F87-90DC-AD484305487F
 #+begin_src emacs-lisp
 (defconst emacs-start-time (current-time))

 (defvar file-name-handler-alist-old file-name-handler-alist)

 (setq file-name-handler-alist nil
	   message-log-max 16384
	   gc-cons-threshold 402653184
	   gc-cons-percentage 0.6
	   auto-window-vscroll nil)
 #+end_src

** Package
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:D069442D-B7AF-4771-800A-87C4F3376AF0
:END:
Package initialize occurs automatically, before `user-init-file' is loaded, but after `early-init-file'. emacs handles package initialization, so we must prevent Emacs from doing it early!
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_407877DD-DF72-4900-9475-7723E8D855A2
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src
Set the path to packages
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_0E90CFE6-BBAC-4DA3-8461-12811764098F
#+begin_src emacs-lisp
(setq package-user-dir
                 (expand-file-name
                  (format "elpa/%s/elpa"
                          (concat emacs-version (when (getenv "MELPA_STABLE") "-stable"))) user-emacs-directory))
#+end_src
** Graphical suppression
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:11552906-7CE1-4A2D-90DF-111015341ACB
:END:
Fiddle with suppressing graphics. I do want some of these
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_19B4CE88-E1D4-4E44-91B7-AD3D8E74C2D3
#+begin_src emacs-lisp
;;(menu-bar-mode -1)
(unless (and (display-graphic-p) (eq system-type 'darwin))
  (push '(menu-bar-lines . 0) default-frame-alist))
(push '(tool-bar-lines . 0) default-frame-alist)
;;(push '(vertical-scroll-bars) default-frame-alist)
(setq tool-bar-mode nil)
#+end_src


* Implement init environment (init.el)
:PROPERTIES:
  :header-args:    :tangle init.el :comments link
  :ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:026AF0E8-C6EC-470F-906D-602EF7F08477
  :END:
All this is tangled into init.el which is also under git.

** Where the files are
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:EC710A48-6A42-4CEE-BF2B-BBA63EA929B1
:END:
We need to sort out paths - ideally after init timers etc but we also need them to load early-init so timer is less accurate but then it is wrong for aquamacs anyway
*** Set where the init file is
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:5F44E496-0565-4D23-9D8B-128A663B9280
:END:
 In constant mwb-user-emacs-directory
	  #+begin_src emacs-lisp
 ;; Need the directory from here.
 (defun mwb-get-directory-of-current-file ()
   "Return the full directory path of the caller's file location."
   (file-name-directory (or load-file-name buffer-file-name))
   )
 (defconst mwb-user-emacs-directory (mwb-get-directory-of-current-file))
	  #+end_src


*** Where my init code is
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:F550A4FA-B16B-4FD2-B11F-9F7DB4F82859
:END:
  See [[http://ergoemacs.org/emacs/organize_your_dot_emacs.html][Xah Lee get directory name for file]] for possible work around for user-emacs-directory. Except in some cases I do want the directory so break it up
  #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_86BD52C1-8055-4BB2-834D-2F088719C835
  #+begin_src emacs-lisp
(defun mwb-user-emacs-file (name)
	"Return an absolute per-user Emacs-specific file name around where the init file is.
  It is basically locate-user-emacs-file but I have followed Aquamacs is setting that not where my init.el file is.
  Main reason to use is so that I can put init under version control and the rest go elsewhere."
	(expand-file-name name mwb-user-emacs-directory))
  #+end_src

** Early init
:PROPERTIES:
:ID:       org_mark_2020-09-28T01-08-28+01-00_mini12.local:4AA8B45F-675E-4673-91C4-D60292B1B349
:END:
For Emacs < 27 we need early -init
#+NAME: org_mark_2020-09-28T01-08-28+01-00_mini12.local_E7D671F1-9D29-4FF6-A8E5-8884826E6E4B
#+begin_src emacs-lisp
(when (version< emacs-version "27")
      (load (mwb-user-emacs-file "early-init")))
#+end_src
** package
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:A5028037-4023-4BE2-AFD4-68CCEDF2F249
:END:
As this is now ~/.emacs.d/init.el and not in ~/Library/Preferences Emacs sees this as startup and adds the package-initialise. So need to add here to stop init.el changing and being see in github
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_B623E658-A6AA-46DF-AD9C-6EAC3BDC1BEE
#+begin_src emacs-lisp
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
;(package-initialize)
#+end_src
** Debug flag
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:20E9D7CA-52FB-4C0D-94B7-380665846841
:END:
	 #+begin_src emacs-lisp
(setq init-file-debug t)
	 #+end_src

** Code to do loading
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:3A4B05D6-A440-46F1-8A2F-1AFF3B0CAA2D
:END:
  Need to get the correct directory

  Function to load the code for this part of the init.
  Currently it just loads the .el of that name so could just be (load "mwb-init-load"). I now tangle all org-mode buffers on save. Eventually it will get the data from mwb-init-load.org and tangle it and use that.

*** Helper functions
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:438D5698-5B55-4E44-8E21-3F2F1FDC8DBF
:END:
Thse are required elisp for initialisation

**** Non org mode expander
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:7F3FFC0C-4CF3-45B1-B0DB-C268A0350E9D
:END:
This is from nullman's init files]]  withn a rename to show it is not part of org.
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_315EE687-FC28-4D41-810D-4FF19AA66CD4
#+begin_src emacs-lisp

(defun nullman/org-babel-generate-elisp-file (file &optional byte-compile force)
  "Generate an emacs-lisp file from an org-babel FILE.

Additionally, byte compile the file if BYTE-COMPILE is
non-nil.

Process file even if timestamp is not newer than target if FORCE
is non-nil."
  (let* ((case-fold-search t)
         (file-base (expand-file-name (file-name-sans-extension file)))
         (file-org (concat file-base ".org"))
         (file-elisp (concat file-base ".el"))
         (file-comp (concat file-base ".elc"))
         (heading-regexp "^\*+ ")
         (heading-comment-regexp "^\*+ COMMENT ")
         (begin-regexp "^[ \t]*#\\+BEGIN_SRC emacs-lisp")
         (begin-tangle-regexp "^[ \t]*#\\+BEGIN_SRC .*:tangle ")
         (end-regexp "^[ \t]*#\\+END_SRC")
         (indent-regexp "^  "))
    ;; generate elisp file if needed
    (when (or force
              (not (file-exists-p file-elisp))
              (file-newer-than-file-p file-org file-elisp))
      (message "Nullman Writing %s..." file-elisp)
      (with-temp-file file-elisp
        (insert-file-contents file)
        (goto-char (point-min))
        (let (code
              headings-counts
              (level 1)
              (comment-level 0)
              (end-comment ""))
          (while (not (eobp))
            (cond
             ;; comment heading
             ((let ((case-fold-search nil))
                (looking-at heading-comment-regexp))
              (setq level (/ (- (match-end 0) (line-beginning-position) 8) 2))
              (when (or (zerop comment-level)
                        (< level comment-level))
                (setq comment-level level))
              (delete-region (line-beginning-position) (progn (forward-line) (point))))
             ;; normal heading
             ((looking-at heading-regexp)
              (setq level (/ (- (match-end 0) (line-beginning-position)) 2))
              (when (or (zerop comment-level)
                        (<= level comment-level))
                (setq comment-level 0)
                (if (assoc level headings-counts)
                    (setf (cdr (assoc level headings-counts))
                          (cons (buffer-substring-no-properties (match-end 0) (line-end-position)) 1))
                  (setq headings-counts (append headings-counts (list (cons level (cons "No heading" 1)))))))
              (delete-region (line-beginning-position) (progn (forward-line) (point))))
             ;; start of tangled source block
             ((and (looking-at begin-regexp)
                   (zerop comment-level)
                   (not (looking-at begin-tangle-regexp))) ; skip blocks with their own tangle directive
              (let* ((heading-count (cdr (assoc level headings-counts)))
                     (heading (car heading-count))
                     (count (cdr heading-count)))
                (delete-region (line-beginning-position) (progn (forward-line) (point)))
                (unless (bobp)
                  (newline))
                (when (fboundp 'org-link-escape)
                  (insert (format ";; [[file:%s::*%s][%s:%s]]\n" file-org (org-link-escape heading) heading count))
                  (setq end-comment (format ";; %s:%s ends here\n" heading count))
                  (cl-incf (cddr (assoc level headings-counts))))
                (setq code t)))
             ;; end of tangled source block
             ((and code
                   (looking-at end-regexp))
              (delete-region (line-beginning-position) (progn (forward-line) (point)))
              (insert end-comment)
              (setq code nil
                    end-comment ""))
             ;; inside tangled source block
             (code
              (when (looking-at indent-regexp)
                (delete-char (if (boundp 'org-edit-src-content-indentation)
                                 org-edit-src-content-indentation
                               2)))
              (forward-line))
             ;; outside tangled source block
             (t
              (delete-region (line-beginning-position) (progn (forward-line) (point))))))
          (time-stamp))
        (message "Nullman Wrote %s..." file-elisp)))

    ))
#+end_src

**** The loader
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:E5C792B6-CEE6-49E0-BB4B-F0C9636159E8
:END:
 Actually load the init files, protect is aquamacs macro to carch errors also see [[https://emacs.stackexchange.com/a/671/9874][Stack Exchange answer]]
This fails for config.org so that needs to be in version control.
   #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_A039068A-5F9B-4C02-A1C9-156C79F14A5B
   #+begin_src emacs-lisp
(defun mwb-init-load (file-root &optional no-org)
  "Load the relevant code.
        Look for <file-root>.org and <file-root>.el files.
        If org and no el or org file is newer
        then retangle the org file if noorg is not nil then use nullmans expand
        then load <file-root>.el "
  (let* ((org-file
          (concat (expand-file-name file-root mwb-user-emacs-directory) ".org"))
         (el-file
          (concat (expand-file-name file-root mwb-user-emacs-directory) ".el")))

    (when (file-newer-than-file-p org-file el-file)
      (cond (no-org
             (message "tangle <%s> to <%s> using regex replacement not org mode"
                      org-file el-file)
             (nullman/org-babel-generate-elisp-file org-file el-file))
            (t
             (require 'org)
             (message "This loaded an org mode but from the system - best to restart")
             (message "tangle <%s> to <%s> using org version %s"
                      org-file el-file org-version)
             (org-babel-tangle-file org-file el-file))))

    (condition-case err
        (load el-file)
      (error (let ((msg (format-message "Error loading %s: \"%s\""
                                        file-root
                                        (error-message-string err))))
               (warn msg)
               (message msg))))))
      #+end_src
*** The Load
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:97D3202A-5B42-411F-9312-331821931E25
:END:
	 #+begin_src emacs-lisp
(mwb-init-load "config" "no-org")
	 #+end_src
