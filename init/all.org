#+TITLE Emacs configuration after org
#+PROPERTY:header-args :cache yes :tangle yes
* Main Load
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:5A4CBEFD-074A-4547-815A-F5E0A16E4BA1
:END:
Org mode and packaging have been loaded. Code here can use anything including  complex weaving
This adds the real use.

The order here matters.  Anything that is independentish - like major modes can go in prog-modes (historic naming) and get loaded  from *.org

We need the environment set up before we load files. Appearance and keys are later. Most things are on :defer t so only start when needed. :defer with time is also problematic as it makes :after fail; which is why some :config have use-package in them.

* After initialisation
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:9D8E9437-08ED-4247-BFC3-9B5BEE178468
:END:
Run this immediately after init to set a more reasonable setup
Memory is now in gcmh and out again.
#+NAME: org_mark_mini20.local_20220313T215313.571669
#+begin_src emacs-lisp
(defun init-mwb-hook-after-init ()
  (interactive)
  (setq debug-on-error nil)
  (setq debug-on-quit nil)
  (setq file-name-handler-alist file-name-handler-alist-old
		gc-cons-percentage 0.1)
  (setq frame-inhibit-implied-resize orig-frame-inhibit-implied-resize)
  ;; (garbage-collect)
  (message "Emacs init-time %s" (emacs-init-time)))
(add-hook 'after-init-hook #'init-mwb-hook-after-init)
#+end_src

* memory
:PROPERTIES:
:ID:       org_mark_2020-03-02T07-49-31+00-00_mini12.local:F19DE0CC-B946-4885-808E-36CB21A4AF3D
:END:
Currently using emacs defaults
** [[https://github.com/emacsmirror/gcmh][GCMH]]
:PROPERTIES:
:ID:       org_mark_mini20.local:20210830T145836.679819
:HEADER-ARGS: :tangle no
:END:
The Garbage Collector Magic Hack
This seems to be a more consistent way so can replace other bits
The only bit to stay is after-init
Note that gcmh cannot explicitly reduce the memory it does this when it gcs, which might be wrong - it assumes you do not gc during a process.

Note I now get a pizza wheel using the defaults ie might be better to have more often smaller gc
#+NAME: org_2020-12-08+00-00_C06FD610-2FD2-4E60-94B2-33A789850588
#+begin_src emacs-lisp
(use-package-elpa  gcmh
  :diminish
  :defer 20
  :config
  ;; (setq gcmh-high-cons-threshold (* 128 1024 1024))
                                        ; reduces as I got a 10G
                                        ; monster
  ;; (setq gcmh-low-cons-threshold (* 1024 1024))
                                        ; originally 800000 - increas
                                        ; because of gnus
  (setq gcmh-verbose 't)
  (setq gcmh-idle-delay 15)
  (gcmh-mode 1))
#+end_src

** Instrument emacs
:PROPERTIES:
:ID:       org_2020-12-08+00-00:C8118A2B-2B63-4B30-BDA2-3A412B508657
:END:
Make emacs message when it gcs.
#+NAME: org_2020-12-08+00-00_85933DF6-3CB1-4DBC-8EFD-F4E56D10934E
#+begin_src emacs-lisp
;; (setq garbage-collection-messages 't)
#+end_src

** Show memory use
:PROPERTIES:
:ID:       org_mark_mini20.local:20220716T224722.424478
:END:
From [[https://www.reddit.com/r/emacs/comments/ck4zb3/trying_to_understand_emacs_memory_usage_and/evji1n7/][alphapapa]]
#+NAME: org_mark_mini20.local_20220716T224722.400227
#+begin_src emacs-lisp
(defun ap/garbage-collect ()
  "Run `garbage-collect' and print stats about memory usage."
  (interactive)
  (message " %d garbage collections" gcs-done)
  (message (cl-loop for (type size used free) in (garbage-collect)
                    for used = (* used size)
                    for free = (* (or free 0) size)
                    for total = (file-size-human-readable (+ used free))
                    for used = (file-size-human-readable used)
                    for free = (file-size-human-readable free)
                    concat (format "%s: %s + %s = %s\n" type used free total))))
#+end_src

** memory-usage
:PROPERTIES:
:ID:       org_mark_mini20:20230301T120326.186419
:END:
Try this after =memory-report= failed.
#+NAME: org_mark_mini20_20230301T120326.129714
#+begin_src emacs-lisp
(use-package-elpa memory-usage
  :commands
  memory-usage-find-large-variables
  memory-usage)
#+end_src
* Setting variables with a check on type
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:86E6A7B5-5C85-4429-AE49-FA5AE7AEF73D
:END:
Used when overriding a defcustom or defvar.
Note should check on defconst
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_684763C2-3193-47EF-8CFD-5518949CC4BB
#+begin_src emacs-lisp
(use-package-elpa validate :demand)
#+end_src

* Emacs code  management
:PROPERTIES:
:ID:       org_mark_mini20.local:20220605T115513.560840
:END:

Various things to make management of init files easier
Many taken from centaur

** recompile site-lisp
:PROPERTIES:
:ID:       org_mark_mini20.local:20210624T203034.970002
:END:
This is a function so can run only from old emacs as newer emacs will not understand the byte codes. Modified to use my directories and to add fork
TODO: exclude sopme directories - especially modus-themes and treemacs as they need a proper build and/or can be done for later emacs.
#+NAME: org_mark_mini20.local_20210624T203034.951856
#+begin_src emacs-lisp
(when (< emacs-major-version 29)
  (defun mwb-init-recompile-site-lisp ()
    "Recompile packages in site-lisp directory."
    (interactive)
    (dolist (elt '("site-lisp" "fork"))
      (let ((temp-dir (mwb-user-emacs-file elt)))
        (if (fboundp 'async-byte-recompile-directory)
            (async-byte-recompile-directory temp-dir)
          (byte-recompile-directory temp-dir 0 t))))))
#+end_src

** Autocompile
:PROPERTIES:
:ID:       org_mark_mini20.local:20210822T130011.018491
:END:
Recompile emacs lisp  if already compiled on save but also on load.
#+NAME: org_mark_mini20.local_20210822T130010.997493
#+begin_src emacs-lisp
(when (= emacs-major-version 28)
  (use-package-elpa auto-compile
    :defer 15
    :config
    (auto-compile-on-load-mode)
    (auto-compile-on-save-mode)
    (setq auto-compile-display-buffer 1)))
#+end_src

** Set up C path
:PROPERTIES:
:ID:       org_mark_mini20.local:20220605T115513.558141
:END:
Let help find the C code.
;;;; Set C Directory
NOTE this assumes that the C source files are included with emacs. Or it is my main machine,
This depends on the build process used.
For one example see https://github.com/mclear-tools/build-emacs-macos
#+NAME: org_mark_mini20.local_20220625T103004.465231
#+begin_src emacs-lisp
(setq find-function-C-source-directory
	  (cond (*emacs/mac-port-p* "/Users/mark/Developer/ThirdParty/emacs-mac/src/")
			(t "/Applications/Emacs.app/Contents/Resources/src")))
#+end_src


* Emacs server
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:605AC9D7-C3F1-495D-872C-C5B901A553BB
:END:
This is a simple server start - to allow emacsclient from Terminal. There are more complex starters.

Unfortunately macport seems not to have a working one. and NS Emacs is not that good.
Then again I don't use it as I fiddel with startup code so much (and have a GUI emacs open anyway) - so remove it.
Try macport now as on arm
 #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_922BC8C2-56FC-46E7-B506-2CB94F2BB86A
 #+begin_src emacs-lisp
 (use-feature server
   ;; :unless (or *macport* *aquamacs*)
   :unless *macport*
   :hook (after-init . server-start))
 #+end_src
* Support data
:PROPERTIES:
:ID:       org_mark_mini20.local:20220612T185002.003075
:END:
Some things are set for families of modes so give a function to hook.
The intern code is from jojojames
The lisp list from `sp-lisp-modes`, but I can't use that as smartparens is not usually loaded.
#+NAME: org_mark_mini20.local_20220612T185001.987359
#+begin_src emacs-lisp
(defconst mwb-lisp-modes '(
                           cider-repl-mode
                           clojure-mode
                           clojurec-mode
                           clojurescript-mode
                           clojurex-mode
                           common-lisp-mode
                           emacs-lisp-mode
                           eshell-mode
                           fennel-mode
                           fennel-repl-mode
                           geiser-repl-mode
                           gerbil-mode
                           inf-clojure-mode
                           inferior-emacs-lisp-mode
                           inferior-lisp-mode
                           inferior-scheme-mode
                           lisp-interaction-mode
                           lisp-mode
                           monroe-mode
                           racket-mode
                           racket-repl-mode
                           scheme-interaction-mode
                           scheme-mode
                           slime-repl-mode
                           sly-mrepl-mode
                           stumpwm-mode)
  "Mode that are lisp like")
(defconst mwb-braces-modes '(c-mode
                             cpp-mode
                             objc-mode
                             )
  "Modes that use braces for program blocks")

(defconst mwb-indent-modes '(prog-mode
							 yaml-mode
							 nxml-mode
							 conf-mode
							 )
  "Modes that have indentation rules")

(defun mwb-lisp-hooks ()
  "Return hooks that are lispy."
  (mapcar (lambda (mode)
			(intern (concat (symbol-name mode) "-hook")))
		  mwb-lisp-modes))

(defun mwb-braces-hooks ()
  "Return hooks that need indetation."
  (mapcar (lambda (mode)
            (intern (concat (symbol-name mode) "-hook")))
          mwb-indent-modes))

(defun mwb-add-hook-fn (hooks fn)
  (dolist (h hooks)
    (add-hook h fn)))

(defun mwb-add-hook-for-modes (modes hook-fn)
  "Add HOOK_FN aa a hook for all modes in MODES."
  (dolist (m modes)
	(add-hook (intern (concat (symbol-name m) "-hook"))  hook-fn)))
#+end_src


* Emacs behaviour
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:EB57B856-C1F8-4E5E-82AF-2F8E154DBCA4
:END:
General emacs stuff - not common-setup used to have this but separate file might not make sense.
** Encoding
:PROPERTIES:
:ID:       org_mark_mini20.local:20220610T203957.983005
:END:
Make it all UTF-8.  From http://ergoemacs.org/emacs/emacs_make_modern.html but some are in aquamacs  and https://github.com/anschwa/emacs.d
#+NAME: org_mark_mini20.local_20220610T203957.965228
#+begin_src emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

#+end_src

** Minor mode related
:PROPERTIES:
:ID:       org_mark_mini20.local:20220610T203957.981736
:END:
These can be grouped
These tend to be settings of minor modes
#+NAME: org_mark_mini20.local_20220425T102603.318816
#+begin_src emacs-lisp
(mwb-init-load-directory "init/behaviours")
#+end_src
* Major modes
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:0E3CCAD4-14DB-4481-8235-F04F840DF4AD
:END:
Where there is common put them together. This part is really why I have separate files so I can deal with one thing at a time. But thing is more than one mode.
Lets just load them not explicitly - everything in prog-modes (a better name would be modes or config However leave as this breaks git history and I break enough - pity bazaar failed)
#+NAME: org_mark_mini20.local_20210126T225208.743497
#+begin_src emacs-lisp
(mwb-init-load-directory "init/prog-modes/")
#+end_src
* Startup data
:PROPERTIES:
:ID:       org_mark_2020-10-22T09-50-00+01-00_mini12.local:CAF18BDF-1B4E-49DD-B4CE-F0A18829FDDC
:END:
The data that emacs works on.
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:CE114471-A55C-4C32-B1DF-C83AFE265D4C
:END:
** Desktop
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2116C663-621B-43B2-8E69-B86CB71BA9BC
:END:
This saves the state perhaps I need to see how it works.
#+NAME: org_mark_2020-10-03T11-41-17+01-00_mini12.local_DC2C7645-A251-449C-AC77-40AD4B76D5B4
#+begin_src emacs-lisp
(use-package desktop
  :unless *aquamacs*
  :disabled
  :config
  (setq desktop-dirname (mwb-user-emacs-file "var/desktop/"))
  (setq desktop-path (list desktop-dirname))
  (setq desktop-base-file-name "desktop-save.el")
  (setq desktop-base-lock-name "desktop-save.el.lock")

  (desktop-save-mode 1)
  (push '(company-posframe-mode . nil)
        desktop-minor-mode-table))
#+end_src
** Revive
:PROPERTIES:
:ID:       org_mark_2020-10-09T10-33-48+01-00_mini12.local:1D167408-BEC8-460C-8644-B56A690E583E
:END:
This is what Aquamacs used - version copied from there.
Odd editing I can't edit the file lispy decides it needs to comment everything. So better just override
However decided to use more recent updated workspace2 first
#+NAME: org_mark_2020-10-09T10-33-48+01-00_mini12.local_28EE6DA2-AFFB-4773-9037-6E5E3898046D
#+begin_src emacs-lisp

#+end_src
** [[https://github.com/pashinin/workgroups2][Workgroups2]]
:PROPERTIES:
:ID:       org_mark_2020-10-09T10-33-48+01-00_mini12.local:71A81A40-89B6-47C1-B00A-83532367D9B7
:END:
Seems one of few in development and on github
Well tried and treemacs screwed up
#+NAME: org_mark_2020-10-09T10-33-48+01-00_mini12.local_3B37CB96-2AF0-4558-8B03-007D832A3898
#+begin_src emacs-lisp
(use-package-elpa workgroups2
  :disabled
  :config (workgroups-mode 1)
  (setq wg-session-load-on-start t
        wg-session-file (no-littering-expand-var-file-name "workgroups2")
        ))
#+end_src
** Current startup settings
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:0904FB99-90C7-4D22-8B26-846E12DE3921
:END:
*** Start up screen
:PROPERTIES:
:ID:       org_mark_2020-10-02T16-49-16+01-00_mini12.local:294D6FCC-B100-40FF-B990-AF7935145EB2
:END:
#+NAME: org_mark_2020-10-02T16-49-16+01-00_mini12.local_EDC6964F-B7A5-410E-819C-097B0E219B49
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src
*** Scratch buffer
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:A300832E-1253-4E83-A0C3-3DAAEE99F20D
:END:
Need to control how it is restarted. Aquamacs saves it
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_7CE610E6-5D87-43CE-9EF8-5D9112E28EF0
**** Fast startup
:PROPERTIES:
:ID:       org_mark_mini20.local:20220603T173200.242928
:END:
This is minimal as *scratch* is always created.
#+NAME: org_mark_mini20.local_20220603T173200.216019
#+begin_src emacs-lisp
;; (setq initial-major-mode 'emacs-lisp-mode)
(setq initial-major-mode 'fundamental-mode)
(setq initial-scratch-message nil)
#+end_src
**** Reload and set
:PROPERTIES:
:ID:       org_mark_mini20.local:20220603T173200.236907
:END:
#+NAME: org_mark_mini20.local_20220603T173200.223407
#+begin_src emacs-lisp
(unless *aquamacs*
  (use-package-elpa persistent-scratch
    :defer 10
    :init
    ;; (setq persistent-scratch-save-file (mwb-user-emacs-file "var/persistent-scratch"))
    :config
    (persistent-scratch-setup-default)))
#+end_src
*** Windows
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:E5DA693A-871D-4201-B814-758C4738654A
:END:
I want two windows in a frame and treemacs

Emacs 27 seems to have a timing issue pop to buffer seems not to see the spare window unless after treemacs
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_60953FEE-7E07-48DE-AD1C-66D90DAE2D5A
#+begin_src emacs-lisp
(defun init-window-setup ()
  (mwb-new-treemacs-frame-setup)
  (pop-to-buffer "*Messages*"))

(add-hook 'window-setup-hook
          #'init-window-setup)
#+end_src

