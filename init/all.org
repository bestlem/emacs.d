#+TITLE Emacs configuration after org
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Main Load
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:5A4CBEFD-074A-4547-815A-F5E0A16E4BA1
:END:
Org mode and packaging have been loaded. Code here can use anything including  complex weaving
This adds the real use.

The order here matters.  Anything that is independentish - like major modes can go in prog-modes (historic naming) and get loaded  from *.org

We need the environment set up before we load files. Appearance and keys are later. Most things are on :defer t so only start when needed. :defer with time is also problematic as it makes :after fail; which is why some :config have use-package in them.

* After initialisation
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:9D8E9437-08ED-4247-BFC3-9B5BEE178468
:END:
Although see starter kit where they run after init.
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_6BFB6DB1-D7D7-4A49-895F-C5D06CACED2F
  #+begin_src emacs-lisp
(add-hook 'after-init-hook
		  `(lambda ()
			 (setq file-name-handler-alist file-name-handler-alist-old
				   gc-cons-threshold mwb/gc-cons-threshold
				   gc-cons-percentage 0.1)
			 (garbage-collect)
			 (message "Emacs init-time %s" (emacs-init-time))) t)
  #+end_src
** Environment
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:C615E483-7CA9-42EA-9AEB-E0B541771836
:END:
*** Where things are put
:PROPERTIES:
:ID:       org_mark_2020-09-29T11-53-58+01-00_mini12.local:63AB1DE7-5C65-415D-96D0-7DAF0E0BC2BA
:END:
Aquamacs puts a lot in ~/Library/Preferences/Emacs but Emacs 27 does not know that so we want to keep some of the crap out of .Emacs.d So try no littering.
We gave up as it is just a set of people adding modes to it. There are not enough to be worth it. Do it myself. But use var as the default directory
#+NAME: org_mark_2020-09-29T11-53-58+01-00_mini12.local_1F694F93-C501-4512-BA63-CA34560F68CE
#+begin_src emacs-lisp
(use-package no-littering
  :ensure t
  :disabled
  :unless *aquamacs*)
#+end_src
**** Use Aquamacs hack and put user-Emacs-directory elsewhere
:PROPERTIES:
:ID:       org_mark_2020-10-10T14-59-33+01-00_mini12.local:0A357D06-99EB-4ACF-8F3E-646665D1053F
:END:
In this case var and overlap no-littering
#+NAME: org_mark_2020-10-10T14-59-33+01-00_mini12.local_DB515763-D42A-4AC9-B13B-49CCF27056D8
#+begin_src emacs-lisp
(unless *aquamacs*
  (setq user-emacs-directory (mwb-user-emacs-file "var/")))
#+end_src

** Setting variables with a check on type
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:86E6A7B5-5C85-4429-AE49-FA5AE7AEF73D
:END:
Used when overriding a defcustom or defvar.
Note should check on defconst
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_684763C2-3193-47EF-8CFD-5518949CC4BB
#+begin_src emacs-lisp
(use-package validate
  :ensure t)
#+end_src

* Support functions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210624T203034.970975
:END:
Various things to make management of init files easier
Many taken from centuar

** recompile site-lisp
:PROPERTIES:
:ID:       org_mark_mini20.local:20210624T203034.970002
:END:
This is a function so can run only from old emacs as newer emacs will not understand the byte codes. Modified to use my directories and to add fork
TODO: exclude sopme directories - especially modus-themes and treemacs as they need a proper build and/or can be done for later emacs.
#+NAME: org_mark_mini20.local_20210624T203034.951856
#+begin_src emacs-lisp
(unless *emacs/>=26p*
  (defun mwb-init-recompile-site-lisp ()
    "Recompile packages in site-lisp directory."
    (interactive)
    (dolist (elt '("site-lisp" "fork"))
      (let ((temp-dir (mwb-user-emacs-file elt)))
        (if (fboundp 'async-byte-recompile-directory)
            (async-byte-recompile-directory temp-dir)
          (byte-recompile-directory temp-dir 0 t))))))
#+end_src

** Autocompile
:PROPERTIES:
:ID:       org_mark_mini20.local:20210822T130011.018491
:END:
Recompile emacs lisp  if already compiled on save but also on load.
#+NAME: org_mark_mini20.local_20210822T130010.997493
#+begin_src emacs-lisp
(use-package auto-compile
  :ensure t
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  (setq auto-compile-display-buffer 1))
#+end_src
* Emacs server
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:605AC9D7-C3F1-495D-872C-C5B901A553BB
:END:
This is a simple server start - to allow emacsclient from Terminal. There are more complex starters.

Unfortunately macport seems not to have a working one. and NS Emacs is not that good.
Then again I don't use it as I fiddel with startup code so much (and have a GUI emacs open anyway) - so remove it.
Try macport now as on arm
 #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_922BC8C2-56FC-46E7-B506-2CB94F2BB86A
 #+begin_src emacs-lisp
(use-package server
  :disabled
  :unless *aquamacs*
  :ensure nil
  :hook (after-init . server-mode))
 #+end_src
* Emacs settings
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:0EBF0016-296F-41EA-8DC3-96CE752F9E9A
:END:
** Emacs behaviour
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:EB57B856-C1F8-4E5E-82AF-2F8E154DBCA4
:END:
 General emacs stuff - not common-setup used to have this but separate file might not make sense
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_C4B91741-F3AE-4F6A-908F-6FD97A7F65C0
  #+begin_src emacs-lisp
(mwb-init-load  "init/behaviour"); odds mainly variables
(mwb-init-load-directory "init/behaviours")
(mwb-init-load "init/completion")
(mwb-init-load  "init/ibuffer")  ;; could go to prog-modes
  #+end_src
* Major modes
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:0E3CCAD4-14DB-4481-8235-F04F840DF4AD
:END:
** File  management (and icons)
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:21BA326F-D699-439A-BE4F-0F877907CCCE
:END:
Interfacing with the operating system
These provide some tools for all the other modes so can't be in the modes sub directory.
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_A59FB0E5-7830-4DE9-886E-B3066C9EEE90
  #+begin_src emacs-lisp
  (mwb-init-load "init/file-management")
  #+end_src

** Helper functions
:PROPERTIES:
:ID:       org_mark_mini12.local:20201223T175853.562586
:END:
** Text modes
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:5275BBAD-CBB4-4E9E-9FD1-C79EBBF642B7
:END:
*** Epub reading
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:E3F69F7F-65FF-44C2-AA1E-2F74168D8731
:END:
	   #+begin_src emacs-lisp
	   ;; Epub reader
	   (use-package nov
		 :ensure t
		 :mode ("\\.epub\\'" . nov-mode)
		 :preface
		 (defun my-nov-setup ()
		   (visual-line-mode 1)
		   (face-remap-add-relative 'variable-pitch :family "Times New Roman" :height 1.5)
		   :hook (nov-mode . my-nov-setup)))
	   #+end_src
*** Web display
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:F2507988-AE2D-4676-9002-0FDC2DF2DBCB
:END:
	   Make contrast higher from steckemacs
	   #+begin_src emacs-lisp
	   (use-package shr
         :disabled
		 :custom
		 ;; increase contrast between similar colors
		 (shr-color-visible-luminance-min 60))
	   #+end_src
** Programming modes
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:3C0D8B60-3C14-4F89-84AB-6D54D08C2C36
:END:
Includes structured data and now anything that does not have dependency order
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_1F6B0C11-DD95-4A88-9772-8DD2C2B8950B
#+begin_src emacs-lisp
(mwb-init-load "init/prog-modes")
 #+end_src

* Key binding
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:BF4F840D-AE27-4C9B-B83E-CCFAC0C0E8DB
:END:
  No comments as just open the files.
  But can be added later
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_FEA89BFB-F2A3-4C2C-8B2D-944D09F1D38D
  #+begin_src emacs-lisp
  (mwb-init-load "init/keys")
  #+end_src


* Appearance
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:4E2542DC-19A8-480A-A0B2-EF1C192A77FB
:END:
   #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_FDEBBB87-4E2F-4E81-87B0-349A09B8D866
   #+begin_src emacs-lisp
   (mwb-init-load  "init/appearance")
   #+end_src
* Startup data
:PROPERTIES:
:ID:       org_mark_2020-10-22T09-50-00+01-00_mini12.local:CAF18BDF-1B4E-49DD-B4CE-F0A18829FDDC
:END:
The data that emacs works on.
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:CE114471-A55C-4C32-B1DF-C83AFE265D4C
:END:
** Desktop
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2116C663-621B-43B2-8E69-B86CB71BA9BC
:END:
This saves the state perhaps I need to see how it works.
#+NAME: org_mark_2020-10-03T11-41-17+01-00_mini12.local_DC2C7645-A251-449C-AC77-40AD4B76D5B4
#+begin_src emacs-lisp
(use-package desktop
  :unless *aquamacs*
  :disabled
  :config
  (setq desktop-dirname (mwb-user-emacs-file "var/desktop/"))
  (setq desktop-path (list desktop-dirname))
  (setq desktop-base-file-name "desktop-save.el")
  (setq desktop-base-lock-name "desktop-save.el.lock")

  (desktop-save-mode 1)
  (push '(company-posframe-mode . nil)
        desktop-minor-mode-table))
#+end_src
** Revive
:PROPERTIES:
:ID:       org_mark_2020-10-09T10-33-48+01-00_mini12.local:1D167408-BEC8-460C-8644-B56A690E583E
:END:
This is what Aquamacs used - version copied from there.
Odd editing I can't edit the file lispy decides it needs to comment everything. So better just override
However decided to use more recent updated workspace2 first
#+NAME: org_mark_2020-10-09T10-33-48+01-00_mini12.local_28EE6DA2-AFFB-4773-9037-6E5E3898046D
#+begin_src emacs-lisp

#+end_src
** [[https://github.com/pashinin/workgroups2][Workgroups2]]
:PROPERTIES:
:ID:       org_mark_2020-10-09T10-33-48+01-00_mini12.local:71A81A40-89B6-47C1-B00A-83532367D9B7
:END:
Seems one of few in development and on github
Well tried and treemacs screwed up
#+NAME: org_mark_2020-10-09T10-33-48+01-00_mini12.local_3B37CB96-2AF0-4558-8B03-007D832A3898
#+begin_src emacs-lisp
(use-package workgroups2
  :ensure t
  :disabled
  :config (workgroups-mode 1)
  (setq wg-session-load-on-start t
        wg-session-file (no-littering-expand-var-file-name "workgroups2")
        ))
#+end_src
** Dashboard
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:047865CE-76CF-4835-98C6-1B1313B9544C
:END:
This seemed interesting but seemed to messup lispy
    #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_36B9271A-376B-404D-AC09-6460A21BCBBF
    #+begin_src emacs-lisp
    (use-package dashboard
:disabled
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq dashboard-items '((recents . 5)
                              (bookmarks . 5)
                              (projects . 5)
                              (agenda . 5)
                              (registers . 5))))
    #+end_src
** Current startup settings
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:0904FB99-90C7-4D22-8B26-846E12DE3921
:END:
*** Start up screen
:PROPERTIES:
:ID:       org_mark_2020-10-02T16-49-16+01-00_mini12.local:294D6FCC-B100-40FF-B990-AF7935145EB2
:END:
#+NAME: org_mark_2020-10-02T16-49-16+01-00_mini12.local_EDC6964F-B7A5-410E-819C-097B0E219B49
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src
*** Scratch buffer
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:A300832E-1253-4E83-A0C3-3DAAEE99F20D
:END:
  Need to control how it is restarted. Aquamacs saves it
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_7CE610E6-5D87-43CE-9EF8-5D9112E28EF0
  #+begin_src emacs-lisp
(setq initial-major-mode 'emacs-lisp-mode)
(setq initial-scratch-message nil)
(unless *aquamacs*
  (use-package persistent-scratch
    :ensure t
    :init
    (setq persistent-scratch-save-file (mwb-user-emacs-file "var/persistent-scratch"))
    :config
    (persistent-scratch-setup-default)))
   #+end_src
*** Windows
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:E5DA693A-871D-4201-B814-758C4738654A
:END:
I want two windows in a frame and treemacs

Emacs 27 seems to have a timing issue pop to buffer seems not to see the spare window unless after treemacs
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_60953FEE-7E07-48DE-AD1C-66D90DAE2D5A
#+begin_src emacs-lisp
(add-hook 'window-setup-hook
          '(lambda ()
             (split-window-horizontally)
             (treemacs)
             (pop-to-buffer "*Messages*")
             ))
#+end_src

