#+TITLE Emacs configuration - appearance
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content

This covers what emacs looks like and how windows/frames/menus behave

* Colour theme
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:CD3D232B-6BDA-4CBC-BADF-BCEA9B8EBEC4
:END:
Aquamacs is stuck with old color themes not the cusomisable ones.
So put the choice here
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_31D76745-657A-4FFE-A6AB-1077D1192D80
#+begin_src emacs-lisp
(if (< emacs-major-version 26)
    (progn
      <<theme-old>>
      )
  (progn
    <<theme-25>>
    ))
#+end_src

** Aquamacs Theme subpart
:PROPERTIES:
:ID:       org_mark_2020-10-11T17-50-37+01-00_mini12.local:1BFA8790-4910-4422-A0B6-0425767328AD
:END:
#+name: theme-old
#+begin_src emacs-lisp :tangle no
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-high-contrast)))
#+end_src

** New themes subpart
:PROPERTIES:
:ID:       org_mark_2020-10-11T17-50-37+01-00_mini12.local:D56F4F99-A4AF-4CB6-8ADC-D28AF2FA6D38
:header-args: :noweb-ref theme-25
:END:

It turns out Emacs supports multiple themes being active at the same time, which I’m sure is convenient sometimes but becomes a right nuisance when attempting to switch themes IMO. Add a utility function to disable all currently enabled themes first.

#+NAME: org_mark_2020-10-13T18-22-15+01-00_mini12.local_76567F98-E4B9-425F-8683-FF8850619A08
#+begin_src emacs-lisp :tangle no
(setq custom-theme-directory (mwb-user-emacs-file "data/themes"))
(defvar quick-switch-themes
  (let ((themes-list (list 'leuven
                           'high-contrast
                           'modus-operandi

                           )))
    (nconc themes-list themes-list))
  "A circular list of themes to keep switching between.
Make sure that the currently enabled theme is at the head of this
list always.

A nil value implies no custom theme should be enabled.")

(defun quick-switch-themes* ()
  "Switch between to commonly used faces in Emacs.
One for writing code and the other for reading articles."
  (interactive)
  (if-let* ((next-theme (cadr quick-switch-themes)))
      (progn (when-let* ((current-theme (car quick-switch-themes)))
               (disable-theme (car quick-switch-themes)))
             (if (custom-theme-p next-theme)
                 (enable-theme next-theme)
               (load-theme next-theme t t))
             (message "Loaded theme: %s" next-theme))

    )
  (setq quick-switch-themes (cdr quick-switch-themes)))

;; From emacs or local
(load-theme 'leuven t t)

(use-package color-theme-modern
  :ensure t
  :config
  (load-theme 'high-contrast t t))

(use-package modus-operandi-theme
  :ensure t
  :config
  (load-theme 'modus-operandi t ))

(enable-theme 'leuven) ; first in list
#+end_src
* Fonts
:PROPERTIES:
:ID:       org_mark_2020-02-10T11-53-11+00-00_mini12:0A89487A-9396-43C4-9F45-0B2DBEBD41FE
:END:
*** Buffer face
:PROPERTIES:
:ID:       org_mark_2020-02-10T11-53-11+00-00_mini12:8BD8443B-8175-4615-9E81-4327864CB523
:END:
Remove from mode line
#+NAME: org_mark_2020-02-10T11-53-11+00-00_mini12_FF91EEFC-2D6E-4E05-9F12-2F30E53177D4
#+begin_src emacs-lisp
;; Remove BufFace from mode line
(eval-after-load "face-remap"
  '(diminish 'buffer-face-mode))
  #+end_src
*** Ligatures
:PROPERTIES:
:ID:       org_mark_2020-10-03T11-41-17+01-00_mini12.local:B6D6F861-4367-42CD-B6BB-D49FFC135F7D
:END:
I seem only to do this for macport
Or better from fira code https://github.com/tonsky/FiraCode/wiki/Emacs-instructions#using-prettify-symbols
#+NAME: org_mark_2020-10-03T11-41-17+01-00_mini12.local_7F1CA278-5EFF-4B83-BB74-2E3F161154E8
#+begin_src emacs-lisp
(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode)
  (use-package fira-code-mode
    :ensure t
    :custom (fira-code-mode-disabled-ligatures '("[]" "x")) ; ligatures you don't want
    :hook prog-mode))
#+end_src
* Structure
:PROPERTIES:
:ID:       org_mark_2020-10-03T14-51-52+01-00_mini12.local:2E4982D0-8D77-435D-8651-A796B057CCD7
:END:
Show depending on the data
** Parentheses
:PROPERTIES:
:ID:       org_mark_2020-10-03T14-51-52+01-00_mini12.local:754AAB64-605A-4908-B996-EC39FE3B1A50
:END:
These are set by Aquamacs but might as well reinforce
#+NAME: org_mark_2020-10-03T14-51-52+01-00_mini12.local_710A037E-01EF-44EC-9777-90F0194127E9
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src
* Show icons
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:57CD663C-DDAD-43AD-AFFF-FE62F18F88D2
:END:
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_2BD033BD-CC86-4B0C-98FA-82B5EDFF67AA
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :commands (all-the-icons-faicon
             all-the-icons-fileicon
             all-the-icons-octicon
             all-the-icons-icon-for-mode)
  :preface
  (defun with-faicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-mode-icon (mode str &optional height nospace)
    (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) -0.1 0.05))
           (icon (all-the-icons-icon-for-mode mode
                                              :height (or height 1)
                                              :v-adjust v-adjust))
           (icon (if (symbolp icon)
                     (all-the-icons-icon-for-mode 'fundamental-mode
                                                  :height (or height 1)
                                                  :v-adjust v-adjust)
                   icon)))
      (s-concat icon (if nospace "" " ") str))))
#+end_src
* Remove toolbar
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:2173AD74-D123-45A9-B0B1-8B40D1840823
:END:
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_5CB800C6-67BA-443E-B65B-FA0247AA6723
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

* TODO Show line for errors etc
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:D9CBE07A-A1B7-48CB-A163-039F8E86A954
:END:

** Beacon mode
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:B70958EE-3BEB-441D-9544-871501B5EF25
:END:
Beacon-mode: flash the cursor when switching buffers or scrolling  the goal is to make it easy to find the cursor
but does not seem to work well
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_623E9D35-0844-41AB-8A86-98118716B519
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :defer t
  :custom (beacon-blink-when-focused t)
  :init (eval-when-compile
          ;; Silence missing function warnings
          (declare-function beacon-mode "beacon.el"))
  :config
  (defun maybe-recenter-current-window ()
    (when (and (equal (current-buffer) (window-buffer (selected-window)))
               (not (eq recenter-last-op 'middle)))
      (recenter-top-bottom)))
  (add-hook 'beacon-before-blink-hook #'maybe-recenter-current-window)
  (dolist (mode '(comint-mode term-mode))
    (push mode beacon-dont-blink-major-modes))
  (setq beacon-blink-duration 1)
  (beacon-mode 1))
#+end_src

** Hi line
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:442D1703-A14F-4EAD-9B24-C86D48FA84F3
:END:
Try to highlight the line but it is messed up see https://emacs.stackexchange.com/a/10463/9874
but the answer below has an interesting suggestion
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_68F04D98-3C61-4F98-9CC1-F4E152D2A007
#+begin_src emacs-lisp
(use-package hl-line
  :if window-system
  :preface
  (defun my-hl-line-range-function ()
    (cons (line-end-position) (line-beginning-position 2)))
  (setq hl-line-range-function #'my-hl-line-range-function)

  :config
  (set-face-attribute 'hl-line nil :inherit nil :background "gray")
  (setq global-hl-line-sticky-flag t)
  (global-hl-line-mode 1)
  )
#+end_src
* Windows
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:2DFC202B-3FB4-41C4-BFE6-9718ECD07F63
:END:
I think I now want mainly one window and have splits but tabs are useful.

** Move/split
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:C6F53E38-7C41-4BC5-9A6C-A0A32AA5CFFC
:END:
 Try hydra from [[https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/][reddit]] but note user is a vi user for movements so will be messed around with. But a few minutes playing does not add much so use first from [[https://github.com/abo-abo/hydra/wiki/Window-Management][Hydra wiki]] Needs winner mode for some functions to save window state.
 The hydra is now a mix of all sorts of Window frame, theme and other apperance functions

 #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_AFC382E3-9D15-496B-9A90-B0B4838ADD31
 #+begin_src emacs-lisp
(use-package winner
  :unless noninteractive
  :defer 5
  :config
  (winner-mode)
  (require 'windmove)
<<win-hydra-fns>>
<<win-hydra>>

  :commands (winner-undo winner-redo)
  :bind ("H-w"  . hydra-jp-window/body)
  )

#+end_src

*** Support functions
:PROPERTIES:
:ID:       org_mark_2020-10-11T17-50-37+01-00_mini12.local:B75BD9C4-76AD-406A-9A76-1B658CA511C5
:END:
#+name: win-hydra-fns
#+begin_src emacs-lisp :tangle no
(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))

(use-package default-text-scale
  :disabled
  :ensure t
  :hook (after-init . default-text-scale-mode)
  :commands default-text-scale-mode
  )

(use-package zoom-frm :demand)

(defun jp-zoom-default ()
  "Reset text scale."
  (interactive)
  (zoom-in/out 0))
#+end_src
*** Hydra
:PROPERTIES:
:ID:       org_mark_2020-10-11T17-50-37+01-00_mini12.local:FCCE3A72-78A7-4BEB-B392-A7A2E80638DE
:END:
#+name: win-hydra
#+begin_src emacs-lisp :tangle no
(defvar jp-window--title (with-faicon "windows" "Window Management" 1 -0.05))
(pretty-hydra-define hydra-jp-window (:foreign-keys warn :title jp-window--title :quit-key "q")
  ("Actions"
   (("TAB" other-window "switch")
    ("x" ace-delete-window "delete")
    ("m" ace-delete-other-windows "maximize")
    ("s" ace-swap-window "swap")
    ("a" ace-select-window "select"))

   "Resize"
   (("<left>" hydra-move-splitter-left "←")
    ("<down>" hydra-move-splitter-down "↓")
    ("<up>" hydra-move-splitter-up "↑")
    ("<right>" hydra-move-splitter-right "→")
    ("n" balance-windows "balance")
    )

   "Split"
   (("b" split-window-right "horizontally")
    ("|" split-window-right "horizontally")
    ("B" split-window-horizontally-instead "horizontally instead")
    ("v" split-window-below "vertically")
    ("-" split-window-below "vertically")
    ("V" split-window-vertically-instead "vertically instead")
    ("u" (progn
           (winner-undo)
           (setq this-command 'winner-undo))))

   "Other"
   ( ("0" jp-zoom-default "reset zoom")
     ("t"  quick-switch-themes* "cycle themes" )
     ("f" other-frame "Switch Frame")
     ("F" toggle-frame-fullscreen "toggle fullscreen"))))
 #+end_src

** Stop special buffers opening in new window
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:B1304247-BC2C-4292-808D-F38E6D972F3F
:END:
 It is an aquamacs setting see [[https://www.emacswiki.org/emacs/AquamacsFAQ#toc19][FAQ]]
 #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_48EF73E1-936C-4BEA-810D-AC96FDD92B40
 #+begin_src emacs-lisp
(when *aquamacs*
  (one-buffer-one-frame-mode -1)
  (setq  special-display-regexps nil))
 #+end_src



** Context help
:PROPERTIES:
:ID:       org_mark_2020-10-09T10-33-48+01-00_mini12.local:4FC3755A-A7F5-45B0-BD0D-8DCBFEC5D4CC
:END:
Emacs has a way of showing help. It seems to write to echo area thus overwriting what I want.

So lets try in popup
#+NAME: org_mark_2020-10-09T10-33-48+01-00_mini12.local_F3337078-A807-4F76-AD91-93BE3B6DF2C3
#+begin_src emacs-lisp
(tooltip-mode nil)
#+end_src
