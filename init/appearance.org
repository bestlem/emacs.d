#+TITLE Emacs configuration - appearance
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content

This covers what emacs looks like and how windows/frames/menus behave

* Colour theme
Aquamacs is stuck with old color themes not the cusomisable ones
#+begin_src emacs-lisp
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-high-contrast)))
#+end_src

* Show icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :demand
  :config

  (defun with-faicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-fileicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-octicon (icon str &optional height v-adjust)
    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))

  (defun with-mode-icon (mode str &optional height nospace)
    (let* ((v-adjust (if (eq major-mode 'emacs-lisp-mode) -0.1 0.05))
           (icon (all-the-icons-icon-for-mode mode
                                              :height (or height 1)
                                              :v-adjust v-adjust))
           (icon (if (symbolp icon)
                     (all-the-icons-icon-for-mode 'fundamental-mode
                                                  :height (or height 1)
                                                  :v-adjust v-adjust)
                   icon)))
      (s-concat icon (if nospace "" " ") str))))
#+end_src
* Remove toolbar
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

* TODO Show line for errors etc

** Beacon mode
Beacon-mode: flash the cursor when switching buffers or scrolling  the goal is to make it easy to find the cursor
but does not seem to work well
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :defer t
  :custom (beacon-blink-when-focused t)
  :init (eval-when-compile
		  ;; Silence missing function warnings
		  (declare-function beacon-mode "beacon.el"))
  :config
  (defun maybe-recenter-current-window ()
	(when (and (equal (current-buffer) (window-buffer (selected-window)))
			   (not (eq recenter-last-op 'middle)))
	  (recenter-top-bottom)))
  (add-hook 'beacon-before-blink-hook #'maybe-recenter-current-window)
  (dolist (mode '(comint-mode term-mode))
	(push mode beacon-dont-blink-major-modes))
  (setq beacon-blink-duration 1)
  (beacon-mode 1))
#+end_src

** Hi line
Try to highlight the line but it is messed up see https://emacs.stackexchange.com/a/10463/9874
but the answer below has an interesting suggestion
#+begin_src emacs-lisp

(use-package hl-line
  :if window-system
  :preface
  (defun my-hl-line-range-function ()
    (cons (line-end-position) (line-beginning-position 2)))
  (setq hl-line-range-function #'my-hl-line-range-function)

  :config
  (set-face-attribute 'hl-line nil :inherit nil :background "gray")
  (setq global-hl-line-sticky-flag t)
  (global-hl-line-mode 1)
  )
#+end_src
* Windows
I think I now want mainly one window and have splits but tabs are useful.

** Move/split
 Try hydra from [[https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/][reddit]] but note user is a vi user for movements so will be messed around with. But a few minutes playing does not add much so use forst from [[https://github.com/abo-abo/hydra/wiki/Window-Management][Hydra wiki]] Needs winner mode for some functions to save window state.
 #+begin_src emacs-lisp
 (use-package winner
   :unless noninteractive
   :defer 5
   :config
   (winner-mode)
   :commands (winner-undo winner-redo))

 (defvar jp-window--title (with-faicon "windows" "Window Management" 1 -0.05))

 (pretty-hydra-define hydra-jp-window (:foreign-keys warn :title jp-window--title :quit-key "q")
   ("Actions"
    (("TAB" other-window "switch")
     ("x" ace-delete-window "delete")
     ("m" ace-delete-other-windows "maximize")
     ("s" ace-swap-window "swap")
     ("a" ace-select-window "select"))

    "Resize"
    (("h" move-border-left "←")
     ("j" move-border-down "↓")
     ("k" move-border-up "↑")
     ("l" move-border-right "→")
     ("n" balance-windows "balance")
     ("f" toggle-frame-fullscreen "toggle fullscreen"))

    "Split"
    (("b" split-window-right "horizontally")
     ("|" split-window-right "horizontally")
     ("B" split-window-horizontally-instead "horizontally instead")
     ("v" split-window-below "vertically")
     ("V" split-window-vertically-instead "vertically instead"))

    "Zoom"
    (("+" zoom-in "in")
     ("=" zoom-in)
     ("-" zoom-out "out")
     ("0" jp-zoom-default "reset"))))
 (defhydra hydra-window ()
   ""
   ("h" windmove-left)
   ("j" windmove-down)
   ("k" windmove-up)
   ("l" windmove-right)
   ("|" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right)))
   ("-" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down)))
   ("u" (progn
          (winner-undo)
          (setq this-command 'winner-undo)))
   ("r" winner-redo)
   ("b" ivy-switch-buffer)
   ("f" counsel-find-file)
   ("a" (lambda ()
          (interactive)
          (ace-window 1)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body)))
   ("s" (lambda ()
          (interactive)
          (ace-swap-window)
          (add-hook 'ace-window-end-once-hook
                    'hydra-window/body)))
   ("<left>" hydra-move-splitter-left)
   ("<down>" hydra-move-splitter-down)
   ("<up>" hydra-move-splitter-up)
   ("<right>" hydra-move-splitter-right)
   ("M" delete-other-windows)
   ("d" delete-window)

   ;; ("K" ace-delete-other-windows)
   ;; ("S" save-buffer)
   ;; ("d" delete-window)
   ;; ("D" (lambda ()
   ;;        (interactive)
   ;;        (ace-delete-window)
   ;;        (add-hook 'ace-window-end-once-hook
   ;;                  'hydra-window/body))
   ;;  )

   ("x" counsel-M-x)
   ("q" nil))

 (bind-key "H-w" 'hydra-jp-window/body)
 #+end_src

** Stop special buffers opening in new window
 It is an aquamacs setting see [[https://www.emacswiki.org/emacs/AquamacsFAQ#toc19][FAQ]]
 #+begin_src emacs-lisp
 (one-buffer-one-frame-mode -1)
 (setq  special-display-regexps nil)
 #+end_src

