#+TITLE Emacs configuration How emacs reacts
#+PROPERTY:header-args :cache yes :tangle yes :comments link

* memory
:PROPERTIES:
:ID:       org_mark_2020-03-02T07-49-31+00-00_mini12.local:F19DE0CC-B946-4885-808E-36CB21A4AF3D
:END:

** [[https://github.com/emacsmirror/gcmh][GCMH - the Garbage Collector Magic Hack]]
:PROPERTIES:
:ID:       org_2020-12-08+00-00:9CBD1225-1938-4671-8260-E362EA08EE86
:END:
This seems to be a more consistent way so can replace other bits
The only bit to stay is after-init
Note that gcmh cannot explicitly reduce the memory it does this when it gcs, which might be wrong - it assumes you do not gc during a process
#+NAME: org_2020-12-08+00-00_C06FD610-2FD2-4E60-94B2-33A789850588
#+begin_src emacs-lisp
(use-package gcmh
    :ensure t
    :diminish
    :config
    (setq gcmh-high-cons-threshold (* 128 1024 1024)) ; reduces as I got a 10G
                                        ; monster
    (setq gcmh-low-cons-threshold (* 1024 1024)) ; originally 800000 - increas
                                        ; because of gnus
    ;; (setq gcmh-verbose 't)
    (gcmh-mode 1))
#+end_src

** Instrument emacs
:PROPERTIES:
:ID:       org_2020-12-08+00-00:C8118A2B-2B63-4B30-BDA2-3A412B508657
:END:
Make emacs message when it gcs.
#+NAME: org_2020-12-08+00-00_85933DF6-3CB1-4DBC-8EFD-F4E56D10934E
#+begin_src emacs-lisp
;; (setq garbage-collection-messages 't)
#+end_src
* Emacs internals
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:3D94393D-BCFC-4C55-844D-42D2DCF4FC95
:END:
** Undo
:PROPERTIES:
:ID:       org_2020-12-06+00-00:BB0C42D6-AA66-4E9F-8F30-E30F9DA016FB
:END:
#+NAME: org_2020-12-06+00-00_D742B5F4-E383-4802-B407-EED83363E7D4
#+begin_src emacs-lisp
(setq undo-limit 800000)
#+end_src
** Sessions
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:F59E76F4-B802-4ADA-81C2-AE06603587BD
:END:
 Save registers et al but not the whole desktop
 #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_F7D6DF89-CC2E-4307-991E-2534CFA83732
 #+begin_src emacs-lisp
(use-package savehist
    :unless *aquamacs*
    :config
    (setq savehist-additional-variables
		  '(kill-ring
		    search-ring
		    regexp-search-ring
		    last-kbd-macro
		    kmacro-ring
		    shell-command-history
            bookmark-alist
		    Info-history-list
		    register-alist))
    (setq savehist-file (locate-user-emacs-file "savehist.el"))
    (savehist-mode 1))
 #+end_src
** Registers
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:BB78D792-D0B1-443F-80B7-9633B1AD3B09
:END:
I haven't used before but might try with hydra from [[https://sriramkswamy.github.io/dotemacs/#orgheadline245][Hydra heavy init]]
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_E6AD754D-191C-4314-B178-A976FFCA0A45
#+begin_src emacs-lisp
(defhydra sk/hydra-registers (:color blue
									 :hint nil)
  "
 _a_: append     _c_: copy-to    _j_: jump       _r_: rectangle-copy   _q_: quit
 _i_: insert     _n_: number-to  _f_: frameset   _w_: window-config
 _+_: increment  _p_: point-to
  "
  ("a" append-to-register)
  ("c" copy-to-register)
  ("i" insert-register)
  ("f" frameset-to-register)
  ("j" jump-to-register)
  ("n" number-to-register)
  ("r" copy-rectangle-to-register)
  ("w" window-configuration-to-register)
  ("+" increment-register)
  ("p" point-to-register)
  ("q" nil :color blue))

(bind-key "M-r" 'sk/hydra-registers/body)


#+end_src
** Yes or no
:PROPERTIES:
:ID:       org_mark_2020-10-01T11-27-32+01-00_mini12.local:3F1F190C-6747-4CF2-939E-14386756F579
:END:
  Does anyone type =yes= anymore?
   #+NAME: org_mark_2020-10-01T11-27-32+01-00_mini12.local_B854EC7F-0938-4897-9815-3D77C26F2E4B
   #+BEGIN_SRC elisp
(unless *aquamacs*
  (fset 'yes-or-no-p 'y-or-n-p))
   #+END_SRC
* Key Chord
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:727BACF4-7E05-4203-85B7-65661B36F7B5
:END:
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_CAA5ED48-7C06-4625-A839-267E09964133
#+begin_src emacs-lisp
(use-package key-chord
  :disabled
  :ensure t
  :config (key-chord-mode 1))
#+end_src
* Delete if selected
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:1093B961-57F6-4B74-9CCD-F155EEDA2E87
:END:
Also see [[https://www.emacswiki.org/emacs/DeleteSelectionMode][EmacsWiki]] (and my old init) but cua should do this. Possibly because minor modes are toggles
Issue is lispy removes this as lispy is vi based. I am OK with override if in position but not with region selected except pairs.

Separate issue - forgotten what-  my understanding was wrong the issue is select with mouse puts things into system clipboard.
So use separate PRIMARY and CLIPBOARD - hmm That is old emacs.

Doing Racket repl copying from pdf I want mouse-2 to work so change back. Actually comint (ie REPL) behaves differently mouse-2 is M-n sort of)

  #+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_D91D1B0C-20B5-4AEF-8E53-7056B6CE706F
  #+begin_src emacs-lisp
(delete-selection-mode 1)
(setq select-enable-clipboard t)
(setq select-enable-primary nil)
  #+end_src

* Clean up whitespace
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:5CBAA3C9-A6AD-4881-BACC-D2A3099D294A
:END:
 Only do it on my edits
** Whitespace at end of line uses [[https://github.com/lewang/ws-butler][ws-butler]]
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:7F269BB3-F95F-4F6D-944B-252975923B43
:END:
#+begin_quote
Only lines touched get trimmed. If the white space at end of buffer is changed, then blank lines at the end of buffer are truncated respecting require-final-newline.
Trimming only happens when saving.
#+end_quote
#+NAME: org_2020-12-08+00-00_3CD0E180-0745-4B05-9BCE-0FB50626F9F9
#+begin_src emacs-lisp
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :hook ((prog-mode org-mode) . ws-butler-mode ))
#+end_src
** Others
:PROPERTIES:
:ID:       org_mark_2020-10-11T00-40-32+01-00_mini12.local:D368B1BE-8B1A-4ED3-B447-077ED18711A3
:END:
This is from greghendershot
#+NAME: org_mark_2020-10-11T00-40-32+01-00_mini12.local_BF7FA9EE-AC6E-46D8-863C-7E632C9D8B2A
#+begin_src emacs-lisp
;; Show trailing whitespace in certain modes.
(setq-default show-trailing-whitespace nil)
;; Although it may seem silly to define these as named functions, nicer to
;; view/debug hook variables:
(defun gh/show-trailing-whitespace-yes () (setq show-trailing-whitespace t))
(defun gh/show-trailing-whitespace-no ()  (setq show-trailing-whitespace nil))
(dolist (hook '(prog-mode-hook))
  (add-hook hook #'gh/show-trailing-whitespace-yes))
(dolist (hook '(magit-mode-hook))
  (add-hook hook #'gh/show-trailing-whitespace-no 'append))

(add-to-list 'safe-local-variable-values
             '(require-final-newline . t))

;; Show empty lines at buffer end.
(set-default 'indicate-empty-lines t)
#+end_src
* Double Letters
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:8023761D-AF45-4069-8EBB-AF88FA9F8CF1
:END:
Let's stop it. from [[https://emacs.stackexchange.com/a/13975/9874][Emacs SE]]
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_FD406B40-617C-43FD-872C-D71407BFE82C
#+begin_src emacs-lisp
(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
	   (save-excursion
		 (and (if (called-interactively-p)
				  (skip-syntax-backward "w")
				(= -3 (skip-syntax-backward "w")))
			  (let (case-fold-search)
				(looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
			  (capitalize-word 1)))))

(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type. "
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
	  (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
	(remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))

(add-hook 'text-mode-hook #'dubcaps-mode)

#+end_src
** Misspelling correction
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:5AA8C57E-7AEA-4F16-AD52-84CE2450344B
:END:
See http://endlessparentheses.com/ispell-and-abbrev-the-perfect-auto-correct.html but I need to deal with Aquamacs spelling as well
#+NAME: org_mark_2020-09-29T11-53-58+01-00_mini12.local_C107F37F-7EE4-4A6E-B97C-C3CEB3BA7A7C
#+begin_src emacs-lisp
(unless *aquamacs*
  (mwb-init-load "init/behaviour_spell_noaqua"))
#+end_src
* Comments
:PROPERTIES:
:ID:       org_mark_2020-10-11T00-40-32+01-00_mini12.local:C282C8DC-D435-4A82-9997-64BE982AB24E
:END:
Aquamacs does its own binding to comment and uncomment region.
#+NAME: org_mark_2020-10-11T00-40-32+01-00_mini12.local_E984CC0C-A028-4666-9ED5-F24B9BDFC6A8
#+begin_src emacs-lisp
(use-package comment-dwim-2
  :unless *aquamacs*
  :ensure t
  :commands comment-dwim-2 ;; need as mac binding
  )
#+end_src
* Navigation
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:BE5A6CDF-F170-4698-B347-4B501EE71EB5
:END:
** Expand region
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:CF24C2F4-0089-45C0-A3CE-72AAFBE47D97
:END:
The hydra did not add anything. Just keep hitting f2
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_95AB0DCA-FC55-45BB-A888-847322BD6CA0
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region)
  ("<f2>" . er/expand-region)
  ("<S-f2>" . er/contract-region)
  ("<C-f2>" . er/contract-region)
  :custom (expand-region-show-usage-message nil))
#+end_src
** Begin end line
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:79C47FC8-B71F-40B4-84F3-DB78319B9E33
:END:
There are several ways to make begin go to first non whitespace  then to begin line, some will then make next press go to defun or buffer.
Note home and end are in Aquamacs osx-mode-map makes life more complex (actually not as mosey overrides it unless you deactivate and reactivate it). Perhaps I will have to unset them to allow modes to do their things These include crux, [[https://github.com/alezost/mwim.el][mwin]] and ergoemacs,  [[https://github.com/alphapapa/mosey.el][mosey]] + snippets on web.
Note that lispy also does this but not back a form.
mwin seems the current winner
*** Mosey
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:7A6F1A54-B69B-4674-8B4B-1B404D40B67D
:END:
Try mosey as it has the back function - NB can use smartparens, unfortunately does not seem to work with shift and as others do try another.
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_D167236A-A698-4694-A38A-C0A02B3D0153
#+begin_src emacs-lisp
(use-package mosey
  :disabled
  :ensure t
  :bind (
         ;; My personal favorites
         ("<home>" . mosey-backward-bounce)
         ("<end>" . mosey-forward-bounce)
         ))
#+end_src
*** mwin
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:73B44400-98DA-4212-B923-8DC1AF3E360A
:END:
mwin might have mode aware
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_DBEC557B-9FAB-458C-AACF-C315E3DCB0FB
#+begin_src emacs-lisp
(use-package mwim
  :ensure t
  :demand                               ; Need to get binds to work
  :commands (mwim-beginning mwim-end)
  :config
  (bind-key mwbkey-home 'mwim-beginning)
  (bind-key mwbkey-end 'mwim-end))
#+end_src
* TODO General old stuff
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:1AC892B6-3D59-4A47-83D2-74D291436A0B
:END:
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_FA715CDB-338C-473F-8511-91E6966446EB
#+begin_src emacs-lisp
(setq find-file-visit-truename t)	; visit a file under its true name

(setq find-file-existing-other-name t)

(defun dos-to-unix ()
  "Replace \r\n with \n"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    ( replace-string "\r\n" "\n" )))


(setq kill-whole-line t)

; --- highlight words during query replacement ---
;
(setq query-replace-highlight t)
; --- incremental search highlights the current match ---
;
(setq search-highlight t)

;
; --- vertical motion starting at end of line keeps to ends of lines ---
;
(setq track-eol t)
(setq truncate-lines t)
#+end_src
** Rest
:PROPERTIES:
:ID:       org_2020-12-05+00-00:D912E5B5-F6B5-4BBF-9FCF-A8F276FA3A38
:END:
#+NAME: org_2020-12-05+00-00_2605732D-5417-4FDC-8DAA-A9A7C2A83CB4
#+begin_src emacs-lisp
;; from http://ergoemacs.org/emacs/emacs_make_modern.html but some are in aquamacs
;; and https://github.com/anschwa/emacs.d

;; UTF-8 as default encoding
;; UTF-8 please
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)



;;  Sentences do not end with two spaces
(setq sentence-end-double-space nil)


;; General emacs behaviour
;;  From https://sriramkswamy.github.io/dotemacs/

#+end_src

* Buffers
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:2C7F2E45-19AE-43EC-8536-C7A69744CCC2
:END:
** Protect library and other files
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:04EFE611-1F9B-479D-A3BB-0C428F8EBA20
:END:
[[https://github.com/rolandwalker/hardhat][Hardhat]] provides an extra layer of protection in your work. If you visit a file which looks unsafe to edit, Emacs will make the buffer read-only -- even when the underlying file is writable.
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_5C4ABBCE-2400-4CD9-8740-96E9FD163C43
#+begin_src emacs-lisp
(use-package hardhat                    ; Protect user-writable files
  :ensure t
  :init (setq hardhat-basename-protected-regexps
              '("~\\'"
                "\\.lock\\'"
                "\\.ix\\'"
                "\\`test\\.out\\'"
                "-autoloads\\.el\\'"
                "\\`Desktop\\.ini\\'"
                "\\`META\\.yml\\'"
                "\\`MYMETA\\.yml\\'"
                "\\`TAGS\\'"
                "\\`Thumbs\\.db\\'"
                "\\`\\.dropbox\\'"
                "\\`\\.dropbox\\.cache\\'"
                "\\`\\.emacs\\.desktop\\'"
                "\\`\\.emacs\\.desktop\\.lock\\'"
                "\\.orig\\'"
                "\\.rej\\'"
                "\\.el\\.gz$"))
  (setq hardhat-fullpath-protected-regexps
        '("~/\\.emacs\\.d/elpa/"
          "~/\\.cpan/"
          "~/\\.cabal/"
          "~/perl5/perlbrew/"
          "~/\\.npm/"
          "~/\\.virtualenv/"
          "~/\\.virthualenv/"
          "~/\\.rvm/"
          "/[._]build/"
          "/\\.bzr/"
          "/\\.coverage/"
          "/\\.git/"
          "/\\.hg/"
          "/\\.rspec/"
          "/\\.sass-cache/"
          "/\\.svn/"
          "/_MTN/"
          "/_darcs/" "/CVS/"
          "/pm_to_blib/"
          "/RCS/"
          "/SCCS/"
          "/blib/"
          "/test_output/"
          "~/\\.emacs\\.d/\\.cask/"
          "~/\\.cask/"
          "/Applications/"
          "~/Library/Preferences/Aquamacs Emacs/Packages"
          "~/src/ThirdParty/"
          "emacs\\.d/elpa/"))
  (global-hardhat-mode)
  :config (validate-setq hardhat-mode-lighter "Ⓗ"))
#+end_src
** Buffer switch
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:4551A020-6DAB-4E1D-A70F-60DF7729834F
:END:
Switch to last buffer on one key. From https://emacsredux.com/blog/2013/04/28/switch-to-previous-buffer/
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_BB244CD3-591D-499E-8A36-3DA1E4696166
#+begin_src emacs-lisp
(defun er-switch-to-previous-buffer ()
  "Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src
** Buffer removal
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:99F964B4-DBAA-4EBE-9B09-0D7840CAA7CC
:END:
*** KIll buffer
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:0194DAD8-98E5-42AA-82A6-7C4D741A5F91
:END:
Normally when you are in a buffer you do ^x-^k to kill the current buffer but emacs asks you for the name. [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs]] suggests this.
By default C-x k runs the command kill-buffer which prompts you for which buffer you want to kill, defaulting to the current active buffer. I don’t know about you, but I rarely want to kill a different buffer than the one I am looking at, so I rebind C-x k to kill-this-buffer which just kills the current buffer without prompting (unless there are unsaved changes).
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_6A3049D3-0E8A-43B3-83DF-07B123D61C04
#+begin_src emacs-lisp
(defun bjm/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src
*** Deal with subprocesses
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:EE6B876F-8EE3-40C1-BBD1-0BEA1BBDDD58
:END:
If a buffer has a subprocess running (e.g. shell, racket-run then emacs will prompt to ask if you want to kill it. I think you always do. So from https://emacs.stackexchange.com/a/14511/9874
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_4D892993-8FA6-4917-A0AD-D75C5B69035E
#+begin_src emacs-lisp
(setq kill-buffer-query-functions
      (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
** Revert buffer
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-40-42+00-00_mini12:10B9D32A-E48F-4CA7-8D0B-397EC17233D6
:END:
I don't want to confirm https://emacs.stackexchange.com/a/10349/9874 The key bind is from NeXT days so 25 years of muscle memory.
#+NAME: org_mark_2020-01-23T20-40-42+00-00_mini12_049AD418-4D1B-4088-B9EE-85A110A9E554
#+begin_src emacs-lisp
(defun revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive) (revert-buffer t t))
#+end_src
* Minibuffer
:PROPERTIES:
:ID:       org_mark_2020-03-06T13-08-35+00-00_mini12.local:3D34B982-AF06-4809-ACCC-E206FFCAC10A
:END:
** Faces
:PROPERTIES:
:ID:       org_2020-12-06+00-00:1F4101B0-7C06-4F8F-857A-A8B25A034CF2
:END:
#+NAME: org_2020-12-06+00-00_55BEC998-6943-4AEF-8ED3-4ED6611B0625
#+begin_src emacs-lisp
(setq minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt cursor-intangible t))
#+end_src
** Kill it
:PROPERTIES:
:ID:       org_2020-12-06+00-00:DDCA46D9-A278-4657-A77D-2A95B5BCF660
:END:
Kill it from anywhere from blog with-Emacs but take version from [[https://www.reddit.com/r/emacs/comments/ffbser/withemacs_quit_current_context/][Reddit]]
#+NAME: org_mark_2020-03-06T13-08-35+00-00_mini12.local_983EF586-334E-442B-B675-D73D0165A612
#+begin_src emacs-lisp
(defun keyboard-quit-context+ ()
  "Quit current context.

    This function is a combination of `keyboard-quit' and
    `keyboard-escape-quit' with some parts omitted and some custom
    behavior added."
  (interactive)
  (cond ((region-active-p)
         ;; Avoid adding the region to the window selection.
         (setq saved-region-selection nil)
         (let (select-active-regions)
           (deactivate-mark)))
        ((eq last-command 'mode-exited) nil)
        (current-prefix-arg
         nil)
        (defining-kbd-macro
          (message
           (substitute-command-keys
            "Quit is ignored during macro defintion, use \\[kmacro-end-macro] if you want to stop macro definition"))
          (cancel-kbd-macro-events))
        ((active-minibuffer-window)
         (when (get-buffer-window "*Completions*")
           ;; hide completions first so point stays in active window when
           ;; outside the minibuffer
           (minibuffer-hide-completions))
         (abort-recursive-edit))
        (t
         (keyboard-quit))))

(bind-key "H-q" 'keyboard-quit-context+)
#+end_src
* Extra functions
:PROPERTIES:
:ID:       org_2020-12-03+00-00:AB87CBD3-5CFD-4403-ADEA-6FB14B104FF7
:END:
** Frames
:PROPERTIES:
:ID:       org_2020-12-03+00-00:1B23DC2B-5C55-4813-92A9-04D1291698B2
:END:
Make a new popup frame
#+NAME: org_2020-12-03+00-00_76F8853D-BB00-4F70-9F82-0AC74BA7B9A5
#+begin_src emacs-lisp
(defun mwb-new-frame (buffer_name &optional go-to-end)
  (interactive)
  (select-frame (make-frame))
  (switch-to-buffer buffer_name)
  (unless go-to-end (goto-char (point-max))))
#+end_src
* Sounds
:PROPERTIES:
:ID:       org_mark_mini20.local:20210628T102012.945985
:END:
Stop emacs beeping so much
From [[ https://www.reddit.com/r/emacs/comments/1a6z4n/can_i_make_emacs_beep_less/c8v5][reddit]]
Reduce the number of times the bell rings. Turn off the bell for the listed functions.
#+NAME: org_mark_mini20.local_20210628T102012.908898
#+begin_src emacs-lisp
(setq ring-bell-function
      (lambda ()
        (unless (memq this-command
                      '(isearch-abort
                        abort-recursive-edit
                        exit-minibuffer
                        keyboard-quit
                        previous-line
                        next-line
                        scroll-down
                        scroll-up
                        cua-scroll-down
                        cua-scroll-up))
          (ding))))
#+end_src
