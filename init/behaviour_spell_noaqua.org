#+TITLE Emacs configuration Spell if not in Aquamacs
#+PROPERTY:header-args :cache yes :tangle yes :comments link

This is mainly taken from [[https://github.com/howardabrams/dot-files][Howard Abrams]]


* Spell Checking
:PROPERTIES:
:ID:       org_mark_2020-09-29T11-53-58+01-00_mini12.local:A30A8887-7787-4301-BB7D-6ECB558906B7
:END:

   Spell checking with [[http://www.emacswiki.org/emacs/FlySpell][FlySpell]], which uses the built-in settings of
   [[https://www.gnu.org/software/ispell/][ispell]].   The [[http://aspell.net][ASpell]] project is better supported than ISpell, and
   it seems to be better than Hunspell for programming modes.



   Start for all text modes (but not for log files):

   #+NAME: org_mark_2020-09-29T11-53-58+01-00_mini12.local_495114A0-DDED-47C8-95EB-92DD64E002A0
   #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t
  :diminish flyspell-mode
  :init
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  (dolist (hook '(text-mode-hook org-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))

  (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

  :preface
  (setq ispell-program-name "/opt/local/bin/aspell"
        ispell-dictionary "british-ize"
        ispell-extra-args '("--sug-mode=normal")))
   #+END_SRC

   ASpell automatically configures a personal dictionary
   at =~/.aspell.en.pws=, so no need to configure that.

   A possibly nifty feature of aspell is the ability to spellcheck
   individual words in CamelCase that is used extensively in some
   code (for details, see [[http://blog.binchen.org/posts/what-s-the-best-spell-check-set-up-in-emacs.html][this article]]).

   #+NAME: org_mark_2020-09-29T11-53-58+01-00_mini12.local_357FFC4C-00B4-4492-9C55-C4316FFDB897
   #+BEGIN_SRC elisp
(use-package flyspell
  :config
  (defun flyspell-detect-ispell-args (&optional run-together)
    "if RUN-TOGETHER is true, spell check the CamelCase words."
    (let (args)
      (setq args (list "--sug-mode=ultra" "--lang=en_GB"))
      (if run-together
          (setq args (append args '("--run-together" "--run-together-limit=5" "--run-together-min=2"))))
      args))

  ;; ispell-cmd-args is useless, it's the list of *extra* arguments we will append to the ispell process when "ispell-word" is called.
  ;; ispell-extra-args is the command arguments which will *always* be used when start ispell process
  (setq-default ispell-extra-args (flyspell-detect-ispell-args t))

  (defadvice ispell-word (around my-ispell-word activate)
    (let ((old-ispell-extra-args ispell-extra-args))
      (ispell-kill-ispell t)
      (setq ispell-extra-args (flyspell-detect-ispell-args))
      ad-do-it
      (setq ispell-extra-args old-ispell-extra-args)
      (ispell-kill-ispell t)))

  (defadvice flyspell-auto-correct-word (around my-flyspell-auto-correct-word activate)
    (let ((old-ispell-extra-args ispell-extra-args))
      (ispell-kill-ispell t)
      ;; use emacs original arguments
      (setq ispell-extra-args (flyspell-detect-ispell-args))
      ad-do-it
      ;; restore our own ispell arguments
      (setq ispell-extra-args old-ispell-extra-args)
      (ispell-kill-ispell t)))

  (defun text-mode-hook-setup ()
    ;; Turn off RUN-TOGETHER option when spell check text-mode
    (setq-local ispell-extra-args (flyspell-detect-ispell-args)))

  (add-hook 'text-mode-hook 'text-mode-hook-setup))
   #+END_SRC

   According to [[http://pragmaticemacs.com/emacs/jump-back-to-previous-typo/][this essay]], we can make a =flyspell-goto-previous-error=
   (which really should be added to the official =flyspell= project):

   #+NAME: org_mark_2020-09-29T11-53-58+01-00_mini12.local_8F0BFF03-8B14-42F6-B173-747446B03345
   #+BEGIN_SRC elisp :tangle no
     (defun flyspell-goto-previous-error (arg)
       "Go to ARG previous spelling error."
       (interactive "p")
       (while (not (= 0 arg))
         (let ((pos (point))
               (min (point-min)))
           (when (and (eq (current-buffer) flyspell-old-buffer-error)
                      (eq pos flyspell-old-pos-error))
             (if (= flyspell-old-pos-error min)
                 ;; goto beginning of buffer
                 (progn
                   (message "Restarting from end of buffer")
                   (goto-char (point-max)))
               (backward-word 1))
             (setq pos (point)))

           ;; seek the next error
           (while (and (> pos min)
                       (let ((ovs (overlays-at pos))
                             (r '()))
                         (while (and (not r) (consp ovs))
                           (if (flyspell-overlay-p (car ovs))
                               (setq r t)
                             (setq ovs (cdr ovs))))
                         (not r)))
             (backward-word 1)
             (setq pos (point)))
           ;; save the current location for next invocation
           (setq arg (1- arg))
           (setq flyspell-old-pos-error pos)
           (setq flyspell-old-buffer-error (current-buffer))
           (goto-char pos)
           (if (= pos min)
               (progn
                 (message "No more miss-spelled words!")
                 (setq arg 0))))))
   #+END_SRC
