#+TITLE Emacs configuration How emacs completes text
#+PROPERTY:header-args :cache yes :tangle yes :comments link

This is completion for text in buffer
* Semantic based
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:98A7F8D2-8847-4551-B366-4440CD34703C
:END:
This looks at the current code and prompts for variables etc
I need something and company seems to be the current one.
Understanding the order is a bit confusing and this [[https://emacs.stackexchange.com/a/15251/9874][Stackexchnage]] answer helps. Basically test one at a time. 9it really helps to read especially at the end.
After use in racket I am not sure with helps in code
Add some from jweigley
** Company
:PROPERTIES:
:ID:       org_mark_2020-10-05T18-36-08+01-00_mini12.local:B1FF068E-6489-4EB1-8990-DA1D3E6262D2
:END:
Much is taken for jojojames - the first attempted failed for racket as it did not combine the results; So that was coded differently.
Later saw question on stacke exchnage and got a response that lead back to
 #+NAME: org_mark_mini20.local_20220105T111136.887789
 #+begin_src emacs-lisp
(use-package-elpa company
  :defer 5
  :diminish
  :commands (company-mode company-indent-or-complete-common company-complete)

  :bind (("TAB" . #'company-indent-or-complete-common)
		 :map company-active-map
		 ("`" . company-abort)
		 ;; From jojojames
		 ("RET" . j-company-expand-yasnippet-or-return)
		 ("TAB" . company-select-next-if-tooltip-visible-or-complete-selection)
		 ("S-TAB" . company-select-previous)
		 ("DEL" . company-cancel-or-backspace)
		 ("<backspace>" . company-cancel-or-backspace)
		 )

  :init
  (require 'j-company)
  ;; Set the backends - I don't like files and a few oters are unlikely
  (setq company-backends
		'(company-semantic company-cmake
		  company-capf
		  ;; company-clang
		  company-files
		  (company-dabbrev-code company-gtags company-etags company-keywords)
		  ;; company-oddmuse
		  company-dabbrev))

  :config
  (setq company-dabbrev-downcase nil
		company-dabbrev-ignore-case t
		company-dabbrev-ignore-case 'keep-prefix
		;; Dabbrev all code buffers together.
		company-dabbrev-code-other-buffers t
		;; Only search same major mode buffers.
		company-dabbrev-other-buffers t
		;; Don't take too much time searching for matches.
		company-dabbrev-code-time-limit 0.0005
		company-dabbrev-time-limit 0.0005
		company-dabbrev-char-regexp "\\sw\\|\\s_")


  (setq company-show-numbers t)
  (setq company-lighter-base "/"
		company-tooltip-align-annotations t
		company-echo-delay 1
		company-selection-wrap-around t
		company-idle-delay 0.05
		company-tooltip-minimum-width 30
		company-minimum-prefix-length 2)

  (push #'company-sort-by-backend-importance company-transformers)
  (push #'company-sort-prefer-same-case-prefix company-transformers)
  (push #'j-company-remove-dabbrev-dups-keep-order company-transformers)

  (j-company-merge-backends)
  (j-company-tng-configure-default)
  (global-company-mode t)	 ; don't put in after-init hook
										; as we are deferred
  ;; (define-key company-mode-map [tab]
  ;;   '(menu-item "maybe-company-expand" nil
  ;;               :filter (lambda (&optional _)
  ;;                         (when (check-expansion)
  ;;                           #'company-complete-common))))

  (when (>= emacs-major-version 27)
	(use-package company-posframe
	  :ensure t
	  :after posframe
	  :diminish
	  :config (company-posframe-mode 1)))
  (use-package company-prescient
	:ensure t
	:diminish
	:after prescient
	:config (company-prescient-mode 1))
  )
#+end_src
** Help
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T123210.332921
:END:
Add company help
#+NAME: org_mark_mini20.local_20210601T123210.313241
#+begin_src emacs-lisp
(use-package-elpa company-quickhelp
  :commands (company-quickhelp-mode)
  :hook (company-mode . company-quickhelp-mode)
  :init
  (setq company-quickhelp-use-propertized-text t)
  (setq company-quickhelp-delay 1)
  )
#+end_src
* Text expansion
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:15548A48-9E39-4C39-9010-C4B94096DA80
:END:
Looking at all the new stuff I see yasnippet but but emacs has had for many yera several things - see [[https://www.gnu.org/software/emacs/manual/html_mono/autotype.html][Emacs manual for autotyping]]. Also look at tempo and auto-insert(the latter is what new files will have inserted but that does the GNU emacs whole thing I suspect yasnippet is better)
My current view is yasnippet for the templating (old include skeleton)
** Yasnippet
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:876C8965-C38A-42AE-956A-3994F872E82D
:END:
I suspect that emacs's inbuilt skeleton can do what I need but there are more examples using yasnippet + Emacs doc is as usual impenetrable until you know how it works.

#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_CA0CCF5A-02BB-401E-8186-F16136047A8F
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :demand
  :after company
  :mode ((rx (or "/.emacs.d/data/snippets/"
                 (seq ".yasnippet" eol ))) . snippet-mode)
  :bind (:map snippet-mode-map
              ("<f5>" . yas-load-snippet-buffer)
              ("C-<f5>" . yas-load-snippet-buffer-and-close)
              ;; :map yas-minor-mode-map
              ;; ("<SPC>" . yas-maybe-expand)
              )
  ;; :bind (:map yas-minor-mode-map
  ;; ("SPC" . mwb-yas-expand)

  :preface
  (setq yas-alias-to-yas/prefix-p nil)  ; force it
  ;; (defun mwb-yas-expand ()
  ;;   (eval yas-maybe-expand))
  :config
  (setq yas-snippet-dirs (list (mwb-user-emacs-file "data/snippets")))
  ;; Use define key as :bind needs a function but don't use as don't auto expand
  ;;(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)

  ;; (use-package yasnippet-snippets
  ;;   :config (yasnippet-snippets-initialize)
  ;;   (message "loaded yasnippets collection")
  ;;   :ensure t)
  (yas-reload-all)
  (yas-global-mode 1)

  ;; Add to company
  (j-company-merge-backends)
  ;; When yasnippet gets an empty prefix, (can happen in a grouped backend)
  ;; don't trigger it if the prefix comes back with an empty string.
  (advice-add 'company-yasnippet :around #'j-company-yasnippet)

  (defun j-company-yasnippet (orig-fun &rest args)
    "`company-mode' backend for `yasnippet'."
    (interactive (list 'interactive))
    (cl-case (nth 0 args)
      (prefix
       (and (bound-and-true-p yas-minor-mode)
            (let ((company-symbol (company-grab-symbol)))
              (if (string-equal company-symbol "")
                  nil
                company-symbol))))
      (t
       (apply orig-fun args))))

  :mode-hydra (snippet-mode
			   (:idle 0.5)
			   ("Mode"
				(("g" yas/global-mode "Global")
				 ("m" yas/minor-mode "Minor")
				 ("e" yas-activate-extra-mode "Extra"))
			    "Load/Visit"
			    (("d" yas-load-directory "Directory")
				 ("f" yas-visit-snippet-file "File")
				 ("l" yas-describe-tables "List")
				 ("a" yas-reload-all "All"))
			    "Actions"
			    (("i" yas-insert-snippet "insert")
				 ("t" yas-tryout-snippet "Tryout")
				 ("n" yas-new-snippet "New"))))
  )
#+end_src

*** yasnippet collection
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D282CEC9-EFE4-4001-9301-396925A134E0
:END:
There is a package including a lot of snippets.
However there are so many elisp ones that it might be too confusing. Similarly the expansion for org mode is not nice
For loading as yasnippet is on defer we get this and yasnippets' config on eval-after load/ So what order do they load in? I suspect LIFO as yasnippet is delayed. So to get load put the use-package in the config.

But the expansions are too much so better to copy them as needed and if understood.

** Abbrev
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:4B573BD4-4E53-431B-AE36-3924CE30D9CC
:END:
Simple text replacement. From John Wiegley
Also run the script from https://www.emacswiki.org/emacs/autocorrection_abbrev_defs to load a fix for typos but note I had to edit out the one for i as that will be lowercase in programming.
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_9B504DE4-BB8F-491A-83E8-60EC58B1D93C
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :diminish
  :hook
  ((text-mode prog-mode erc-mode LaTeX-mode) . abbrev-mode)
  (expand-load
   . (lambda ()
       (add-hook 'expand-expand-hook 'indent-according-to-mode)
       (add-hook 'expand-jump-hook 'indent-according-to-mode)))
  :config
  (setq abbrev-file-name (mwb-user-emacs-file "data/abbrev.el"))
  (setq save-abbrevs 'silently)
  ;; save abbreviations upon exiting xemacs (someon has copied from an old .emacs
  (setq save-abbrevs t)
  (quietly-read-abbrev-file)
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+END_SRC
** Hippie expand
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7B9126AB-1E4A-4EBB-ACD2-1D01E8F01BC1
:END:
This is another basic emacs thing.
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8B3666B4-3C4A-4546-9A17-9CAB5BC65623
 #+BEGIN_SRC emacs-lisp
 (use-package hippie-exp
   :bind (("M-/"   . hippie-expand)
          ("C-M-/" . dabbrev-completion)))
 #+END_SRC
** Company math
:PROPERTIES:
:ID:       org_mark_mini12.local:20210102T223321.240481
:END:
For Unicode
#+NAME: org_mark_mini12.local_20210102T223321.222299
#+begin_src emacs-lisp
(use-package-elpa company-math
  :demand
  ;; :init
  ;; (setq company-math-symbol-prefix "//")
  :after (company))
#+end_src
