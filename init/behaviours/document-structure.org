#+TITLE:  Add Structure to text
#+AUTHOR: Mark Bestley
#+DATE:   09 Jun 2022
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: show2levels

This contains all the helpers so see and manipulate the structure of the document understanding its syntax.
* Code
:PROPERTIES:
:ID:       org_mark_mini20.local:20220609T101507.128906
:END:
** Parentheses
:PROPERTIES:
:ID:       org_mark_2020-10-11T00-40-32+01-00_mini12.local:27461EE9-1768-4943-B3AE-65E50E8F41C7
:END:
*** Basic emacs
:PROPERTIES:
:ID:       org_mark_mini20.local:20220612T163046.021474
:END:
These are set by Aquamacs but might as well reinforce.
#+NAME: org_mark_mini20.local_20220612T163046.004811
#+begin_src emacs-lisp
(show-paren-mode t)
#+end_src
*** Make parentheses pretty
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:9CBA29B7-2EB3-42F5-80C7-C3F7507D141B
:END:
Although that should be in prog mode
#+NAME: org_mark_mini20.local_20210829T122201.450355
#+begin_src emacs-lisp
(use-package-elpa rainbow-delimiters
  :commands rainbow-delimiters-mode
  :delight rainbow-delimiters-mode)
#+end_src
*** Colour code by level
:PROPERTIES:
:ID:       org_mark_mini20.local:20220612T130916.315429
:END:
Use prism which is sort of descended from rainbow-mode.
See https://github.com/alphapapa/prism.el/issues/8 to add
#+NAME: org_mark_mini20.local_20220612T124244.221077
#+begin_src emacs-lisp :tangle no
(use-package-elpa prism
  :commands prism-mode prism-whitespace-mode
  :config
  (setq prism-comments nil)             ; non-nil distorts colours
  (setq prism-num-faces 16)

  (cond ((eq prism-num-faces 8)  (prism-set-colors
								   :desaturations '(0) ; may lower the contrast ratio
								   :lightens '(0)	   ; same
								   :colors (modus-themes-with-colors
											 `(,fg-special-cold
											   ,magenta
											   ,magenta-alt-other
											   ,cyan-alt-other
											   ,fg-main
											   ,blue-alt
											   ,red-alt-other
											   ,cyan))))
		((eq prism-num-faces 16) (prism-set-colors
								   :desaturations '(0) ; do not change---may lower the contrast ratio
								   :lightens '(0)      ; same
								   :colors (modus-themes-with-colors
											 (list magenta
												   fg-main
												   cyan-alt-other
												   magenta-alt-other
												   blue
												   magenta-alt
												   cyan-alt
												   red-alt-other
												   green
												   fg-main
												   cyan
												   yellow
												   blue-alt
												   red-alt
												   green-alt-other
												   fg-special-warm)))
		 )
		(t 'nil))


  ;; for 8 colours
  )
#+end_src
*** Setup the format
:PROPERTIES:
:ID:       org_mark_mini20.local:20220612T185341.377015
:END:
Add to prog-mode hook but choose how to show the parentheses etc.
#+NAME: org_mark_mini20.local_20220612T185341.364315
#+begin_src emacs-lisp
(use-feature prog-mode
  :config
  (defun mwb-prog-mode-colour-hook-fn ()
	"Create my hook for prog-mode.
Need to control order of colours and some other are for lisp only.
This breaks encapsultion."
	(cond ((or (apply #'derived-mode-p mwb-lisp-modes)
			   (apply #'derived-mode-p mwb-braces-modes))
		   (prism-mode 1))
		  ((derived-mode-p 'python-mode
						   'fish-mode
						   'sh-mode)
		   (prism-whitespace-mode 1))
		  (t (rainbow-delimiters-mode 1))))
  (add-hook  'prog-mode-hook  #'mwb-prog-mode-colour-hook-fn))
#+end_src
** Manipulate
:PROPERTIES:
:ID:       org_mark_mini20.local:20220609T101507.117993
:END:
Deal with code knowing its structure - also see lisp for lispy.
** Smartparens
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:838D12E0-E4AA-4DD0-8F6E-56CDA89B5F0E
:END:
I have lispy working in racket
Also its global mode messes up org-mode so disable - but it is somewhere in python
Hydra from From https://gist.githubusercontent.com/ptrv/7e27e0e18ae37d3f80aff7b9da749321/raw/0685c9b9b35b75886eb372b03f9fde601094d089/smartparens-hydra.el
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_A84231FF-A68D-44B0-9010-3CD91C8B2DA4
#+begin_src emacs-lisp
(use-package-elpa smartparens
  :commands sp-with-modes
  sp-local-pair
  smartparens-mode
  turn-off-smartparens-mode
  :diminish smartparens-mode
  :bind (:map smartparens-mode-map
		 ("M-(" . sp-wrap-round)
		 ("M-[" . sp-wrap-square)
		 ("M-{" . sp-wrap-curly)
		 ("H-M-<backspace>" . sp-unwrap-sexp) ;; in macporst this is
		 ;; what the M-delete maps to
		 ("M-<backspace>" . sp-backward-unwrap-sexp)
		 ;; from jp-smartparens
		 ("M-<right>" . sp-forward-slurp-sexp)
		 ("M-<left>" . sp-forward-barf-sexp)
		 ("M-S-<right>" . sp-backward-slurp-sexp)
		 ("M-S-<left>" . sp-backward-slurp-sexp)
		 ("M-<up>" . sp-raise-sexp)
		 ("C-k" . sp-kill-hybrid-sexp)
		 ("C-M-f" . sp-forward-sexp)
		 ("C-M-b" . sp-backward-sexp))
  :config
  (setq sp-show-pair-from-inside nil)
  (require 'smartparens-config)
  (sp-local-pair '(xml-mode nxml-mode php-mode) "<!--" "-->"
                 :post-handlers '(("| " "SPC")))
  ;; (smartparens-global-mode)
  :hydra (ptrv/smartparens
		  (:hint nil)
		  "
Sexps (quit with _q_)
^Nav^            ^Barf/Slurp^                 ^Depth^
^---^------------^----------^-----------------^-----^-----------------
_f_: forward     _→_:          slurp forward   _R_: splice
_b_: backward    _←_:          barf forward    _r_: raise
_u_: backward ↑  _C-<right>_:  slurp backward  _↑_: raise backward
_d_: forward ↓   _C-<left>_:   barf backward   _↓_: raise forward
_p_: backward ↓
_n_: forward ↑
^Kill^           ^Misc^                       ^Wrap^
^----^-----------^----^-----------------------^----^------------------
_w_: copy        _j_: join                    _(_: wrap with ( )
_k_: kill        _s_: split                   _{_: wrap with { }
^^               _t_: transpose               _'_: wrap with ' '
^^               _c_: convolute               _\"_: wrap with \" \"
^^               _i_: indent defun"
		  ("q" nil)
		  ;; Wrapping
		  ("(" (lambda (_) (interactive "P") (sp-wrap-with-pair "(")))
		  ("{" (lambda (_) (interactive "P") (sp-wrap-with-pair "{")))
		  ("[" (lambda (_) (interactive "P") (sp-wrap-with-pair "[")))
		  ("'" (lambda (_) (interactive "P") (sp-wrap-with-pair "'")))
		  ("\"" (lambda (_) (interactive "P") (sp-wrap-with-pair "\"")))
		  ;; Navigation
		  ("f" sp-forward-sexp)
		  ("b" sp-backward-sexp)
		  ("u" sp-backward-up-sexp)
		  ("d" sp-down-sexp)
		  ("p" sp-backward-down-sexp)
		  ("n" sp-up-sexp)
		  ;; Kill/copy
		  ("w" sp-copy-sexp)
		  ("k" sp-kill-sexp)
		  ;; Misc
		  ("t" sp-transpose-sexp)
		  ("j" sp-join-sexp)
		  ("s" sp-split-sexp)
		  ("c" sp-convolute-sexp)
		  ("i" sp-indent-defun)
		  ;; Depth changing
		  ("R" sp-splice-sexp)
		  ("r" sp-splice-sexp-killing-around)
		  ("<up>" sp-splice-sexp-killing-backward)
		  ("<down>" sp-splice-sexp-killing-forward)
		  ;; Barfing/slurping
		  ("<right>" sp-forward-slurp-sexp)
		  ("<left>" sp-forward-barf-sexp)
		  ("C-<left>" sp-backward-barf-sexp)
		  ("C-<right>" sp-backward-slurp-sexp)))

(bind-key "H-["  'ptrv/smartparens/body)
#+end_src
** Comments
:PROPERTIES:
:ID:       org_mark_2020-10-11T00-40-32+01-00_mini12.local:C282C8DC-D435-4A82-9997-64BE982AB24E
:END:
Aquamacs does its own binding to comment and uncomment region.
#+NAME: org_mark_mini20.local_20220610T161050.783393
#+begin_src emacs-lisp
(use-package-elpa comment-dwim-2
  :unless *aquamacs*
  :commands comment-dwim-2 ;; need as mac binding
  )
#+end_src
* TODO Folding
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:1928599E-6243-4314-835D-B5D932F7E372
:END:
Keeps changing - the issue is with comments before functions I want to collapse the lot. Plus with racket and ml comments are not in firts column so some (outshine) do not spot it.
Current work to get org mode working better. see send to REPL.

Also see this answer for an addition to highlight indent mode https://stackoverflow.com/a/4459159/151019
** Hide show
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:E10913D4-7B93-4357-B95F-FA5044D80C3C
:END:
Let us set it up
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_E36E2091-3DAD-46AC-8634-EC11B5E795C7
#+begin_src emacs-lisp
(use-feature hideshow
    :diminish  hs-minor-mode
    :bind (:map hs-minor-mode-map
                ("<C-mouse-1>" . hs-toggle-hiding))
    :init
    ;; Hide the comments too when you do a 'hs-hide-all'
    (setq hs-hide-comments nil)
    ;; Set whether isearch opens folded comments, code, or both
    ;; where x is code, comments, t (both), or nil (neither)
    (setq hs-isearch-open 't)

    (defun hs-mwb-show-one-level ()
      "Show just the next level"
      (interactive)
      (hs-show-block)
      (hs-hide-level 1))
    :hook (prog-mode . hs-minor-mode))
#+end_src
*** Markers in Fringe
:PROPERTIES:
:ID:       org_mark_mini20.local:20210429T084502.949302
:END:
Put markers in the fringe which messed up lispy and is slow - I suspect not for elisp.
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_C0B47E60-5C02-4FCD-AE13-ABA380EA4866
#+begin_src emacs-lisp
(use-package-elpa hideshowvis
  :disabled
  :hook (prog-mode . hideshowvis-enable)
  :config (hideshowvis-symbols))
#+end_src
*** Hydra
:PROPERTIES:
:ID:       org_mark_mini20.local:20210429T084502.946356
:END:
Use a hydra so don't need the odd keybindings
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_780EA095-1E1A-4E1C-956D-17C68D30AE73
#+begin_src emacs-lisp
(defhydra hydra-hs (:idle 1.0)
  "
Hide^^            ^Show^            ^Toggle^    ^Navigation^
----------------------------------------------------------------
_h_ hide all      _s_ show all      _t_oggle    _n_ext line
_d_ hide block    _a_ show block              _p_revious line
_l_ hide level

_SPC_ cancel
"
  ("s" hs-show-all)
  ("h" hs-hide-all)
  ("a" hs-show-block)
  ("d" hs-hide-block)
  ("t" hs-toggle-hiding)
  ("l" hs-hide-level)
  ("n" forward-line)
  ("p" (forward-line -1))
  ("SPC" nil))

(bind-key "H-h" 'hydra-hs/body)
#+end_src
** Outlining
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:8D4F7694-0606-4178-A927-DE9365C03B2E
:END:
Basically want to collapse/fold depending on comments.
[[https://github.com/alphapapa/outshine][Outshine]] seems to be the only one still under developement, but dioes too much and has the problem that it looks for comments in colum 1 as does hideshow.
#+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_CCD484C1-6BB3-4AFD-8A66-0B2F7722A8B6
#+begin_src emacs-lisp
(use-package-elpa outshine
  :hook (outline-minor-mode . outshine-mode)
  :init
  ;; (add-hook 'outline-minor-mode-hook #'outshine-hook-function)
  :bind (:map outline-minor-mode-map
         ("M-p" . outline-previous-visible-heading)
         ("M-n" . outline-next-visible-heading)
         ("<S-tab>" . outshine-cycle-buffer))
  )
#+end_src

* Narrow-widen
:PROPERTIES:
:ID:       org_mark_mini20.local:20210830T131813.182296
:END:
Mainly from [[https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][here]] via greghendershot
This basically cuts down what is visible. Need to extend so can do more but see how it works first.
#+NAME: org_mark_mini20.local_20210830T131813.146706
#+begin_src emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
		((derived-mode-p 'python-mode)
         (py-narrow-to-def-or-class))
        (t (narrow-to-defun))))
#+end_src


