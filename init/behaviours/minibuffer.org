#+TITLE:  Minibuffer
#+AUTHOR: Mark Bestley
#+EMAIL:  git@bestley.co.uk
#+DATE:   01 Aug 2021
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

* Overview
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T131222.157445
:END:
This originally was ivy.org but when trying to replace ivy I realised that this was not just command completion but anything involving the minibuffer. 9example is ivy-posframe


* Command completion
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:B8539BA6-84DE-4075-80AF-0B37BE1CBA52
:END:
This is completion for emacs commands. Choice is ido, ivy helm.
I'll try ivy.
In general most supported by minibuffer (well buffer switching) can get in a mess and Aquamacs fails with swiper - and now
So the new stuff seems to be [[https://github.com/minad/consult][consult]] and spectrum and marginalia but they don't seem to have posframe but try mini-frame
Well posframe seems to be used but with same beep problem

* Support packages
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T000507.093126
:END:
General purpose but used for the completion

** prescient
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:AF2C3A97-2934-4856-9FB3-B831C48B5ADC
:END:
[[https://github.com/raxod502/prescient.el][Prescient]]  is a library which sorts and filters lists of candidates,
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_378BD735-5E0C-4075-9ED5-A69FC65B29E4
#+begin_src emacs-lisp
(use-package-elpa prescient
  :demand
  :config
  (prescient-persist-mode 1))
#+end_src
** Find M-x commands
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2B101998-0D34-4143-95AF-769C4001D58C
:END:
#+begin_quote
Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.
#+end_quote

However smex seems not to be maintained so try amx
#+NAME: org_2020-11-30+00-00_28F3664A-77DF-4D77-8554-E9F37CB1815E
#+begin_src emacs-lisp
(use-package-elpa amx
  :demand
  :config (amx-mode 1))
#+end_src
** Emacs mini frame
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T194100.725461
:END:
Put the minibuffer elsewhere.
posframe does a few more things as it works with non minibuffer. But mini-frame works with all minibuffer.

This puts it at the top
But it does blank the header line - noticeable with ivy-posframe.
Also I want it in middle or over the non treemacs frame. Look at treemacs-current-visibility to see if visible in current frame

Well I don't know what the frame parameters are left and width can be proportion of screen, pixels or characters. And mini frame does not seem to react well to them so just something that works sort of.


#+NAME: org_mark_mini20.local_20210801T194100.707636
#+begin_src emacs-lisp
(when *emacs/>=26p*
  (use-package-elpa mini-frame
	:demand
	:init
	(setq mini-frame-detach-on-hide 'nil
		  mini-frame-standalone 't)
	(defun mwb-mini-treemacs-width ()
	  "Find width of treemacs window if it exists plus a fringe."
	  (if (treemacs-get-local-window)
		  (/ treemacs-width (float (frame-width)))
		0))

	(defun mwb-mini-frame-parameters ()
	  "Normal minibuffer extents."
	  (message "In mini frame para : left %d" (mwb-mini-treemacs-width))
	  `((left . ,(mwb-mini-treemacs-width)) (top . 0.0) (width . 1.0) (height . 1)))
	(defun mwb-mini-frame-completions-parameters ()
	  "Minibuffer for completions extents."
	  `((left . ,(mwb-mini-treemacs-width)) (width . 1.0) (height . 0.25)))
	(defvar my/mini-frame-normal-functions
	  '(isearch-forward
		consult-line
		consult-line-symbol-at-point
		consult-grep
		consult-git-grep
		consult-find
		consult-ripgrep
		ctrlf-backward-default
		ctrlf-forward-default
		ctrlf-forward-alternate
		ctrlf-backward-alternate
		ctrlf-forward-symbol
		ctrlf-forward-symbol-at-point)
	  "List the functions that don't appear in a posframe.")

	(defun my/mini-frame-parameters ()
	  "Set mini frame parameters based on `this-command'."
	  (if (member this-command my/mini-frame-normal-functions)
		  (let ((left (mwb-mini-treemacs-width)))
			`((top . 0)
			  ;; (left . 0.5)
			  (left . ,left)
			  (width . ,(- 1.0 left))))
		`((top . 0.3)
		  (left . .4)
		  (width . .8))))

	(setq mini-frame-show-parameters 'my/mini-frame-parameters)
	;; (setq mini-frame-show-parameters #'mwb-mini-frame-parameters)
	(setq mini-frame-completions-show-parameters
		  #'mwb-mini-frame-completions-parameters)
	:config
	(mini-frame-mode 1)))
#+end_src
* Newer
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T152331.776146
:END:
Mainly from  consult
** [[https://github.com/raxod502/ctrlf][CTRLF]]
:PROPERTIES:
:ID:       org_mark_mini20.local:20210804T165415.286035
:header-args: :tangle no
:END:
Replace isearch but not so easy as consult-line plus can leave the progress marker on screen.
#+NAME: org_mark_mini20.local_20210804T165415.264578
#+begin_src emacs-lisp
(use-package-elpa ctrlf
  :diabled
  :init (ctrlf-mode 1)
  :commands (ctrlf-backward-default
			 ctrlf-forward-default
			 ctrlf-forward-alternate
			 ctrlf-backward-alternate
			 ctrlf-forward-symbol
			 ctrlf-forward-symbol-at-point))
#+end_src
** Consult
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T152331.774706
:END:

#+NAME: org_mark_mini20.local_20210731T152331.759640
#+begin_src emacs-lisp
(when *emacs/>=26p*
  (use-package-elpa consult
	:demand
	:init
	(setq register-preview-delay 0
		  register-preview-function #'consult-register-format)
	;; Optionally tweak the register preview window.
	;; This adds thin lines, sorting and hides the mode line of the window.
	(advice-add #'register-preview :override #'consult-register-window)

	;; Use Consult to select xref locations with preview
	(setq xref-show-xrefs-function #'consult-xref
		  xref-show-definitions-function #'consult-xref)

	:config
	(setq consult-project-root-function #'projectile-project-root)
	(setq consult-narrow-key "<")

	;;  Delay preview
	(consult-customize consult-theme consult-buffer
					   :preview-key '(:debounce 1.0 any))
	:bind (("C-x r x" . consult-register)
		   ("C-x r b" . consult-bookmark)
		   ("C-c k" . consult-kmacro)
		   ("C-x M-:" . consult-complex-command) ;; orig. repeat-complet-command
		   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
		   ("C-x 5 b" . consult-buffer-other-frame)
		   ("M-#" . consult-register-load)
		   ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
		   ("C-M-#" . consult-register)
		   ("C-x b" . consult-buffer)
		   ("<help> a" . consult-apropos) ;; orig. apropos-command
		   ;; Goto keys
		   ("M-g h" . consult-org-heading)
		   ("M-g e" . consult-compile-error)
		   ("M-g f" . consult-flycheck)
		   ("M-g g" . consult-goto-line) ;; orig. goto-line
		   ("M-g M-g" . consult-goto-line) ;; orig. goto-line
		   ("M-g a" . consult-org-agenda)
		   ("M-g m" . consult-mark)
		   ("M-g M-g" . consult-goto-line) ;; orig. goto-line
		   ("M-g o" . consult-outline)
		   ("M-g m" . consult-mark)
		   ("M-g k" . consult-global-mark)
		   ("M-g i" . consult-imenu)
		   ("M-g I" . consult-project-imenu)
		   ;; M-s bindings (search-map)
		   ("M-s f" . consult-find)
		   ("M-s L" . consult-locate)
		   ("M-s g" . consult-grep)
		   ("M-s G" . consult-git-grep)
		   ("M-s r" . consult-ripgrep)
		   ("M-s l" . consult-line)
		   ("M-s m" . consult-multi-occur)
		   ("M-s k" . consult-keep-lines)
		   ("M-s u" . consult-focus-lines)
		   ;; Isearch integration
		   ("M-s e" . consult-isearch)
		   ;; ("M-g l" . consult-line)
		   ("C-x c SPC" . consult-mark)
		   :map isearch-mode-map
		   ("M-e" . consult-isearch) ;; orig. isearch-edit-string
		   ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
		   ("M-s l" . consult-line)
		   :map mac-key-mode-map
		   ("A-f" . consult-line)
		   ("A-b" . consult-buffer))))
#+end_src
** All-the-icons-completion
:PROPERTIES:
:ID:       org_mark_mini20.local:20210815T090804.369866
:END:
Add icons to completion screens
#+NAME: org_mark_mini20.local_20210815T090804.348976
#+begin_src emacs-lisp
(use-package-elpa all-the-icons-completion
  :config
  (all-the-icons-completion-mode)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
** Marginalia
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T165758.232477
:END:
Add decoration/information
#+NAME: org_mark_mini20.local_20210801T165758.216698
#+begin_src emacs-lisp
(use-package-elpa marginalia
  :commands marginalia-mode
  :init
  (marginalia-mode)
  :config
  (setq marginalia-annotators
		'(marginalia-annotators-heavy marginalia-annotators-light))
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
  :bind (:map minibuffer-local-completion-map
              ("M-A" . marginalia-cycle)
              ("C-i" . marginalia-cycle-annotators)))
#+end_src
** Embark
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T171053.885805
:END:
Take action in selection buffer
#+NAME: org_mark_mini20.local_20210801T171053.868666
#+begin_src emacs-lisp
(use-package-elpa embark
  :after selectrum
  :config
  (setq embark-prompter 'embark-keymap-prompter)
  ;; (add-to-list 'embark-target-finders 'my/embark-org-element)
  ;; (add-to-list 'embark-allow-edit-commands #'my/stream-message)
  ;; (add-to-list 'embark-allow-edit-commands #'my/journal-post)
  ;; (embark-define-keymap embark-sketch-actions
  ;;   "Org Mode sketch-related actions"
  ;;   ("o" my/sketch-insert-file-as-link)
  ;;   ("v" my/geeqie-view))
  ;; (embark-define-keymap embark-journal-actions
  ;;   "Journal"
  ;;   ("e" my/journal-edit))
  (add-to-list 'embark-keymap-alist '(sketch . embark-sketch-actions))
  (add-to-list 'embark-keymap-alist '(journal . embark-journal-actions))

  ;; Hide the mode line of the Embark live/completions buffers from embark
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  :bind
  (:map minibuffer-local-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-collect-mode-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-general-map
        (("j" . my/journal-post)
         ("m" . my/stream-message))
        :map embark-variable-map
        ("l" . edit-list)))

#+end_src
*** Embark counsel
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T171307.569379
:END:
#+NAME: org_mark_mini20.local_20210801T171307.553247
#+begin_src emacs-lisp
(use-package-elpa embark-consult
  :after (embark consult)
  :demand t                ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook (embark-collect-mode . embark-consult-preview-minor-mode))
#+end_src
** Selectrum
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T174734.765653
:END:
The display part as vertical list
#+NAME: org_mark_mini20.local_20210801T174734.748739
#+begin_src emacs-lisp
(use-package-elpa selectrum  :init (selectrum-mode +1))
#+end_src
*** Prescient
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T174941.158080
:END:
To put in order
#+NAME: org_mark_mini20.local_20210801T174941.141568
#+begin_src emacs-lisp
(use-package-elpa selectrum-prescient
  :init (selectrum-prescient-mode +1)
  :after selectrum)
#+end_src
