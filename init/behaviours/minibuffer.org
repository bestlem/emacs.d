#+TITLE:  Minibuffer
#+AUTHOR: Mark Bestley
#+EMAIL:  git@bestley.co.uk
#+DATE:   01 Aug 2021
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

* Overview
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T131222.157445
:END:
This originally was ivy.org but when trying to replace ivy I realised that this was not just command completion but anything involving the minibuffer. 9example is ivy-posframe


* Command completion
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:B8539BA6-84DE-4075-80AF-0B37BE1CBA52
:END:
This is completion for emacs commands. Choice is ido, ivy helm.
I'll try ivy.
In general most supported by minibuffer (well buffer switching) can get in a mess and Aquamacs fails with swiper - and now
So the new stuff seems to be [[https://github.com/minad/consult][consult]] and spectrum and marginalia but they don't seem to have posframe but try mini-frame
Well posframe seems to be used but with same beep problem

* Support packages
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T000507.093126
:END:
General purpose but used for the completion

** prescient
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:AF2C3A97-2934-4856-9FB3-B831C48B5ADC
:END:
[[https://github.com/raxod502/prescient.el][Prescient]]  is a library which sorts and filters lists of candidates,
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_378BD735-5E0C-4075-9ED5-A69FC65B29E4
#+begin_src emacs-lisp
(use-package-elpa prescient
  :demand
  :config
  (prescient-persist-mode 1))
#+end_src
** Find M-x commands
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2B101998-0D34-4143-95AF-769C4001D58C
:END:
#+begin_quote
Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.
#+end_quote

However smex seems not to be maintained so try amx
#+NAME: org_2020-11-30+00-00_28F3664A-77DF-4D77-8554-E9F37CB1815E
#+begin_src emacs-lisp
(use-package amx :ensure t)
#+end_src
** Emacs mini frame
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T194100.725461
:END:
Put the minibuffer elsewhere.
posframe does a few more things as it works with non minibuffer. But mini-frame works with all minibuffer.

This puts it at the top
But it does blank the header line - noticeable with ivy-posframe.
Also I want it in middle or over the non treemacs frame. Look at treemacs-current-visibility to see if visible in current frame


#+NAME: org_mark_mini20.local_20210801T194100.707636
#+begin_src emacs-lisp
(when *emacs/>=26p*
  (use-package-elpa mini-frame
	:demand
	:config
	(defun mwb-mini-treemacs-width ()
	  "Find width of treemacs window if it exists plus a fringe."
	  (if (treemacs-get-local-window)
		  (+ treemacs-width 0.5)
		0.5))

	(defun mwb-mini-frame-parameters ()
	  "Normal minibuffer extents."
	  `((left . ,(mwb-mini-treemacs-width)) (top . 0.0) (width . 1.0) (height . 1)))
	(defun mwb-mini-frame-completions-parameters ()
	  "Minibuffer for completions extents."
	  `((left . ,(mwb-mini-treemacs-width)) (width . 1.0) (height . 0.25)))


	(setq mini-frame-show-parameters #'mwb-mini-frame-parameters)
	(setq mini-frame-completions-show-parameters
		  #'mwb-mini-frame-completions-parameters)
	(mini-frame-mode 1)))
#+end_src
* Ivy
:PROPERTIES:
:header-args: :tangle no
:ID:       org_mark_mini20.local:20210801T131222.155992
:END:
Start with a small setup as I lost track but some of it is needed.

This is the completion tools
Take some from John Wiegley
Note takes time to load
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_9D67023B-7598-49E4-8C6E-F9DF857A30F2
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-x b" . ivy-switch-buffer)
         ("H-b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("M-H" . ivy-resume))
  :bind (:map ivy-minibuffer-map
              ("<tab>" . ivy-alt-done)
              ("SPC" . ivy-alt-done-or-space)
              ("C-d" . ivy-done-or-delete-char)
              ("C-i" . ivy-partial-or-done)
              ("C-r" . ivy-previous-line-or-history)
              ("M-r" . ivy-reverse-i-search)

              ("<C-return>" . ivy-immediate-done)
              ("C-<f18>" . ivy-next-line) ;c-ins
              ; emacs complains about this due to mapping ESC here. ESC map is
              ; the M- map so can't use it as a key
              ;; ("<ESC>" . minibuffer-keyboard-quit)

              ;;  following should already be in map
              ("M-n" . ivy-next-history-element)
              ("M-p" . ivy-previous-history-element)
              )
  :bind (:map ivy-switch-buffer-map
              ("C-k" . ivy-switch-buffer-kill))

  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Do not show ./ amd ../ at top
  ;; https://emacs.stackexchange.com/a/40540/9874
  (setq ivy-extra-directories '())
  ;; Show #/total when scrolling buffers
  (setq ivy-count-format "%d/%d ")
  :preface
  (defun ivy-done-or-delete-char ()
    (interactive)
    (call-interactively
     (if (eolp)
         #'ivy-immediate-done
       #'ivy-delete-char)))

  (defun ivy-alt-done-or-space ()
    (interactive)
    (call-interactively
     (if (= ivy--length 1)
         #'ivy-alt-done
       #'self-insert-command)))

  (defun ivy-switch-buffer-kill ()
    (interactive)
    (debug)
    (let ((bn (ivy-state-current ivy-last)))
      (when (get-buffer bn)
        (kill-buffer bn))
      (unless (buffer-live-p (ivy-state-buffer ivy-last))
        (setf (ivy-state-buffer ivy-last)
              (with-ivy-window (current-buffer))))
      (setq ivy--all-candidates (delete bn ivy--all-candidates))
      (ivy--exhibit)))

  ;; This is the value of `magit-completing-read-function', so that we see
  ;; Magit's own sorting choices.
  (defun my-ivy-completing-read (&rest args)
    (let ((ivy-sort-functions-alist '((t . nil))))
      (apply 'ivy-completing-read args))))
#+end_src

** Ivy posframe
:PROPERTIES:
:ID:       org_2020-12-02+00-00:9671A889-905C-45B8-9B40-F40DE02B9925
:END:
#+NAME: org_2020-12-02+00-00_36E0112E-FDE9-4FEB-87E9-19EF7B62A776
#+begin_src emacs-lisp
;; Show ivy frame using posframe
(when (>= emacs-major-version 27)
  (use-package ivy-posframe
    :ensure t
    :after ivy
    :init
    (setq ivy-posframe-display-functions-alist
		  '((swiper . ivy-display-function-fallback)
			(swiper-isearch . ivy-display-function-fallback)
			(consult-isearch . ivy-display-function-fallback)
			;; (complete-symbol . ivy-posframe-display-at-point)
			(t . ivy-posframe-display)
			;; (t . ivy-display-function-fallback)
			))
    ;; (ivy-posframe-mode 1)

    :config
	(setq ivy-posframe-border-width 1
		  ivy-posframe-hide-minibuffer t
		  ivy-posframe-min-width 100
		  ivy-posframe-min-height 10
		  ivy-posframe-parameters '((alpha 100 100)
									(max-width . 140)
									(left-fringe . 10)
									(right-fringe . 10)))
    (ivy-posframe-mode)))
#+end_src
** Ivy hydra
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:6826257A-FB43-4551-9B23-C99DA1A1947C
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A70BDBE1-B195-4AC5-A852-D68DE552C579
#+begin_src emacs-lisp :
(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))
#+end_src
** Ivy rich all the icons
:PROPERTIES:
:ID:       org_mark_mini20.local:20210610T180145.175955
:END:
#+NAME: org_mark_mini20.local_20210610T180145.157654
#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :ensure t
  :unless *aquamacs*
  :after (ivy-rich ivy-prescient)
  :config
  (setq all-the-icons-ivy-rich-icon-size 0.8)
  (all-the-icons-ivy-rich-mode 1)
  )
#+end_src
** Ivy rich
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:F5A59AEA-8733-49B8-9EFF-C93F935CC468
:END:
More friendly interface for ivy
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_29D787D4-65EA-4C99-9F6F-30C2667174CD
#+begin_src emacs-lisp :
(use-package ivy-rich
  :after ivy counsel  all-the-icons-ivy-rich
  :unless *aquamacs*
  :demand t
  :ensure t
  :config
  (ivy-rich-mode 1)
  (setq ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t
        ivy-rich-path-style 'abbrev))
#+end_src

** Swiper
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:5C40100D-4B11-4D14-A0F9-E508AE4C1D4C
:END:
Replace isearch
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_BD7AD456-5157-41F0-BFF1-A6FF7747F2EA
#+begin_src emacs-lisp :
(use-package swiper
  :after ivy
  :ensure t
  :bind (("C-s" . swiper-isearch)
         ("C-r" . swiper-isearch-backward))
  :config (setq swiper-stay-on-quit t) ; https://emacs.stackexchange.com/questions/55675/escape-swiper-even-when-match-is-required
  (setq swiper-verbose t)
  (setq swiper-goto-start-of-match t)
  (setq swiper-min-highlight 2)
  )
#+end_src

*** Recentre
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:539EBB08-67B6-4B09-983D-E4EF742C8EAD
:END:
	   From [[http://pragmaticemacs.com/emacs/dont-search-swipe/][Pragmatic emacs]] advise swiper to recenter on exit (ivy-display-style defaults to fancy)
	   #+begin_src emacs-lisp
       (defun bjm-swiper-recenter (&rest args)
         "recenter display after swiper"
         (recenter))
       (advice-add 'swiper :after #'bjm-swiper-recenter)
	   #+end_src
**** TODO Aquamacs
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:C3ABE1A8-82F1-450A-951A-C84155C819C9
:END:
Need to integrate with command FG etc (note thet are separate to C-s) although has been useful top be separate

** Counsel
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:C41D57FA-BA5C-47DB-A443-79E048D2DD9C
:END:
Improve many emacs functions
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_B21800D8-545E-465D-9D90-154F944E30F5

#+NAME: org_2020-12-02+00-00_437D6838-DCA0-4F08-B895-A55F6C21021B
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :demand
  :diminish
  :after ivy
;;;  Using mode means these aren't needed?
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x C-r" . counsel-recentf)
         ;; ("<f1> f" . counsel-describe-function)
         ;; ("<f1> v" . counsel-describe-variable)
         ;; ("<f1> l" . counsel-find-library)
         ("C-<f18>" . counsel-yank-pop) ; C-ins
                                        ; ("<f2> i" . counsel-info-lookup-symbol)
                                        ; ("<f2> u" . counsel-unicode-char)
         ("M-i" . counsel-imenu)
         ("C-c g" . counsel-git-grep) ; well deadgrep does that
         ("C-c j" . counsel-git)
                                        ;("C-c k" . counsel-ag)
         ("A-<f4>" . counsel-rg) ; deadgrep much better
         ("C-x l" . counsel-locate)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-add))
  :config
  (if (executable-find "ripgrep")
      ;; use ripgrep instead of grep because it's way faster
      (setq counsel-grep-base-command
			"ripgrep  -M 120 --no-heading --line-number --color never '%s' %s"
			counsel-rg-base-command
			"ripgrep -i -M 120 --no-heading --line-number --color never %s .")
    (warn "\nWARNING: Could not find the ripgrep executable. It is recommended you install ripgrep."))
  (setq counsel-find-file-at-point t)
  :config
  (counsel-mode 1))
	 #+end_src
** Prescient
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T000507.091232
:END:
#+NAME: org_mark_mini20.local_20210731T000507.076423
#+begin_src emacs-lisp
(use-package ivy-prescient
  :ensure t
  :demand
  :after (counsel prescient)
  :config (ivy-prescient-mode 1)
  )
#+end_src
* Newer
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T152331.776146
:END:
Mainly from Sacha Chua
** Consult
:PROPERTIES:
:ID:       org_mark_mini20.local:20210731T152331.774706
:END:

#+NAME: org_mark_mini20.local_20210731T152331.759640
#+begin_src emacs-lisp
(use-package-elpa consult
  :demand
  :bind (("C-x r x" . consult-register)
         ("C-x r b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
         ("C-x M-:" . consult-complex-command) ;; orig. repeat-complet-command
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ("M-g o" . consult-outline)
         ("M-g h" . consult-org-heading)
         ("M-g a" . consult-org-agenda)
         ("M-g m" . consult-mark)
         ("C-x b" . consult-buffer)
         ("<help> a" . consult-apropos)  ;; orig. apropos-command
         ("M-g M-g" . consult-goto-line) ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ("M-g e" . consult-error)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         ;; ("M-g l" . consult-line)

         ("M-s m" . consult-multi-occur)
         ("C-x c o" . consult-multi-occur)
         ("C-x c SPC" . consult-mark)
         :map isearch-mode-map
         ("M-e" . consult-isearch)   ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
         ("M-s l" . consult-line))
  :init
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)
  :config
  (setq consult-project-root-function #'projectile-project-root)
  (setq consult-narrow-key "<")
  )
#+end_src
** Marginalia
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T165758.232477
:END:
Add decoration/information
#+NAME: org_mark_mini20.local_20210801T165758.216698
#+begin_src emacs-lisp
(use-package-elpa marginalia
  :init
  (marginalia-mode)
  :config
  (setq marginalia-annotators
		'(marginalia-annotators-heavy marginalia-annotators-light))
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit))))
  :bind (:map minibuffer-local-completion-map
              ("M-A" . marginalia-cycle)
              ("C-i" . marginalia-cycle-annotators)))
#+end_src
** Embark
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T171053.885805
:END:
Take action in selection buffer
#+NAME: org_mark_mini20.local_20210801T171053.868666
#+begin_src emacs-lisp
(use-package-elpa embark
  :after selectrum
  :config
  (setq embark-prompter 'embark-keymap-prompter)
  ;; (add-to-list 'embark-target-finders 'my/embark-org-element)
  ;; (add-to-list 'embark-allow-edit-commands #'my/stream-message)
  ;; (add-to-list 'embark-allow-edit-commands #'my/journal-post)
  ;; (embark-define-keymap embark-sketch-actions
  ;;   "Org Mode sketch-related actions"
  ;;   ("o" my/sketch-insert-file-as-link)
  ;;   ("v" my/geeqie-view))
  ;; (embark-define-keymap embark-journal-actions
  ;;   "Journal"
  ;;   ("e" my/journal-edit))
  (add-to-list 'embark-keymap-alist '(sketch . embark-sketch-actions))
  (add-to-list 'embark-keymap-alist '(journal . embark-journal-actions))

  ;; Hide the mode line of the Embark live/completions buffers from embark
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  :bind
  (:map minibuffer-local-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-collect-mode-map
        (("C-c e" . embark-act)
         ("C-;" . embark-act))
        :map embark-general-map
        (("j" . my/journal-post)
         ("m" . my/stream-message))
        :map embark-variable-map
        ("l" . edit-list)))

#+end_src
*** Embark counsel
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T171307.569379
:END:
#+NAME: org_mark_mini20.local_20210801T171307.553247
#+begin_src emacs-lisp
(use-package-elpa embark-consult
  :after (embark consult)
  :demand t                ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook (embark-collect-mode . embark-consult-preview-minor-mode))
     #+end_src
#+end_src
** Selectrum
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T174734.765653
:END:
The display part as verticle list
#+NAME: org_mark_mini20.local_20210801T174734.748739
#+begin_src emacs-lisp
(use-package-elpa selectrum  :init (selectrum-mode +1))
#+end_src
*** Prescient
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T174941.158080
:END:
To put in order
#+NAME: org_mark_mini20.local_20210801T174941.141568
#+begin_src emacs-lisp
(use-package-elpa selectrum-prescient
  :init (selectrum-prescient-mode +1)
  :after selectrum)
#+end_src
