#+TITLE:  Mode Line
#+AUTHOR: Mark Bestley
#+EMAIL:  emacs@bestley.co.uk
#+DATE:   01 Jun 2021
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

* Overview
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.873281
:END:
There are several ways see

** Possibilities
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.872240
:END:

[[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][All the icons]] has icons but example code is broken and incomplete

[[https://www.manueluberti.eu/emacs/2018/03/10/moody-and-minions/][Uberti]] for a comment on smartline aand powerline - I might  this first due to use of minions. then discovered smart-mode-line also has similar rich-minority-mode well not quite. Minion is sort of needed

[[https://github.com/Malabarba/smart-mode-line/][Smart Mode Line]] the one that seems to have a fuller set of builders - well not so much

doom-modeline seems to be the best to start especially via centaur but difficult to add another segment.
It makes the usual issue with frameworks. Once you need a small change it is difficult. e.g. look up by mode is all partiiallyn hard coded as it is a look up by mode - not a case statement so I can't add a rule e.g. for lisp. I effectively wantr to edit the totp level but that is hidden.


So minions is needed and is the main issue that I had - all the minor mode info I do not need to see.

Spaceline also has some setup ideas.

From my collection of init see

leuven for a setup possibly using powerline
greghendershott  for a seemingly simple one
howardabrams for a powerline  and a smart-mode-line
jerrypnz for complex but lead to  http://amitp.blogspot.co.nz/2011/08/emacs-custom-mode-line.html and then https://gist.github.com/redblobgames/5d9cf891120028440a4bdb429f101de6
kaushalmodi as author of smart mode line

At the end doom-modeline looks the best and has most detail but internals are hidden - you need to clone it and modify the internals.

Spaceline looks like it has the parts to build up but not all the needed defined segments. But it is not variable space. But the segments have more external controls like a toggle and have :when options.

** Attempts
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.870927
:END:
So try
all-the-icons - it is incomplete
jerry pnz as it uses all-the icons - OK but need to do a bit more. Right hand goes off end
centaur for fuller use of doom-modeline and minions

Current best jerry pnz + minions + get segments from doom-modeline. The reason is that I want to alter things depending on mode. Or doom-modeline if I can get the constructor in public
Another issue with frameworks is that mode specific stuff has to be in the segments not in the construction of the header (This is really a framework) - well excpt for the repitious lists.

* Packages
:PROPERTIES:
:ID:       org_mark_mini20o.local:20210602T212500.391684
:END:

**[[https://github.com/tarsius/moody][Moody]]
#+NAME: org_mark_mini20.local_20210602T212500.385625
#+begin_src emacs-lisp
(use-package moody
  :ensure t
  :disabled
  :config
  (setq x-underline-at-descent-line t)
  ;; (moody-replace-mode-line-buffer-identification)
  ;; (moody-replace-vc-mode)
  )
#+end_src


** Minions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T224030.560968
:END:
#+NAME: org_mark_mini20.local_20210602T224030.555025
#+begin_src emacs-lisp
(use-package minions
  :ensure t
  :hook (doom-modeline-mode . minions-mode)
  :config
  (setq minions-mode-line-minor-modes-map
        (let ((map (make-sparse-keymap)))
          (define-key map [mode-line down-mouse-1] 'minions-minor-modes-menu)
          (define-key map [header-line down-mouse-1] 'minions-minor-modes-menu)
          map)))
#+end_src
* All the icons setup - not tangled
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.692851
:header-args:    :tangle no
:END:
Start with all the icons . This is a set of snippets
Also as mode line is a emacs package it is already loaded and all-the icons is in config this is just plain elisp.
However they don't work and it is an incomplete Line

So removed
** all the icon fields
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.731932
:END:
*** Modified or Read Only
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691951
:END:
This snippet displays a chain icon when the current file is saved, a broken chain when it is modified and a pad lock when the file is read only.

#+NAME: org_mark_mini20.local_20210601T223826.685256
#+begin_src emacs-lisp
(defun custom-modeline-modified ()
  (let* ((config-alist
          '(("*" all-the-icons-faicon-family all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
            ("-" all-the-icons-faicon-family all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
            ("%" all-the-icons-octicon-family all-the-icons-octicon "lock" :height 1.2 :v-adjust 0.1)))
		 (result (cdr (assoc (format-mode-line "%*") config-alist))))
    (propertize (apply (cadr result) (cddr result))
                'face `(:family ,(funcall (car result))))))
#+end_src

*** Mode Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691079
:END:
 This snippet displays the Developer Icon for the mode of that buffers file.
#+NAME: org_mark_mini20.local_20210601T223826.685723
 #+begin_src emacs-lisp
(defun custom-modeline-mode-icon ()
  (let* ((icon (all-the-icons-icon-for-mode major-mode))
		 (face-prop (and (stringp icon) (get-text-property 0 'face icon))))
	(when (and (stringp icon) (not (string= major-mode icon)) face-prop)
	  (setq mode-name (propertize icon 'display '(:ascent center))))))
#+end_src
*** Region Marking
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.690169
:END:
This snippet displays useful information on the current marked region, i.e. number of lines and characters marked.

#+NAME: org_mark_mini20.local_20210601T224107.532046
#+begin_src emacs-lisp
(defun custom-modeline-region-info ()
  (when mark-active
    (let ((words (count-lines (region-beginning) (region-end)))
		  (chars (count-words (region-end) (region-beginning))))
	  (concat
	   (propertize (format "   %s" (all-the-icons-octicon "pencil") words chars)
				   'face `(:family ,(all-the-icons-octicon-family))
				   'display '(raise -0.0))
	   (propertize (format " (%s, %s)" words chars)
				   'face `(:height 0.9))))))
#+end_src
*** Version Control Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.688905
:END:
This snippet displays information about the current buffers version control system. Currently, it only supports SVN & Git for including icons.
#+NAME: org_mark_mini20.local_20210601T223826.686130
#+begin_src emacs-lisp
(defun -custom-modeline-github-vc ()
  (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
    (concat
     (propertize (format " %s" (all-the-icons-alltheicon "git")) 'face `(:height 1.2) 'display '(raise -0.1))
     " · "
     (propertize (format "%s" (all-the-icons-octicon "git-branch"))
                 'face `(:height 1.3 :family ,(all-the-icons-octicon-family))
                 'display '(raise -0.1))
     (propertize (format " %s" branch) 'face `(:height 0.9)))))

(defun -custom-modeline-svn-vc ()
  (let ((revision (cadr (split-string vc-mode "-"))))
    (concat
     (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.2) 'display '(raise -0.1))
     (propertize (format " · %s" revision) 'face `(:height 0.9)))))

(defun custom-modeline-icon-vc ()
  (when vc-mode
    (cond
     ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
     ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
     (t (format "%s" vc-mode)))))
#+end_src
*** Flycheck Checker Information
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.537507
:END:
This snippet displays information about the results of running Flycheck on the current buffer. It doesn't actually use all-the-icons but it does look nicer, and could use it.
#+NAME: org_mark_mini20.local_20210601T224107.532728
#+begin_src emacs-lisp
(defun custom-modeline-flycheck-status ()
  (let* ((text (pcase flycheck-last-status-change
				 (`finished (if flycheck-current-errors
								(let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
											   (+ (or \.warning 0) (or \.error 0)))))
								  (format "✖ %s Issue%s" count (unless (eq 1 count) "s")))
							  "✔ No Issues"))
				 (`running "⟲ Running")
				 (`no-checker "⚠ No Checker")
				 (`not-checked "✖ Disabled")
				 (`errored "⚠ Error")
				 (`interrupted "⛔ Interrupted")
				 (`suspicious ""))))
	(propertize text
				'help-echo "Show Flycheck Errors"
				'mouse-face '(:box 1)
				'local-map (make-mode-line-mouse-map
							'mouse-1 (lambda () (interactive) (flycheck-list-errors))))))

#+end_src
*** Number of Packages to Update
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.536277
:END:

This snippet displays the number of packages that you last needed to update. This currently works every time you refresh your package archive list, so the number can get stale pretty quickly.
#+NAME: org_mark_mini20.local_20210601T224107.533147
#+begin_src emacs-lisp
(defvar powerline/upgrades nil)

(defun powerline/count-upgrades ()
  (let ((buf (current-buffer)))
    (package-list-packages-no-fetch)
    (with-current-buffer "*Packages*"
      (setq powerline/upgrades (length (package-menu--find-upgrades))))
    (switch-to-buffer buf)))
(advice-add 'package-menu-execute :after 'powerline/count-upgrades)

(defun custom-modeline-package-updates ()
  (let ((num (or powerline/upgrades (powerline/count-upgrades))))
	(when (> num 0)
	  (propertize
	   (concat
		(propertize (format "%s" (all-the-icons-octicon "package"))
					'face `(:family ,(all-the-icons-octicon-family) :height 1.2)
					'display '(raise -0.1))
		(propertize (format " %d updates " num)
					'face `(:height 0.9)))
	   'help-echo "Open Packages Menu"
	   'mouse-face '(:box 1)
	   'local-map (make-mode-line-mouse-map
				   'mouse-1 (lambda () (interactive) (package-list-packages)))))))
#+end_src
** The actual mode line
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.730736
:END:
#+NAME: org_mark_mini20.local_20210601T224327.727049
#+begin_src emacs-lisp
(setq mode-line-format '("%e" (:eval
							   (concat
								(custom-modeline-modified)
								(custom-modeline-mode-icon)
								;; (custom-modeline-icon-vc)
								;; (custom-modeline-region-info)
								;; (custom-modeline-flycheck-status)
								))))
#+end_src
* Jerry Peng setup - no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T212500.390542
:header-args:    :tangle no
:END:
See site-lisp/jerrypnz/jp-modeline.el
Needs Moody. I also removed some
#+NAME: org_mark_mini20.local_20210602T212500.386769
#+begin_src emacs-lisp
(use-package jp-modeline
  :demand
  :config
  (setq jp-modeline-enabled-p t)
  (jp-modeline-activate)
  )
#+end_src
* Centaur setup/ a configured Doom
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T224030.562027
:END:
Makes use of doom-modeline and minions
TODO add to doom-modeline-indent-alist
TODO Racket xp add to flycheck
TODO Set line and column - in plain mode-line?
TODO Lispy in modal
TODO Hardhat as part of read only
** Doom setup
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T225204.595400
:END:
#+NAME: org_mark_mini20.local_20210602T224030.553632
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom
  ;; (doom-modeline-icon centaur-icon)
  (doom-modeline-bar nil)
  (doom-modeline-hud t)
  (doom-modeline-minor-modes t)
  (doom-modeline-mu4e nil)

  ;;  from doom-modeline page change to custom
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-unicode-fallback t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-workspace-name nil)
  (doom-modeline-lsp t)
  (doom-modeline-irc nil)
  (doom-modeline-buffer-encoding 'nondefault)
  (doom-modeline-indent-info t)

  ;; From actual customization
  (column-number-mode t)
  (doom-modeline-indent-info t)
  (mode-line-percent-position nil)
  (column-number-mode t)
  (size-indication-mode t)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; From customisation
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project)

  :hook (after-init . mwb-headline-mode)
  :init
  ;; Prevent flash of unstyled modeline at startup
  (unless after-init-time
	(setq doom-modeline--default-format mode-line-format)
	(setq-default mode-line-format nil))
  :bind (:map doom-modeline-mode-map
			  ("C-<f6>" . doom-modeline-hydra/body)))
#+end_src
** Hydra
:PROPERTIES:
:ID:       org_mark_mini20.local:20210603T094224.182401
:END:
Separate out so org file is easier to read
#+NAME: org_mark_mini20.local_20210603T094224.165903
#+begin_src emacs-lisp
(pretty-hydra-define doom-modeline-hydra
  (:title (pretty-hydra-title "Mode Line" 'fileicon "emacs" :face 'all-the-icons-purple :v-adjust -0.1)
		  :color amaranth :quit-key "q")
  ("Icon"
   (("i" (setq doom-modeline-icon (not doom-modeline-icon))
	 "display icons" :toggle doom-modeline-icon)
	("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
	 "unicode fallback" :toggle doom-modeline-unicode-fallback)
	("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
	 "major mode" :toggle doom-modeline-major-mode-icon)
	("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
	 "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
	("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
	 "buffer state" :toggle doom-modeline-buffer-state-icon)
	("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
	 "modification" :toggle doom-modeline-buffer-modification-icon)
	("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
	 "modal" :toggle doom-modeline-modal-icon))
   "Segment"
   (("H" (setq doom-modeline-hud (not doom-modeline-hud))
	 "hud" :toggle doom-modeline-hud)
	("M" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
	 "minor modes" :toggle doom-modeline-minor-modes)
	("W" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
	 "word count" :toggle doom-modeline-enable-word-count)
	("E" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
	 "encoding" :toggle doom-modeline-buffer-encoding)
	("I" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
	 "indent" :toggle doom-modeline-indent-info)
	("L" (setq doom-modeline-lsp (not doom-modeline-lsp))
	 "lsp" :toggle doom-modeline-lsp)
	("P" (setq doom-modeline-persp-name (not doom-modeline-persp-name))
	 "perspective" :toggle doom-modeline-persp-name)
	("G" (setq doom-modeline-github (not doom-modeline-github))
	 "github" :toggle doom-modeline-github)
	("N" (setq doom-modeline-gnus (not doom-modeline-gnus))
	 "gnus" :toggle doom-modeline-gnus)
	("U" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
	 "mu4e" :toggle doom-modeline-mu4e)
	("R" (setq doom-modeline-irc (not doom-modeline-irc))
	 "irc" :toggle doom-modeline-irc)
	("F" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
	 "irc buffers" :toggle doom-modeline-irc-buffers)
	("S" (progn
		   (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
		   (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
	 "simple checker" :toggle doom-modeline-checker-simple-format)
	("V" (setq doom-modeline-env-version (not doom-modeline-env-version))
	 "version" :toggle doom-modeline-env-version))
   "Style"
   (("a" (setq doom-modeline-buffer-file-name-style 'auto)
	 "auto"
	 :toggle (eq doom-modeline-buffer-file-name-style 'auto))
	("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
	 "buffer name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
	("f" (setq doom-modeline-buffer-file-name-style 'file-name)
	 "file name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
	("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
	 "truncate upto project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
	("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
	 "truncate from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
	("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
	 "truncate with project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
	("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
	 "truncate except project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
	("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
	 "truncate upto root"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
	("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
	 "truncate all"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
	("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
	 "truncate none"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
	("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
	 "relative from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
	("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
	 "relative to project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
   "Project Detection"
   (("p f" (setq doom-modeline-project-detection 'ffip)
	 "ffip"
	 :toggle (eq doom-modeline-project-detection 'ffip))
	("p t" (setq doom-modeline-project-detection 'projectile)
	 "projectile"
	 :toggle (eq doom-modeline-project-detection 'projectile))
	("p p" (setq doom-modeline-project-detection 'project)
	 "project"
	 :toggle (eq doom-modeline-project-detection 'project))
	("p n" (setq doom-modeline-project-detection nil)
	 "disable"
	 :toggle (eq doom-modeline-project-detection nil)))
   "Misc"
   (("g" (progn
		   (message "Fetching GitHub notifications...")
		   (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
		   (browse-url "https://github.com/notifications"))
	 "github notifications" :exit t)
	("e" (if (bound-and-true-p flycheck-mode)
			 (flycheck-list-errors)
		   (flymake-show-diagnostics-buffer))
	 "list errors" :exit t)
	("O" (if (bound-and-true-p grip-mode)
			 (grip-browse-preview)
		   (message "Not in preview"))
	 "browse preview" :exit t)
	("z h" (counsel-read-setq-expression 'doom-modeline-height) "set height")
	("z w" (counsel-read-setq-expression 'doom-modeline-bar-width) "set bar width")
	("z g" (counsel-read-setq-expression 'doom-modeline-github-interval) "set github interval")
	("z n" (counsel-read-setq-expression 'doom-modeline-gnus-timer) "set gnus interval"))))
#+end_src

** Wrapper for loading rest
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T225204.593417
:END:
To control when loaded
#+NAME: org_mark_mini20.local_20210605T225204.571319
#+begin_src emacs-lisp
(with-eval-after-load 'doom-modeline
  <<doom-modeline-config>>
  )
#+end_src
** Headline
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T225204.594420
:header-args:    :noweb-ref doom-modeline-config
:END:
Doom-modeline is a framework and not easy to reconfigure so do in a hook when the mode changes
*** Fix minor mode segment
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T071758.129742
:END:
The segment does not set the background of the face correctly
#+NAME: org_mark_mini20.local_20210607T071758.113035
#+begin_src emacs-lisp
(set-face-attribute 'doom-modeline-buffer-minor-mode nil :inherit 'mode-line)
#+end_src
*** Support functions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T225204.592204
:END:
Basically headline versions of modeline ones.
We will use badly name modline in may cases but some have mode-line hard coded
**** Set the headline
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T230128.789333
:END:
#+NAME: org_mark_mini20.local_20210605T230128.769614
#+begin_src emacs-lisp
(defun mwb-headline-set-headline (key &optional default)
  "Set the headline format. Does nothing if the modeline KEY doesn't exist.
If DEFAULT is non-nil, set the default mode-line for all buffers."
  (when-let ((modeline (doom-modeline key)))
    (setf (if default
              (default-value 'header-line-format)
            (buffer-local-value 'header-line-format (current-buffer)))
          (list "%e" modeline))))
#+end_src
**** Keymap helper macro
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T135237.586136
:END:
Need to make headline keymaps copy the mode-line ones
#+NAME: org_mark_mini20.local_20210607T135237.571219
#+begin_src emacs-lisp
(defmacro mwb-headline-map-keymap (keymap)
  `(define-key ,keymap [header-line]
	 (lookup-key ,keymap [mode-line])))
#+end_src
*** Override doom functions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T181542.121274
:END:
These are needed mainly because maps are hard coded or they need extra functionality
**** Update flycheck icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T181542.119985
:END:
#+NAME: org_mark_mini20.local_20210607T181542.097353
#+begin_src emacs-lisp
(defun doom-modeline-update-flycheck-icon (&optional status)
  "Update flycheck icon via STATUS."
  (setq doom-modeline--flycheck-icon
        (when-let
			((icon
			  (pcase status
				('finished (if flycheck-current-errors
							   (let-alist (doom-modeline--flycheck-count-errors)
								 (doom-modeline-checker-icon
								  "block" "🚫" "!"
								  (cond ((> \.error 0) 'doom-modeline-urgent)
										((> \.warning 0) 'doom-modeline-warning)
										(t 'doom-modeline-info))))
							 (doom-modeline-checker-icon "check" "✓" "-" 'doom-modeline-info)))
				('running (doom-modeline-checker-icon "access_time" "⏱" "*" 'doom-modeline-debug))
				('no-checker (doom-modeline-checker-icon "sim_card_alert" "⚠" "-" 'doom-modeline-debug))
				('errored (doom-modeline-checker-icon "sim_card_alert" "⚠" "-" 'doom-modeline-urgent))
				('interrupted (doom-modeline-checker-icon "pause" "⏸" "=" 'doom-modeline-debug))
				('suspicious (doom-modeline-checker-icon "priority_high" "❗" "!" 'doom-modeline-urgent))
				(_ nil))))
          (propertize icon
                      'help-echo (concat "Flycheck\n"
                                         (pcase status
                                           ('finished "mouse-1: Display minor mode menu
mouse-2: Show help for minor mode")
                                           ('running "Running...")
                                           ('no-checker "No Checker")
                                           ('errored "Error")
                                           ('interrupted "Interrupted")
                                           ('suspicious "Suspicious")))
                      'mouse-face 'mode-line-highlight
                      'local-map (let ((map (make-sparse-keymap)))
                                   (define-key map [mode-line down-mouse-1]
                                     flycheck-mode-menu-map)
                                   (define-key map [mode-line mouse-2]
                                     (lambda ()
                                       (interactive)
                                       (describe-function 'flycheck-mode)))
								   (mwb-headline-map-keymap map)
                                   map)))))
#+end_src
**** Flycheck Status
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T181542.118496
:END:
#+NAME: org_mark_mini20.local_20210607T181542.098345
#+begin_src emacs-lisp
(defun doom-modeline-update-flycheck-text (&optional status)
  "Update flycheck text via STATUS."
  (setq doom-modeline--flycheck-text
		(when-let
			((text
			  (pcase status
				('finished (when flycheck-current-errors
							 (let-alist (doom-modeline--flycheck-count-errors)
							   (if doom-modeline-checker-simple-format
								   (doom-modeline-checker-text
									(number-to-string (+ \.error \.warning \.info))
									(cond ((> \.error 0) 'doom-modeline-urgent)
										  ((> \.warning 0) 'doom-modeline-warning)
										  (t 'doom-modeline-info)))
								 (format "%s/%s/%s"
										 (doom-modeline-checker-text (number-to-string \.error)
																	 'doom-modeline-urgent)
										 (doom-modeline-checker-text (number-to-string \.warning)
																	 'doom-modeline-warning)
										 (doom-modeline-checker-text (number-to-string \.info)
																	 'doom-modeline-info))))))
				('running nil)
				('no-checker nil)
				('errored (doom-modeline-checker-text "Error" 'doom-modeline-urgent))
				('interrupted (doom-modeline-checker-text "Interrupted" 'doom-modeline-debug))
				('suspicious (doom-modeline-checker-text "Suspicious" 'doom-modeline-urgent))
				(_ nil))))
		  (propertize
		   text
		   'help-echo (pcase status
						('finished
						 (concat
						  (when flycheck-current-errors
							(let-alist (doom-modeline--flycheck-count-errors)
							  (format "error: %d, warning: %d, info: %d\n" \.error \.warning \.info)))
						  "mouse-1: Show all errors
mouse-3: Next error"
						  (if (featurep 'mwheel)
							  "\nwheel-up/wheel-down: Previous/next error")))
						('running "Running...")
						('no-checker "No Checker")
						('errored "Error")
						('interrupted "Interrupted")
						('suspicious "Suspicious"))
		   'mouse-face 'mode-line-highlight
		   'local-map (let ((map (make-sparse-keymap)))
						(define-key map [mode-line mouse-1]
						  #'flycheck-list-errors)
						(define-key map [mode-line mouse-3]
						  #'flycheck-next-error)
						(when (featurep 'mwheel)
						  (define-key map (vector 'mode-line
												  mouse-wheel-down-event)
							(lambda (event)
							  (interactive "e")
							  (with-selected-window (posn-window (event-start event))
								(flycheck-previous-error 1))))
						  (define-key map (vector 'mode-line
												  mouse-wheel-up-event)
							(lambda (event)
							  (interactive "e")
							  (with-selected-window (posn-window (event-start event))
								(flycheck-next-error 1))))
						  (mwb-headline-map-keymap map)
						  map))))))
#+end_src
**** Indent
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T181542.117048
:END:
This should be hidden many times
#+NAME: org_mark_mini20.local_20210607T181542.099140
#+begin_src emacs-lisp
(doom-modeline-def-segment indent-info
  "Displays the indentation information."
  (when doom-modeline-indent-info
    (let ((do-propertize
           (lambda (mode size)
             (propertize
              (format " %s %d " mode size)
              'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)))))
      (if indent-tabs-mode
          (funcall do-propertize "TAB" tab-width)
        (let ((lookup-var
               (seq-find (lambda (var)
                           (and var (boundp var) (symbol-value var)))
                         (cdr (assoc major-mode doom-modeline-indent-alist)) nil)))
          (funcall do-propertize "SPC"
                   (if lookup-var
                       (symbol-value lookup-var)
                     tab-width)))))))
#+end_src
**** Buffer State icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210607T182608.613907
:END:
Show read only etc.  Need to add Hardhat including menu to make no  RO. Misgh as well add save when fiddling.
#+NAME: org_mark_mini20.local_20210607T182608.594878
#+begin_src emacs-lisp
(defun doom-modeline-update-buffer-file-state-icon (&rest _)
  "Update the buffer or file state in mode-line."
  (setq doom-modeline--buffer-file-state-icon
        (when doom-modeline-buffer-state-icon
          (ignore-errors
            (concat
             (cond
			  ((and (boundp 'hardhat-reasons)  hardhat-reasons )
			   (doom-modeline-buffer-file-state-icon
				nil "⛑" "%1*" `(:inherit doom-modeline-warning
								 :weight ,(if doom-modeline-icon
											  'normal
											'bold))) )

			  (buffer-read-only
               (doom-modeline-buffer-file-state-icon
                "lock" "🔒" "%1*" `(:inherit doom-modeline-warning
                                    :weight ,(if doom-modeline-icon
                                                 'normal
                                               'bold))))
              ((and buffer-file-name (buffer-modified-p)
                    doom-modeline-buffer-modification-icon)
               (doom-modeline-buffer-file-state-icon
                "save" "💾" "%1*" `(:inherit doom-modeline-buffer-modified
                                    :weight ,(if doom-modeline-icon
                                                 'normal
                                               'bold))))
              ((and buffer-file-name
                    (not (file-remote-p buffer-file-name)) ; Avoid freezing while connection is lost
                    (not (file-exists-p buffer-file-name)))
               (doom-modeline-buffer-file-state-icon
                "do_not_disturb_alt" "🚫" "!" 'doom-modeline-urgent))
              (t ""))
             (when (or (buffer-narrowed-p)
                       (and (bound-and-true-p fancy-narrow-mode)
                            (fancy-narrow-active-p))
                       (bound-and-true-p dired-narrow-mode))
               (doom-modeline-buffer-file-state-icon
                "vertical_align_center" "↕" "><" 'doom-modeline-warning)))))))
#+end_src
*** Set the  headline by key
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T231939.477073
:END:
Need separate functions that can be called in hooks etc
#+NAME: org_mark_mini20.local_20210605T231939.448911
#+begin_src emacs-lisp
(defun mwb-headline-set-main-headline (&optional default)
  "Set main header-line.
If DEFAULT is non-nil, set the default header-line for all buffers."
  (mwb-headline-set-headline 'main-headline default))
#+end_src
*** Set the fields in the header
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T231939.474664
:END:
Need sets of fields for special cases
#+NAME: org_mark_mini20.local_20210605T231939.449934
#+begin_src emacs-lisp
(doom-modeline-def-modeline 'main-headline
  '( major-mode  buffer-size minor-modes  buffer-position selection-info)
  '(  indent-info buffer-encoding  process checker))


(doom-modeline-def-modeline 'main
  '( workspace-name window-number modals  buffer-info remote-host  word-count parrot )
  '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp  input-method process vcs ))

(doom-modeline-def-modeline 'org-src
  '( window-number modals  buffer-info-simple buffer-position word-count parrot selection-info)
  '(objed-state misc-info debug lsp minor-modes input-method  buffer-encoding major-mode process checker))

;; (doom-modeline-def-modeline 'special-headline
;;   '()
;;   )
#+end_src
**** Create the mode
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T234647.542654
:END:
Best way to turn off and on seems to be create a mode that turns doom-modeline-mode off and on.
#+NAME: org_mark_mini20.local_20210605T234647.521270
#+begin_src emacs-lisp
(define-minor-mode mwb-headline-mode
  "Toggle headline on or off"
  :group 'mwb-headline
  :global t
  :lighter nil
  ;; :keymap mwb-headline-mode-map
  (if mwb-headline-mode
	  (progn
		(doom-modeline-mode 1)

		(mwb-headline-set-main-headline t) ; set default

		;; Apply to all existing buffers.
		(dolist (buf (buffer-list))
		  (with-current-buffer buf
			(mwb-headline-set-main-headline)))

		;;  set the header keymap as a copy of mode line
		(mwb-headline-map-keymap mode-line-major-mode-keymap)
		(mwb-headline-map-keymap mode-line-column-line-number-mode-map)

		;;  hooks for special cases
		)
	;; Restore mode-line
	(let ((original-format (doom-modeline--original-value 'header-line-format)))
	  (setq-default header-line-format original-format)
	  (dolist (buf (buffer-list))
		(with-current-buffer buf
		  (setq header-line-format original-format))))
	(doom-modeline-mode -1)))
#+end_src
* Spaceline -no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210606T165448.626960
:header-args:    :tangle no
:END:
** Load
:PROPERTIES:
:ID:       org_mark_mini20.local:20210606T165448.625918
:END:

#+NAME: org_mark_mini20.local_20210606T165448.609794
#+begin_src emacs-lisp
(use-package spaceline
  :ensure t
  :demand
  :config
  (require 'spaceline-config)
  ;;(spaceline-spacemacs-theme)
  )
  #+end_src
#+end_src
** All the icons
:PROPERTIES:
:ID:       org_mark_mini20.local:20210606T165448.624436
:END:
#+NAME: org_mark_mini20.local_20210606T165448.610552
#+begin_src emacs-lisp
(use-package spaceline-all-the-icons
  :ensure t
  :after spaceline
  :config (spaceline-all-the-icons-theme))
#+end_src
