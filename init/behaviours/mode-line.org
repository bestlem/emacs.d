#+TITLE:  Mode Line
#+AUTHOR: Mark Bestley
#+EMAIL:  emacs@bestley.co.uk
#+DATE:   01 Jun 2021
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

* Overview
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.873281
:END:
There are several ways see

** Possibilities
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.872240
:END:

[[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][All the icons]] has icons but example code is broken and incomplete

[[https://www.manueluberti.eu/emacs/2018/03/10/moody-and-minions/][Uberti]] for a comment on smartline aand powerline - I might  this first due to use of minions. then discovered smart-mode-line also has similar rich-minority-mode well not quite. Minion is sort of needed

[[https://github.com/Malabarba/smart-mode-line/][Smart Mode Line]] the one that seems to have a fuller set of builders - well not so much

doom-modeline seems to be the best to start especially via centaur but difficult to add another segment.
It makes the usual issue with frameworks. Once you need a small change it is difficult. e.g. look up by mode is all partiiallyn hard coded as it is a look up by mode - not a case statement so I can't add a rule e.g. for lisp. I effectively wantr to edit the totp level but that is hidden.


So minions is needed and is the main issue that I had - all the minor mode info I do not need to see.

From my collection of init see

leuven for a setup possibly using powerline
greghendershott  for a seemingly simple one
howardabrams for a powerline  and a smart-mode-line
jerrypnz for complex but lead to  http://amitp.blogspot.co.nz/2011/08/emacs-custom-mode-line.html and then https://gist.github.com/redblobgames/5d9cf891120028440a4bdb429f101de6
kaushalmodi as author of smart mode line

** Attempts
:PROPERTIES:
:ID:       org_mark_mini20.local:20210604T101559.870927
:END:
So try
all-the-icons - it is incomplete
jerry pnz as it uses all-the icons - OK but need to do a bit more. Right hand goes off end
centaur for fuller use of doom-modeline and minions

Current best jerry pnz + minions + get segments from doom-modeline. The reason is that I want to alter things depending on mode. Or doom-modeline if I can get the constructor in public


* Packages
:PROPERTIES:
:ID:       org_mark_mini20o.local:20210602T212500.391684
:END:

**[[https://github.com/tarsius/moody][Moody]]
#+NAME: org_mark_mini20.local_20210602T212500.385625
#+begin_src emacs-lisp
(use-package moody
  :ensure t
  :config
  (setq x-underline-at-descent-line t)
  ;; (moody-replace-mode-line-buffer-identification)
  ;; (moody-replace-vc-mode)
  )
#+end_src


** Minions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T224030.560968
:END:
#+NAME: org_mark_mini20.local_20210602T224030.555025
#+begin_src emacs-lisp
(use-package minions
  :ensure t
  :hook (doom-modeline-mode . minions-mode))
#+end_src
* All the icons setup - not tangled
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.692851
:header-args:    :tangle no
:END:
Start with all the icons . This is a set of snippets
Also as mode line is a emacs package it is already loaded and all-the icons is in config this is just plain elisp.
However they don't work and it is an incomplete Line

So removed
** all the icon fields
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.731932
:END:
*** Modified or Read Only
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691951
:END:
This snippet displays a chain icon when the current file is saved, a broken chain when it is modified and a pad lock when the file is read only.

#+NAME: org_mark_mini20.local_20210601T223826.685256
#+begin_src emacs-lisp
(defun custom-modeline-modified ()
  (let* ((config-alist
          '(("*" all-the-icons-faicon-family all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
            ("-" all-the-icons-faicon-family all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
            ("%" all-the-icons-octicon-family all-the-icons-octicon "lock" :height 1.2 :v-adjust 0.1)))
		 (result (cdr (assoc (format-mode-line "%*") config-alist))))
    (propertize (apply (cadr result) (cddr result))
                'face `(:family ,(funcall (car result))))))
#+end_src

*** Mode Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691079
:END:
 This snippet displays the Developer Icon for the mode of that buffers file.
#+NAME: org_mark_mini20.local_20210601T223826.685723
 #+begin_src emacs-lisp
(defun custom-modeline-mode-icon ()
  (let* ((icon (all-the-icons-icon-for-mode major-mode))
		 (face-prop (and (stringp icon) (get-text-property 0 'face icon))))
	(when (and (stringp icon) (not (string= major-mode icon)) face-prop)
	  (setq mode-name (propertize icon 'display '(:ascent center))))))
#+end_src
*** Region Marking
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.690169
:END:
This snippet displays useful information on the current marked region, i.e. number of lines and characters marked.

#+NAME: org_mark_mini20.local_20210601T224107.532046
#+begin_src emacs-lisp
(defun custom-modeline-region-info ()
  (when mark-active
    (let ((words (count-lines (region-beginning) (region-end)))
		  (chars (count-words (region-end) (region-beginning))))
	  (concat
	   (propertize (format "   %s" (all-the-icons-octicon "pencil") words chars)
				   'face `(:family ,(all-the-icons-octicon-family))
				   'display '(raise -0.0))
	   (propertize (format " (%s, %s)" words chars)
				   'face `(:height 0.9))))))
#+end_src
*** Version Control Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.688905
:END:
This snippet displays information about the current buffers version control system. Currently, it only supports SVN & Git for including icons.
#+NAME: org_mark_mini20.local_20210601T223826.686130
#+begin_src emacs-lisp
(defun -custom-modeline-github-vc ()
  (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
    (concat
     (propertize (format " %s" (all-the-icons-alltheicon "git")) 'face `(:height 1.2) 'display '(raise -0.1))
     " · "
     (propertize (format "%s" (all-the-icons-octicon "git-branch"))
                 'face `(:height 1.3 :family ,(all-the-icons-octicon-family))
                 'display '(raise -0.1))
     (propertize (format " %s" branch) 'face `(:height 0.9)))))

(defun -custom-modeline-svn-vc ()
  (let ((revision (cadr (split-string vc-mode "-"))))
    (concat
     (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.2) 'display '(raise -0.1))
     (propertize (format " · %s" revision) 'face `(:height 0.9)))))

(defun custom-modeline-icon-vc ()
  (when vc-mode
    (cond
     ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
     ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
     (t (format "%s" vc-mode)))))
#+end_src
*** Flycheck Checker Information
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.537507
:END:
This snippet displays information about the results of running Flycheck on the current buffer. It doesn't actually use all-the-icons but it does look nicer, and could use it.
#+NAME: org_mark_mini20.local_20210601T224107.532728
#+begin_src emacs-lisp
(defun custom-modeline-flycheck-status ()
  (let* ((text (pcase flycheck-last-status-change
				 (`finished (if flycheck-current-errors
								(let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
											   (+ (or \.warning 0) (or \.error 0)))))
								  (format "✖ %s Issue%s" count (unless (eq 1 count) "s")))
							  "✔ No Issues"))
				 (`running "⟲ Running")
				 (`no-checker "⚠ No Checker")
				 (`not-checked "✖ Disabled")
				 (`errored "⚠ Error")
				 (`interrupted "⛔ Interrupted")
				 (`suspicious ""))))
	(propertize text
				'help-echo "Show Flycheck Errors"
				'mouse-face '(:box 1)
				'local-map (make-mode-line-mouse-map
							'mouse-1 (lambda () (interactive) (flycheck-list-errors))))))

#+end_src
*** Number of Packages to Update
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.536277
:END:

This snippet displays the number of packages that you last needed to update. This currently works every time you refresh your package archive list, so the number can get stale pretty quickly.
#+NAME: org_mark_mini20.local_20210601T224107.533147
#+begin_src emacs-lisp
(defvar powerline/upgrades nil)

(defun powerline/count-upgrades ()
  (let ((buf (current-buffer)))
    (package-list-packages-no-fetch)
    (with-current-buffer "*Packages*"
      (setq powerline/upgrades (length (package-menu--find-upgrades))))
    (switch-to-buffer buf)))
(advice-add 'package-menu-execute :after 'powerline/count-upgrades)

(defun custom-modeline-package-updates ()
  (let ((num (or powerline/upgrades (powerline/count-upgrades))))
	(when (> num 0)
	  (propertize
	   (concat
		(propertize (format "%s" (all-the-icons-octicon "package"))
					'face `(:family ,(all-the-icons-octicon-family) :height 1.2)
					'display '(raise -0.1))
		(propertize (format " %d updates " num)
					'face `(:height 0.9)))
	   'help-echo "Open Packages Menu"
	   'mouse-face '(:box 1)
	   'local-map (make-mode-line-mouse-map
				   'mouse-1 (lambda () (interactive) (package-list-packages)))))))
#+end_src
** The actual mode line
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.730736
:END:
#+NAME: org_mark_mini20.local_20210601T224327.727049
#+begin_src emacs-lisp
(setq mode-line-format '("%e" (:eval
							   (concat
								(custom-modeline-modified)
								(custom-modeline-mode-icon)
								;; (custom-modeline-icon-vc)
								;; (custom-modeline-region-info)
								;; (custom-modeline-flycheck-status)
								))))
#+end_src
* Jerry Peng setup - no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T212500.390542
:header-args:    :tangle no
:END:
See site-lisp/jerrypnz/jp-modeline.el
Needs Moody. I also removed some
#+NAME: org_mark_mini20.local_20210602T212500.386769
#+begin_src emacs-lisp
(use-package jp-modeline
  :demand
  :config
  (setq jp-modeline-enabled-p t)
  (jp-modeline-activate)
  )
#+end_src
* Centaur setup
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T224030.562027
:END:
Makes use of doom-modeline and minions
TODO add to doom-modeline-indent-alist
TODO Racket xp add to flycheck
TODO Set line and column - in plain mode-line?
TODO Lispy in modal
TODO Hardhat as part of read only

#+NAME: org_mark_mini20.local_20210602T224030.553632
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom
  ;; (doom-modeline-icon centaur-icon)
  (doom-modeline-bar nil)
  (doom-modeline-hud t)
  (doom-modeline-minor-modes t)
  (doom-modeline-mu4e nil)

  ;;  from doom-modeline page change to custom
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-unicode-fallback t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-workspace-name nil)
  (doom-modeline-lsp t)
  (doom-modeline-irc nil)
  (doom-modeline-buffer-encoding 'nondefault)
  (doom-modeline-indent-info t)

  ;; From actual customization
  (column-number-mode t)
  (doom-modeline-indent-info t)

  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")


  :hook (after-init . doom-modeline-mode)
  :init
  ;; Prevent flash of unstyled modeline at startup
  (unless after-init-time
	(setq doom-modeline--default-format mode-line-format)
	(setq-default mode-line-format nil))
  :bind (:map doom-modeline-mode-map
			  ("C-<f6>" . doom-modeline-hydra/body)))
#+end_src
*** Hydra
:PROPERTIES:
:ID:       org_mark_mini20.local:20210603T094224.182401
:END:
Separate out so org file is easier to read
#+NAME: org_mark_mini20.local_20210603T094224.165903
#+begin_src emacs-lisp
(pretty-hydra-define doom-modeline-hydra
  (:title (pretty-hydra-title "Mode Line" 'fileicon "emacs" :face 'all-the-icons-purple :v-adjust -0.1)
		  :color amaranth :quit-key "q")
  ("Icon"
   (("i" (setq doom-modeline-icon (not doom-modeline-icon))
	 "display icons" :toggle doom-modeline-icon)
	("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
	 "unicode fallback" :toggle doom-modeline-unicode-fallback)
	("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
	 "major mode" :toggle doom-modeline-major-mode-icon)
	("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
	 "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
	("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
	 "buffer state" :toggle doom-modeline-buffer-state-icon)
	("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
	 "modification" :toggle doom-modeline-buffer-modification-icon)
	("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
	 "modal" :toggle doom-modeline-modal-icon))
   "Segment"
   (("H" (setq doom-modeline-hud (not doom-modeline-hud))
	 "hud" :toggle doom-modeline-hud)
	("M" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
	 "minor modes" :toggle doom-modeline-minor-modes)
	("W" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
	 "word count" :toggle doom-modeline-enable-word-count)
	("E" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
	 "encoding" :toggle doom-modeline-buffer-encoding)
	("I" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
	 "indent" :toggle doom-modeline-indent-info)
	("L" (setq doom-modeline-lsp (not doom-modeline-lsp))
	 "lsp" :toggle doom-modeline-lsp)
	("P" (setq doom-modeline-persp-name (not doom-modeline-persp-name))
	 "perspective" :toggle doom-modeline-persp-name)
	("G" (setq doom-modeline-github (not doom-modeline-github))
	 "github" :toggle doom-modeline-github)
	("N" (setq doom-modeline-gnus (not doom-modeline-gnus))
	 "gnus" :toggle doom-modeline-gnus)
	("U" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
	 "mu4e" :toggle doom-modeline-mu4e)
	("R" (setq doom-modeline-irc (not doom-modeline-irc))
	 "irc" :toggle doom-modeline-irc)
	("F" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
	 "irc buffers" :toggle doom-modeline-irc-buffers)
	("S" (progn
		   (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
		   (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
	 "simple checker" :toggle doom-modeline-checker-simple-format)
	("V" (setq doom-modeline-env-version (not doom-modeline-env-version))
	 "version" :toggle doom-modeline-env-version))
   "Style"
   (("a" (setq doom-modeline-buffer-file-name-style 'auto)
	 "auto"
	 :toggle (eq doom-modeline-buffer-file-name-style 'auto))
	("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
	 "buffer name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
	("f" (setq doom-modeline-buffer-file-name-style 'file-name)
	 "file name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
	("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
	 "truncate upto project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
	("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
	 "truncate from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
	("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
	 "truncate with project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
	("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
	 "truncate except project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
	("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
	 "truncate upto root"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
	("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
	 "truncate all"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
	("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
	 "truncate none"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
	("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
	 "relative from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
	("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
	 "relative to project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
   "Project Detection"
   (("p f" (setq doom-modeline-project-detection 'ffip)
	 "ffip"
	 :toggle (eq doom-modeline-project-detection 'ffip))
	("p t" (setq doom-modeline-project-detection 'projectile)
	 "projectile"
	 :toggle (eq doom-modeline-project-detection 'projectile))
	("p p" (setq doom-modeline-project-detection 'project)
	 "project"
	 :toggle (eq doom-modeline-project-detection 'project))
	("p n" (setq doom-modeline-project-detection nil)
	 "disable"
	 :toggle (eq doom-modeline-project-detection nil)))
   "Misc"
   (("g" (progn
		   (message "Fetching GitHub notifications...")
		   (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
		   (browse-url "https://github.com/notifications"))
	 "github notifications" :exit t)
	("e" (if (bound-and-true-p flycheck-mode)
			 (flycheck-list-errors)
		   (flymake-show-diagnostics-buffer))
	 "list errors" :exit t)
	("O" (if (bound-and-true-p grip-mode)
			 (grip-browse-preview)
		   (message "Not in preview"))
	 "browse preview" :exit t)
	("z h" (counsel-read-setq-expression 'doom-modeline-height) "set height")
	("z w" (counsel-read-setq-expression 'doom-modeline-bar-width) "set bar width")
	("z g" (counsel-read-setq-expression 'doom-modeline-github-interval) "set github interval")
	("z n" (counsel-read-setq-expression 'doom-modeline-gnus-timer) "set gnus interval"))))
#+end_src
