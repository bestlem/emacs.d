#+TITLE:  Mode Line
#+AUTHOR: Mark Bestley
#+EMAIL:  emacs@bestley.co.uk
#+DATE:   01 Jun 2021
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

There are several ways see

I can't find a couple. ALso start left with icons for read only etc.

[[https://github.com/domtronn/all-the-icons.el/wiki/Mode-Line][All the icons]] has icons

[[https://www.manueluberti.eu/emacs/2018/03/10/moody-and-minions/][Uberti]] for a comment on smartline aand powerline - I might  this frst due to use of minions. then discovered smart-mode-line also has similar rich-minority-mode

[[https://github.com/Malabarba/smart-mode-line/][Smart Mode Line]] the one that seems to have a fuller set of builders

From my collection of init see

leuven for a setup possibloy using pwerline
greghendershott  for a seemingly simple one
howardabrams for a powerline  and a smart-mode-line
jerrypnz for complex but lead to  http://amitp.blogspot.co.nz/2011/08/emacs-custom-mode-line.html and then https://gist.github.com/redblobgames/5d9cf891120028440a4bdb429f101de6
kaushalmodi as author of smart mode line
* Mode line setup
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.692851
:END:
Start with all the icons . This is a set of snippets
Also as mode line is a emacs package it is already loaded and all-the icons is in config this is just plain elisp.
However they don't work and it is an incomplete Line
** fields
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.731932
:END:
*** Modified or Read Only
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691951
:END:
This snippet displays a chain icon when the current file is saved, a broken chain when it is modified and a pad lock when the file is read only.

#+NAME: org_mark_mini20.local_20210601T223826.685256
#+begin_src emacs-lisp
(defun custom-modeline-modified ()
  (let* ((config-alist
          '(("*" all-the-icons-faicon-family all-the-icons-faicon "chain-broken" :height 1.2 :v-adjust -0.0)
            ("-" all-the-icons-faicon-family all-the-icons-faicon "link" :height 1.2 :v-adjust -0.0)
            ("%" all-the-icons-octicon-family all-the-icons-octicon "lock" :height 1.2 :v-adjust 0.1)))
		 (result (cdr (assoc (format-mode-line "%*") config-alist))))
    (propertize (apply (cadr result) (cddr result))
                'face `(:family ,(funcall (car result))))))
#+end_src

*** Mode Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.691079
:END:
 This snippet displays the Developer Icon for the mode of that buffers file.
#+NAME: org_mark_mini20.local_20210601T223826.685723
 #+begin_src emacs-lisp
(defun custom-modeline-mode-icon ()
  (let* ((icon (all-the-icons-icon-for-mode major-mode))
		 (face-prop (and (stringp icon) (get-text-property 0 'face icon))))
	(when (and (stringp icon) (not (string= major-mode icon)) face-prop)
	  (setq mode-name (propertize icon 'display '(:ascent center))))))
#+end_src
*** Region Marking
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.690169
:END:
This snippet displays useful information on the current marked region, i.e. number of lines and characters marked.

#+NAME: org_mark_mini20.local_20210601T224107.532046
#+begin_src emacs-lisp
(defun custom-modeline-region-info ()
  (when mark-active
    (let ((words (count-lines (region-beginning) (region-end)))
		  (chars (count-words (region-end) (region-beginning))))
	  (concat
	   (propertize (format "   %s" (all-the-icons-octicon "pencil") words chars)
				   'face `(:family ,(all-the-icons-octicon-family))
				   'display '(raise -0.0))
	   (propertize (format " (%s, %s)" words chars)
				   'face `(:height 0.9))))))
#+end_src
*** Version Control Icon
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T223826.688905
:END:
This snippet displays information about the current buffers version control system. Currently, it only supports SVN & Git for including icons.
#+NAME: org_mark_mini20.local_20210601T223826.686130
#+begin_src emacs-lisp
(defun -custom-modeline-github-vc ()
  (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
    (concat
     (propertize (format " %s" (all-the-icons-alltheicon "git")) 'face `(:height 1.2) 'display '(raise -0.1))
     " · "
     (propertize (format "%s" (all-the-icons-octicon "git-branch"))
                 'face `(:height 1.3 :family ,(all-the-icons-octicon-family))
                 'display '(raise -0.1))
     (propertize (format " %s" branch) 'face `(:height 0.9)))))

(defun -custom-modeline-svn-vc ()
  (let ((revision (cadr (split-string vc-mode "-"))))
    (concat
     (propertize (format " %s" (all-the-icons-faicon "cloud")) 'face `(:height 1.2) 'display '(raise -0.1))
     (propertize (format " · %s" revision) 'face `(:height 0.9)))))

(defun custom-modeline-icon-vc ()
  (when vc-mode
    (cond
     ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
     ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
     (t (format "%s" vc-mode)))))
#+end_src
*** Flycheck Checker Information
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.537507
:END:
This snippet displays information about the results of running Flycheck on the current buffer. It doesn't actually use all-the-icons but it does look nicer, and could use it.
#+NAME: org_mark_mini20.local_20210601T224107.532728
#+begin_src emacs-lisp
(defun custom-modeline-flycheck-status ()
  (let* ((text (pcase flycheck-last-status-change
				 (`finished (if flycheck-current-errors
								(let ((count (let-alist (flycheck-count-errors flycheck-current-errors)
											   (+ (or \.warning 0) (or \.error 0)))))
								  (format "✖ %s Issue%s" count (unless (eq 1 count) "s")))
							  "✔ No Issues"))
				 (`running "⟲ Running")
				 (`no-checker "⚠ No Checker")
				 (`not-checked "✖ Disabled")
				 (`errored "⚠ Error")
				 (`interrupted "⛔ Interrupted")
				 (`suspicious ""))))
	(propertize text
				'help-echo "Show Flycheck Errors"
				'mouse-face '(:box 1)
				'local-map (make-mode-line-mouse-map
							'mouse-1 (lambda () (interactive) (flycheck-list-errors))))))

#+end_src
*** Number of Packages to Update
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224107.536277
:END:

This snippet displays the number of packages that you last needed to update. This currently works every time you refresh your package archive list, so the number can get stale pretty quickly.
#+NAME: org_mark_mini20.local_20210601T224107.533147
#+begin_src emacs-lisp
(defvar powerline/upgrades nil)

(defun powerline/count-upgrades ()
  (let ((buf (current-buffer)))
    (package-list-packages-no-fetch)
    (with-current-buffer "*Packages*"
      (setq powerline/upgrades (length (package-menu--find-upgrades))))
    (switch-to-buffer buf)))
(advice-add 'package-menu-execute :after 'powerline/count-upgrades)

(defun custom-modeline-package-updates ()
  (let ((num (or powerline/upgrades (powerline/count-upgrades))))
	(when (> num 0)
	  (propertize
	   (concat
		(propertize (format "%s" (all-the-icons-octicon "package"))
					'face `(:family ,(all-the-icons-octicon-family) :height 1.2)
					'display '(raise -0.1))
		(propertize (format " %d updates " num)
					'face `(:height 0.9)))
	   'help-echo "Open Packages Menu"
	   'mouse-face '(:box 1)
	   'local-map (make-mode-line-mouse-map
				   'mouse-1 (lambda () (interactive) (package-list-packages)))))))
#+end_src
** The actual mode line
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T224327.730736
:END:
#+NAME: org_mark_mini20.local_20210601T224327.727049
#+begin_src emacs-lisp
(setq mode-line-format '("%e" (:eval
							   (concat
								(custom-modeline-modified)
								(custom-modeline-mode-icon)
								;; (custom-modeline-icon-vc)
								;; (custom-modeline-region-info)
								;; (custom-modeline-flycheck-status)
								))))
#+end_src
