#    -*- mode: org -*-


Archived entries from file /Users/mark/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org


* Jerry Peng setup - no tangle
  :PROPERTIES:
  :ID:       org_mark_mini20.local:20210909T094218.505740
  :END:
** My config
   :PROPERTIES:
   :ID:       org_mark_mini20.local:20210620T111717.677813
   :ARCHIVE_TIME: 2021-09-09 Thu 09:42
   :ARCHIVE_FILE: ~/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org
   :ARCHIVE_OLPATH: Jerry Peng setup - no tangle
   :ARCHIVE_CATEGORY: mode-line
   :END:
 Make mine call his
 #+NAME: org_mark_mini20.local_20210620T111717.656799
 #+begin_src emacs-lisp
(use-package mwb-modeline
  :mwb-load-path "site-lisp/mwb"
  :demand
  :config
  (mwb-modeline-setup)
  )
 #+end_src
 #+end_src

* Centaur setup/ a configured Doom -no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T224030.562027
:header-args: :tangle no
:ARCHIVE_TIME: 2021-09-09 Thu 09:42
:ARCHIVE_FILE: ~/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org
:ARCHIVE_CATEGORY: mode-line
:END:
Makes use of doom-modeline and minions
TODO add to doom-modeline-indent-alist
TODO Racket xp add to flycheck
TODO Set line and column - in plain mode-line?
TODO Lispy in modal
TODO Hardhat as part of read only
** Doom setup
:PROPERTIES:
:ID:       org_mark_mini20.local:20210605T225204.595400
:END:
#+NAME: org_mark_mini20.local_20210602T224030.553632
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :commands doom-modeline-def-modeline doom-modeline
  :custom
  ;; (doom-modeline-icon centaur-icon)
  (doom-modeline-bar nil)
  (doom-modeline-hud t)
  (doom-modeline-minor-modes t)
  (doom-modeline-mu4e nil)

  ;;  from doom-modeline page change to custom
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-unicode-fallback t)
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-workspace-name nil)
  (doom-modeline-lsp t)
  (doom-modeline-irc nil)
  (doom-modeline-buffer-encoding 'nondefault)
  (doom-modeline-indent-info t)

  ;; From actual customization
  (doom-modeline-indent-info t)
  (mode-line-percent-position nil)
  (column-number-mode t)
  (size-indication-mode t)

  :init
  ;; Whether display icons in the mode-line.
  ;; While using the server mode in GUI, should set the value explicitly.
  (setq doom-modeline-icon (display-graphic-p))

  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  (setq doom-modeline-env-enable-python t)
  (setq doom-modeline-env-enable-ruby t)
  (setq doom-modeline-env-enable-perl t)
  (setq doom-modeline-env-enable-go t)
  (setq doom-modeline-env-enable-elixir t)
  (setq doom-modeline-env-enable-rust t)

  ;; What to display as the version while a new one is being loaded
  (setq doom-modeline-env-load-string "...")

  ;; From customisation
  (setq doom-modeline-buffer-file-name-style 'truncate-with-project)


  :bind (:map doom-modeline-mode-map
			  ("C-<f6>" . doom-modeline-hydra/body)))
#+end_src
** Hydra
:PROPERTIES:
:ID:       org_mark_mini20.local:20210603T094224.182401
:END:
Separate out so org file is easier to read
#+NAME: org_mark_mini20.local_20210603T094224.165903
#+begin_src emacs-lisp
(pretty-hydra-define doom-modeline-hydra
  (:title (pretty-hydra-title "Mode Line" 'fileicon "emacs" :face 'all-the-icons-purple :v-adjust -0.1)
		  :color amaranth :quit-key "q")
  ("Icon"
   (("i" (setq doom-modeline-icon (not doom-modeline-icon))
	 "display icons" :toggle doom-modeline-icon)
	("u" (setq doom-modeline-unicode-fallback (not doom-modeline-unicode-fallback))
	 "unicode fallback" :toggle doom-modeline-unicode-fallback)
	("m" (setq doom-modeline-major-mode-icon (not doom-modeline-major-mode-icon))
	 "major mode" :toggle doom-modeline-major-mode-icon)
	("c" (setq doom-modeline-major-mode-color-icon (not doom-modeline-major-mode-color-icon))
	 "colorful major mode" :toggle doom-modeline-major-mode-color-icon)
	("s" (setq doom-modeline-buffer-state-icon (not doom-modeline-buffer-state-icon))
	 "buffer state" :toggle doom-modeline-buffer-state-icon)
	("o" (setq doom-modeline-buffer-modification-icon (not doom-modeline-buffer-modification-icon))
	 "modification" :toggle doom-modeline-buffer-modification-icon)
	("v" (setq doom-modeline-modal-icon (not doom-modeline-modal-icon))
	 "modal" :toggle doom-modeline-modal-icon))
   "Segment"
   (("H" (setq doom-modeline-hud (not doom-modeline-hud))
	 "hud" :toggle doom-modeline-hud)
	("M" (setq doom-modeline-minor-modes (not doom-modeline-minor-modes))
	 "minor modes" :toggle doom-modeline-minor-modes)
	("W" (setq doom-modeline-enable-word-count (not doom-modeline-enable-word-count))
	 "word count" :toggle doom-modeline-enable-word-count)
	("E" (setq doom-modeline-buffer-encoding (not doom-modeline-buffer-encoding))
	 "encoding" :toggle doom-modeline-buffer-encoding)
	("I" (setq doom-modeline-indent-info (not doom-modeline-indent-info))
	 "indent" :toggle doom-modeline-indent-info)
	("L" (setq doom-modeline-lsp (not doom-modeline-lsp))
	 "lsp" :toggle doom-modeline-lsp)
	("P" (setq doom-modeline-persp-name (not doom-modeline-persp-name))
	 "perspective" :toggle doom-modeline-persp-name)
	("G" (setq doom-modeline-github (not doom-modeline-github))
	 "github" :toggle doom-modeline-github)
	("N" (setq doom-modeline-gnus (not doom-modeline-gnus))
	 "gnus" :toggle doom-modeline-gnus)
	("U" (setq doom-modeline-mu4e (not doom-modeline-mu4e))
	 "mu4e" :toggle doom-modeline-mu4e)
	("R" (setq doom-modeline-irc (not doom-modeline-irc))
	 "irc" :toggle doom-modeline-irc)
	("F" (setq doom-modeline-irc-buffers (not doom-modeline-irc-buffers))
	 "irc buffers" :toggle doom-modeline-irc-buffers)
	("S" (progn
		   (setq doom-modeline-checker-simple-format (not doom-modeline-checker-simple-format))
		   (and (bound-and-true-p flycheck-mode) (flycheck-buffer)))
	 "simple checker" :toggle doom-modeline-checker-simple-format)
	("V" (setq doom-modeline-env-version (not doom-modeline-env-version))
	 "version" :toggle doom-modeline-env-version))
   "Style"
   (("a" (setq doom-modeline-buffer-file-name-style 'auto)
	 "auto"
	 :toggle (eq doom-modeline-buffer-file-name-style 'auto))
	("b" (setq doom-modeline-buffer-file-name-style 'buffer-name)
	 "buffer name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'buffer-name))
	("f" (setq doom-modeline-buffer-file-name-style 'file-name)
	 "file name"
	 :toggle (eq doom-modeline-buffer-file-name-style 'file-name))
	("t u" (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)
	 "truncate upto project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-project))
	("t f" (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
	 "truncate from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-from-project))
	("t w" (setq doom-modeline-buffer-file-name-style 'truncate-with-project)
	 "truncate with project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-with-project))
	("t e" (setq doom-modeline-buffer-file-name-style 'truncate-except-project)
	 "truncate except project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-except-project))
	("t r" (setq doom-modeline-buffer-file-name-style 'truncate-upto-root)
	 "truncate upto root"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-upto-root))
	("t a" (setq doom-modeline-buffer-file-name-style 'truncate-all)
	 "truncate all"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-all))
	("t n" (setq doom-modeline-buffer-file-name-style 'truncate-nil)
	 "truncate none"
	 :toggle (eq doom-modeline-buffer-file-name-style 'truncate-nil))
	("r f" (setq doom-modeline-buffer-file-name-style 'relative-from-project)
	 "relative from project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-from-project))
	("r t" (setq doom-modeline-buffer-file-name-style 'relative-to-project)
	 "relative to project"
	 :toggle (eq doom-modeline-buffer-file-name-style 'relative-to-project)))
   "Project Detection"
   (("p f" (setq doom-modeline-project-detection 'ffip)
	 "ffip"
	 :toggle (eq doom-modeline-project-detection 'ffip))
	("p t" (setq doom-modeline-project-detection 'projectile)
	 "projectile"
	 :toggle (eq doom-modeline-project-detection 'projectile))
	("p p" (setq doom-modeline-project-detection 'project)
	 "project"
	 :toggle (eq doom-modeline-project-detection 'project))
	("p n" (setq doom-modeline-project-detection nil)
	 "disable"
	 :toggle (eq doom-modeline-project-detection nil)))
   "Misc"
   (("g" (progn
		   (message "Fetching GitHub notifications...")
		   (run-with-timer 300 nil #'doom-modeline--github-fetch-notifications)
		   (browse-url "https://github.com/notifications"))
	 "github notifications" :exit t)
	("e" (if (bound-and-true-p flycheck-mode)
			 (flycheck-list-errors)
		   (flymake-show-diagnostics-buffer))
	 "list errors" :exit t)
	("O" (if (bound-and-true-p grip-mode)
			 (grip-browse-preview)
		   (message "Not in preview"))
	 "browse preview" :exit t)
	("z h" (counsel-read-setq-expression 'doom-modeline-height) "set height")
	("z w" (counsel-read-setq-expression 'doom-modeline-bar-width) "set bar width")
	("z g" (counsel-read-setq-expression 'doom-modeline-github-interval) "set github interval")
	("z n" (counsel-read-setq-expression 'doom-modeline-gnus-timer) "set gnus interval"))))
#+end_src

** Load the headerline
:PROPERTIES:
:ID:       org_mark_mini20.local:20210611T102455.369561
:END:
#+NAME: org_mark_mini20.local_20210611T102455.355063
#+begin_src emacs-lisp
(use-feature mwb-headline-mode
  :init
  ;; Prevent flash of unstyled modeline at startup
  (unless after-init-time
	(setq doom-modeline--default-format mode-line-format)
	(setq-default mode-line-format nil))
  :config
  (doom-modeline-def-modeline 'main-headline
							  '(major-mode buffer-size minor-modes buffer-position selection-info)
							  '(indent-info buffer-encoding process checker))

  (doom-modeline-def-modeline 'main
							  '(workspace-name window-number modals buffer-info remote-host word-count parrot)
							  '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp input-method process vcs))

  (doom-modeline-def-modeline 'org-src
							  '(window-number modals buffer-info-simple buffer-position word-count parrot selection-info)
							  '(objed-state misc-info debug lsp minor-modes input-method buffer-encoding major-mode process checker))

  ;; The segment does not set the background of the face correctly
  (set-face-attribute 'doom-modeline-buffer-minor-mode nil :inherit 'mode-line)

  (mwb-headline-mode 1))
#+end_src

* Jerry Peng setup - no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210602T212500.390542
:header-args:    :tangle no
:ARCHIVE_TIME: 2021-09-09 Thu 09:42
:ARCHIVE_FILE: ~/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org
:ARCHIVE_CATEGORY: mode-line
:END:
See site-lisp/jerrypnz/jp-modeline.el
Needs Moody. I also removed some
But easier to manipulate - if get slow then go to spaceline
Use his code verbatim

#+NAME: org_mark_mini20.local_20210620T111717.655680
#+begin_src emacs-lisp
(use-package jp-modeline
  :demand
  :config
  (jp-modeline-activate)
  )
#+end_src

* Nano - no tangle
:PROPERTIES:
:ID:       org_mark_mini20.local:20210620T130539.637610
:header-args:    :tangle no
:ARCHIVE_TIME: 2021-09-09 Thu 09:42
:ARCHIVE_FILE: ~/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org
:ARCHIVE_CATEGORY: mode-line
:END:
Let's do the basic
#+NAME: org_mark_mini20.local_20210620T130539.623889
#+begin_src emacs-lisp
(use-package nano-modeline
  :mwb-load-path "fork/nano-modeline"
  :demand
  :config (nano-modeline))
#+end_src

* Packages
  :PROPERTIES:
  :ID:       org_mark_mini20.local:20210909T095206.481461
  :END:
** [[https://github.com/tarsius/moody][Moody]]
   :PROPERTIES:
   :ID:       org_mark_mini20.local:20210909T095144.161479
   :ARCHIVE_TIME: 2021-09-09 Thu 09:51
   :ARCHIVE_FILE: ~/SyncServices/Dropbox/env/emacs.d/init/behaviours/mode-line.org
   :ARCHIVE_OLPATH: Packages
   :ARCHIVE_CATEGORY: mode-line
   :END:
 #+NAME: org_mark_mini20.local_20210602T212500.385625
 #+begin_src emacs-lisp
(use-package moody
  :ensure t
  :disabled
  ;;  Temportary as in jp-modeline
  ;; :disabled

  :config
  (setq x-underline-at-descent-line t)
  ;; (moody-replace-mode-line-buffer-identification)
  ;; (moody-replace-vc-mode)
  )
 #+end_src
