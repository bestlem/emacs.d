#+TITLE Emacs configuration How emacs completes text
#+PROPERTY:header-args :cache yes :tangle yes :comments link

This is completion for text in buffer
** Semantic based
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:98A7F8D2-8847-4551-B366-4440CD34703C
:END:
This looks at the current code and prompts for variables etc
I need something and company seems to be the current one
Add some from jweigley
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_0A6134EA-DC55-4651-ACC8-B1478B5A38F3
 #+begin_src emacs-lisp
 (use-package company
   :ensure t
:demand
   :diminish
   :commands (company-mode company-indent-or-complete-common)

   :hook (after-init . global-company-mode)
   :config
   (define-key company-mode-map [tab]
     '(menu-item "maybe-company-expand" nil
                 :filter (lambda (&optional _)
                           (when (check-expansion)
                             #'company-complete-common))))
   )
#+end_src
** Text expansion
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:15548A48-9E39-4C39-9010-C4B94096DA80
:END:
Looking at all the new stuff I see yasnippet but but emacs has had for many yera several things - see [[https://www.gnu.org/software/emacs/manual/html_mono/autotype.html][Emacs manual for autotyping]]. Also look at tempo and auto-insert(the latter is what new files will have inserted but that does the GNU emacs whole thing I suspect ya snippet is better)
My current view is yasnippet for the templating (old inclue skeleton)
** Yasnippet
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:876C8965-C38A-42AE-956A-3994F872E82D
:END:
I suspect that emacs's inbuilt skeleton can do what I need but there are more examples using yasnippet + Emacs doc is as usual impenetrable until you know how it works,
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_CA0CCF5A-02BB-401E-8186-F16136047A8F
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish (yas-minor-mode)
:demand
  :after company
  :mode ("/\\.emacs\\.d/data/snippets/" . snippet-mode)
  :bind (:map snippet-mode-map
              ("<f5>" . yas-load-snippet-buffer)
              ("C-<f5>" . yas-load-snippet-buffer-and-close)
              :map yas-minor-mode-map
              ("<SPC>" . yas-maybe-expand))

  ;; :bind (:map yas-minor-mode-map
  ;; ("SPC" . mwb-yas-expand)

  ;; :preface
  ;; (defun mwb-yas-expand ()
  ;;   (eval yas-maybe-expand))
  :init
  (setq yas-snippet-dirs (list (mwb-user-emacs-file "data/snippets")))
  :config
  (setq yas-snippet-dirs (list (mwb-user-emacs-file "data/snippets")))
  ;; (use-package yasnippet-snippets
  ;;   :config (yasnippet-snippets-initialize)
  ;;   (message "loaded yasnippets collection")
  ;;   :ensure t)
  (yas-reload-all)
  (yas-global-mode 1)
  (defun company-mode/backend-with-yas (backend)
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends
        (mapcar #'company-mode/backend-with-yas company-backends))

  :hydra (hydra-yasnippet (:color blue :hint nil)
                          "
                ^YASnippets^
  --------------------------------------------
    Modes:    Load/Visit:    Actions:

   _g_lobal  _d_irectory    _i_nsert
   _m_inor   _f_ile         _t_ryout
   _e_xtra   _l_ist         _n_ew
           _a_ll
  "
                          ("d" yas-load-directory)
                          ("e" yas-activate-extra-mode)
                          ("i" yas-insert-snippet)
                          ("f" yas-visit-snippet-file :color blue)
                          ("n" yas-new-snippet)
                          ("t" yas-tryout-snippet)
                          ("l" yas-describe-tables)
                          ("g" yas/global-mode)
                          ("m" yas/minor-mode)
                          ("a" yas-reload-all)))
#+end_src

*** yasnippets collection
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D282CEC9-EFE4-4001-9301-396925A134E0
:END:
There is a package including a lot of snippets.
However there are so many elisp ones that it might be too confusing. Similarly the expansion for org mode is not nice
For loading as yasnippet is on defer we get this and yasnippets' config on eval-after load/ So what order do they load in? I suspect LIFO as yasnippet is delayed. So to get load put the use-package in the "config.

But the expansions are too much so better to copy them as needed and if understood.

** Abbrev
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:4B573BD4-4E53-431B-AE36-3924CE30D9CC
:END:
Simple text replacement. From John Wiegley
Also run the script from https://www.emacswiki.org/emacs/autocorrection_abbrev_defs to load a fix for typos but note I had to edit out the one for i as that will be lowercase in programming.
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_9B504DE4-BB8F-491A-83E8-60EC58B1D93C
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer 5
  :diminish
  :hook
  ((text-mode prog-mode erc-mode LaTeX-mode) . abbrev-mode)
  (expand-load
   . (lambda ()
       (add-hook 'expand-expand-hook 'indent-according-to-mode)
       (add-hook 'expand-jump-hook 'indent-according-to-mode)))
  :config
  (setq abbrev-file-name (mwb-user-emacs-file "data/abbrev.el"))
  (setq save-abbrevs 'silently)
  ;; save abbreviations upon exiting xemacs (someon has copied from an old .emacs
  (setq save-abbrevs t)
  (quietly-read-abbrev-file)
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+END_SRC
** Hippie expand
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7B9126AB-1E4A-4EBB-ACD2-1D01E8F01BC1
:END:
This is another basic emacs thing.
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8B3666B4-3C4A-4546-9A17-9CAB5BC65623
 #+BEGIN_SRC emacs-lisp
 (use-package hippie-exp
   :bind (("M-/"   . hippie-expand)
          ("C-M-/" . dabbrev-completion)))
 #+END_SRC
