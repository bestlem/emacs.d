#+TITLE Emacs configuration How emacs completes text
#+PROPERTY:header-args :cache yes :tangle yes :comments link

This is completion for text in buffer
** Semantic based
This looks at the current code and prompts for variables etc
I need something and company seems to be the current one
Add some from jweigley
 #+begin_src emacs-lisp
 (use-package company
   :ensure t
   :diminish
   :commands (company-mode company-indent-or-complete-common)

   :hook (after-init . global-company-mode)
   :config
   (define-key company-mode-map [tab]
     '(menu-item "maybe-company-expand" nil
                 :filter (lambda (&optional _)
                           (when (check-expansion)
                             #'company-complete-common))))
   )
#+end_src
** Text expansion
Looking at all the new stuff I see yasnippet but but emacs has had for many yera several things - see [[https://www.gnu.org/software/emacs/manual/html_mono/autotype.html][Emacs manual for autotyping]]. Also look at tempo and auto-insert(the latter is what new files will have inserted but that does the GNU emacs whole thing I suspect ya snippet is better)
My current view is yasnippet for the templating (old inclue skeleton)
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :defer 2                             ; need to force the load
  :after company
  :mode ("/\\.emacs\\.d/data/snippets/" . snippet-mode)
  ;; :bind (:map yas-minor-mode-map
  ;; ("SPC" . mwb-yas-expand)

  ;; :preface
  ;; (defun mwb-yas-expand ()
  ;;   (eval yas-maybe-expand))
  :config
  (setq yas-snippet-dirs (list (mwb-user-emacs-file "data/snippets")))
  (yas-reload-all)
  (yas-global-mode 1)
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
  (defun company-mode/backend-with-yas (backend)
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends
        (mapcar #'company-mode/backend-with-yas company-backends))

  :hydra (hydra-yasnippet (:color blue :hint nil)
                          "
                ^YASnippets^
  --------------------------------------------
    Modes:    Load/Visit:    Actions:

   _g_lobal  _d_irectory    _i_nsert
   _m_inor   _f_ile         _t_ryout
   _e_xtra   _l_ist         _n_ew
           _a_ll
  "
                          ("d" yas-load-directory)
                          ("e" yas-activate-extra-mode)
                          ("i" yas-insert-snippet)
                          ("f" yas-visit-snippet-file :color blue)
                          ("n" yas-new-snippet)
                          ("t" yas-tryout-snippet)
                          ("l" yas-describe-tables)
                          ("g" yas/global-mode)
                          ("m" yas/minor-mode)
                          ("a" yas-reload-all))
  )
#+end_src

*** yasnippets collection
There is a package including a lot of snippets.
However there are so many elisp ones that it might be too confusing. Similarly the expansion for org mode is not nice
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :demand
  :config (yasnippet-snippets-initialize)
  (message "loaded yasnippets collection")
  :ensure t)
#+end_src
*** Abbrev
Simple text replacement. From John Wiegley
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :defer 5
  :diminish
  :hook
  ((text-mode prog-mode erc-mode LaTeX-mode) . abbrev-mode)
  (expand-load
   . (lambda ()
       (add-hook 'expand-expand-hook 'indent-according-to-mode)
       (add-hook 'expand-jump-hook 'indent-according-to-mode)))
  :config
  (setq abbrev-file-name (mwb-user-emacs-file "data/abbrev.el") )
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))
  :bind (:map edit-abbrevs-map ("A-s". abbrev-edit-save-buffer) ))
#+END_SRC
*** Hippie expand
This is another basic emacs thing.
 #+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :bind (("M-/"   . hippie-expand)
         ("C-M-/" . dabbrev-completion)))
 #+END_SRC
