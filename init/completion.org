#+TITLE Emacs configuration How emacs completes text
#+PROPERTY:header-args :cache yes :tangle yes :comments link

This is completion for text in buffer
* Semantic based
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:98A7F8D2-8847-4551-B366-4440CD34703C
:END:
This looks at the current code and prompts for variables etc
I need something and company seems to be the current one.
Understandin the order is a bit confusing and this [[https://emacs.stackexchange.com/a/15251/9874][Stackexchnage]] answer helps. Basically test one at a time
Add some from jweigley
** Company
:PROPERTIES:
:ID:       org_mark_2020-10-05T18-36-08+01-00_mini12.local:B1FF068E-6489-4EB1-8990-DA1D3E6262D2
:END:
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_0A6134EA-DC55-4651-ACC8-B1478B5A38F3
 #+begin_src emacs-lisp
(use-package company
  :ensure t
  :demand
  :diminish
  :commands (company-mode company-indent-or-complete-common company-complete)

  :config
  (setq company-dabbrev-ignore-case t
        company-dabbrev-ignore-case 'keep-prefix
        ;; Dabbrev all code buffers together.
        company-dabbrev-code-other-buffers t
        ;; Only search same major mode buffers.
        company-dabbrev-other-buffers t
        ;; Don't take too much time searching for matches.
        company-dabbrev-code-time-limit 0.0005
        company-dabbrev-time-limit 0.0005)
  (setq company-show-numbers t)
  (setq company-lighter-base "/"
        company-tooltip-align-annotations t
        company-echo-delay 1
        company-selection-wrap-around t
        company-idle-delay 0.05;; company-idle-delay 0.05
        company-tooltip-minimum-width 30
        company-minimum-prefix-length 1)
  (global-company-mode t)               ; don't put in after-init hook
                                        ; as we are deferred
  ;; (define-key company-mode-map [tab]
  ;;   '(menu-item "maybe-company-expand" nil
  ;;               :filter (lambda (&optional _)
  ;;                         (when (check-expansion)
  ;;                           #'company-complete-common))))
  (bind-key "`" 'company-abort company-active-map)
  (when (>= emacs-major-version 27)
    (use-package company-posframe :ensure t :diminish :config (company-posframe-mode 1)))
  (use-package company-prescient :ensure t :diminish :config (company-prescient-mode 1))

  :init
  ;; jojojames to add a backend with yasnippet in a :with
  (defun j|company-backend-in-backends (b)
    "Check if backend B is already in `company-backends'."
    (if (member b company-backends)
        t
      (let ((in-backend nil))
        (dolist (backend company-backends)
          (when (and
                 (consp backend)
                 (member b backend))
            (setq in-backend t)))
        in-backend)))

  (defun j|company-push-backend (backend &optional local append)
    "Adds backend BACKEND to company mode if it's not already in the list of backends.
IF APPEND, add to end of list."
    (when local
      (make-local-variable 'company-backends))
    (unless (j|company-backend-in-backends backend)
      (if append
          (setcdr (last company-backends) (list backend))
        (push backend company-backends))
      (j|company-merge-backends)))

  (defun merge-backend-with-company-backends (backend-to-merge)
    "Merges a backend with every backend in company-backends.
BACKEND-TO_MERGE will only be merged if it's not already in the current backend.

Merging `company-yasnippet' to `company-capf' will yield
'\(company-capf :with company-yasnippet\)."
    (setq company-backends
          (mapcar (lambda (backend)
                    (cond
                     ((and (listp backend)
                           (member backend-to-merge backend))
                      backend)
                     (:else
                      (append (if (consp backend)
                                  backend
                                (list backend))
                              (if (and (listp backend)
                                       (member :with backend))
                                  `(,backend-to-merge)
                                `(:with ,backend-to-merge))))))
                  company-backends)))

  (defun j|company-merge-backends ()
    "Merge common backends."
    (interactive)
    (merge-backend-with-company-backends 'company-yasnippet)
    (merge-backend-with-company-backends 'company-dabbrev-code)))
#+end_src
*** DONE Add generic methods
CLOSED: [2020-02-08 Sat 00:21]
:PROPERTIES:
:ID:       org_mark_2020-02-07T11-15-13+00-00_mini12:0017C0B5-B14B-4581-A36B-2B54CCBDDF39
:END:
j Add| methods from jojojames being generalisation of common yasnippet. Provides a function rather than the code used in yasnippet. Would be useful if adding other backends after yasnippet (as shown before I committed the change I need to see the issue to understand his code)

* Text expansion
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:15548A48-9E39-4C39-9010-C4B94096DA80
:END:
Looking at all the new stuff I see yasnippet but but emacs has had for many yera several things - see [[https://www.gnu.org/software/emacs/manual/html_mono/autotype.html][Emacs manual for autotyping]]. Also look at tempo and auto-insert(the latter is what new files will have inserted but that does the GNU emacs whole thing I suspect yasnippet is better)
My current view is yasnippet for the templating (old include skeleton)
** Yasnippet
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:876C8965-C38A-42AE-956A-3994F872E82D
:END:
I suspect that emacs's inbuilt skeleton can do what I need but there are more examples using yasnippet + Emacs doc is as usual impenetrable until you know how it works.

#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_CA0CCF5A-02BB-401E-8186-F16136047A8F
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :demand t
  :after company
  :mode ("/\\.emacs\\.d/data/snippets/" . snippet-mode)
  :bind (:map snippet-mode-map
              ("<f5>" . yas-load-snippet-buffer)
              ("C-<f5>" . yas-load-snippet-buffer-and-close)
              ;; :map yas-minor-mode-map
              ;; ("<SPC>" . yas-maybe-expand)
              )
  ;; :bind (:map yas-minor-mode-map
  ;; ("SPC" . mwb-yas-expand)

  ;; :preface
  ;; (defun mwb-yas-expand ()
  ;;   (eval yas-maybe-expand))
  :config
  (setq yas-snippet-dirs (list (mwb-user-emacs-file "data/snippets")))
  ;; Use define key as :bind needs a function but don't use as don't auto expand
  ;;(define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)

  ;; (use-package yasnippet-snippets
  ;;   :config (yasnippet-snippets-initialize)
  ;;   (message "loaded yasnippets collection")
  ;;   :ensure t)
  (yas-reload-all)
  (yas-global-mode 1)

  ;; Add to company
  (j|company-merge-backends)


  :hydra (hydra-yasnippet (:color blue :hint nil)
                          "
                ^YASnippets^
  --------------------------------------------
    Modes:    Load/Visit:    Actions:

   _g_lobal  _d_irectory    _i_nsert
   _m_inor   _f_ile         _t_ryout
   _e_xtra   _l_ist         _n_ew
           _a_ll
  "
                          ("d" yas-load-directory)
                          ("e" yas-activate-extra-mode)
                          ("i" yas-insert-snippet)
                          ("f" yas-visit-snippet-file :color blue)
                          ("n" yas-new-snippet)
                          ("t" yas-tryout-snippet)
                          ("l" yas-describe-tables)
                          ("g" yas/global-mode)
                          ("m" yas/minor-mode)
                          ("a" yas-reload-all)))
#+end_src

*** yasnippet collection
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D282CEC9-EFE4-4001-9301-396925A134E0
:END:
There is a package including a lot of snippets.
However there are so many elisp ones that it might be too confusing. Similarly the expansion for org mode is not nice
For loading as yasnippet is on defer we get this and yasnippets' config on eval-after load/ So what order do they load in? I suspect LIFO as yasnippet is delayed. So to get load put the use-package in the config.

But the expansions are too much so better to copy them as needed and if understood.

** Abbrev
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:4B573BD4-4E53-431B-AE36-3924CE30D9CC
:END:
Simple text replacement. From John Wiegley
Also run the script from https://www.emacswiki.org/emacs/autocorrection_abbrev_defs to load a fix for typos but note I had to edit out the one for i as that will be lowercase in programming.
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_9B504DE4-BB8F-491A-83E8-60EC58B1D93C
#+BEGIN_SRC emacs-lisp
(use-package abbrev
  :diminish
  :hook
  ((text-mode prog-mode erc-mode LaTeX-mode) . abbrev-mode)
  (expand-load
   . (lambda ()
       (add-hook 'expand-expand-hook 'indent-according-to-mode)
       (add-hook 'expand-jump-hook 'indent-according-to-mode)))
  :config
  (setq abbrev-file-name (mwb-user-emacs-file "data/abbrev.el"))
  (setq save-abbrevs 'silently)
  ;; save abbreviations upon exiting xemacs (someon has copied from an old .emacs
  (setq save-abbrevs t)
  (quietly-read-abbrev-file)
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file)))
#+END_SRC
** Hippie expand
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7B9126AB-1E4A-4EBB-ACD2-1D01E8F01BC1
:END:
This is another basic emacs thing.
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8B3666B4-3C4A-4546-9A17-9CAB5BC65623
 #+BEGIN_SRC emacs-lisp
 (use-package hippie-exp
   :bind (("M-/"   . hippie-expand)
          ("C-M-/" . dabbrev-completion)))
 #+END_SRC
