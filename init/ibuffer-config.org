#+TITLE Emacs configuration - ibuffer config
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content

This file is loaded sureing use-package :config ie after ibuffer loaded

* Extra modes used by other stuff in :config
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:78230D42-5550-4C41-9A10-B216AC3755B4
:END:
  This speeds up the load time
  #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_168F152C-4EAF-41D2-9110-55B1751912AA
  #+begin_src emacs-lisp
  (use-package ibuffer-vc :ensure t) ; need as some config code depends on this
  (require 'ibuf-ext) ; fiddle the mess to get an internal variable setup
  #+end_src

* Unused Filters
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:DDF85788-36D7-495C-B224-6405A6F7F45E
:END:

** A filter not certain if used
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:F7C1B140-AF61-4E91-AD84-FD0A1525E79D
:END:
  #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A5A7543E-5271-488C-A83B-F274165EB383
  #+begin_src emacs-lisp
  (define-ibuffer-filter name-not
      "Negated buffer name match."
	(:description "buffer name not"
	 :reader (read-from-minibuffer "Exclude buffers (regexp): "))
	(not (string-match qualifier (buffer-name buf))))
#+end_src
** Unknown
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A49F17AB-2E17-4E3C-AA96-934B536B6D7F
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_C1F977A6-01FB-4389-A955-D80B2FC3A744
#+begin_src emacs-lisp
(define-ibuffer-filter dir
	"Toggle current view to buffers with dir QUALIFIER."
  (:description "directory" :reader (read-from-minibuffer "Filter by dir (regexp): "))
  (ibuffer-awhen (buffer-file-name buf)
	(string= qualifier (file-name-directory it))))
#+end_src
* Filters
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:76AC61C6-D8F7-4A47-84F3-C3EEDAA9AF21
:END:
** Filter before vc and directories
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:24E37B2D-EE33-4348-8C79-3F89D7837917
:END:
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_2B1FC416-BC5B-4219-BF87-CDD2E7D11356
 #+begin_src emacs-lisp
(defvar mwb-ibuffer-filters-top
  '(("Aquamacs" (or
		 (filename . "^/Applications/Aquamacs")
		 (filename . "/Library/Preferences/Aquamacs Emacs/Packages/elpa")))
    ("Dired" (mode . dired-mode))
    ("Emacs" (or
	      (name . "^\\*dashboard\\*$")
	      (name . "^\\*scratch\\*$")
	      (name . "^\\*Messages\\*$")
	      (name . "^\\*Backtrace\\*$")
	      (name . "^\\*Buffer L\\*$")
	      (name . "^\\*Warnings\\*$")
	      (name . "^\\*deadgrep")
	      (name . "\\*\\(Echo\\|Minibuf\\)")
	      (name . "^\\*Personal Keybindings\\*$")
	      (name . "^\\*Pp Eval Output\\*$")
	      (name . "^\\*Help\\*$")
	      (name . "^\\*Apropos\\*$")
	      (name . "^\\*info\\*$")
	      (name . "^\\*helpful")
	      (name . "^\\*\\(Man [0-9]?\\)")
	      (mode . custom-mode)
	      (name . "^\\*Customize")))
    ("Commands"
     (or
      (mode . shell-mode)
      (mode . eshell-mode)
      (mode . term-mode)
      (mode . compilation-mode)))
    ("GNUs" (or
	     (mode . message-mode)
	     (mode . bbdb-mode)
	     (mode . mail-mode)
	     (mode . gnus-group-mode)
	     (mode . gnus-summary-mode)
	     (mode . gnus-article-mode)
	     (name . "^\\.bbdb$")
	     (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
	     (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
	     (name . "\\(Original Article\\|canonical address\\|extract address\\)")
	     (name . "^\\.newsrc-dribble")))
    ("Magit"
     (or
      (mode . magit-status-mode)
      (mode . magit-log-mode)
      (name . "^\\*magit")
      (name . "git-monitor")))



    )
  "Fixed filter definitions for ibuffer up front")
#+end_src
** Filter for what is left
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:6DFA2B47-6ABC-421E-A9BE-010DF7D95B41
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_3137778E-3ABB-4FEB-9243-7FCE7B7F0714
#+begin_src emacs-lisp
(defvar mwb-ibuffer-filters-bottom
  '(("VC"
	 (name . "^\\*\\(vc\\|log\\)-?"))
	("Helm" (mode . helm-major-mode))
	("Special buffers"
	 (name-not . "compilation")
	 (name . "^\\*.*\\*$"))
	("EWW Reading"
	 (mode . eww-mode)))
  "Fixed filter definitions for ibuffer.")
#+end_src
** Generate by directory
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:44444A37-2F58-4EA6-B3B8-15B997CA76FA
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_05543859-CB44-45CC-BA74-D4095032D649
#+begin_src emacs-lisp
(cl-defun gk-ibuffer-generate-filter-groups-by-dir ()
  "Create a set of ibuffer filter groups based on the dirs of buffers."
  (let ((dirs (ibuffer-remove-duplicates
			   (delq nil (mapcar (lambda (buf)
								   (when-let (bufnam (buffer-file-name buf))
									 (file-name-directory bufnam)))
								 (buffer-list))))))
	(mapcar (lambda (dir) (cons (concat "Directory: " dir) `((dir . ,dir)))) dirs)))
#+end_src

** Put the buffer together
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:20ACDF50-A967-4095-8541-923E518371C1
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_89EF4423-0D2F-4B37-B79D-E37FCBABF47B
#+begin_src emacs-lisp
(define-advice ibuffer-update (:before (&rest args) autogroups)
  "Group related buffers together using ‘ibuffer-vc’ and ‘dir’,
and special ones sepatarely."
  (ignore args)
  (setf ibuffer-filter-groups
		(append
		 mwb-ibuffer-filters-top
		 (ibuffer-vc-generate-filter-groups-by-vc-root)
		 (gk-ibuffer-generate-filter-groups-by-dir)
		 mwb-ibuffer-filters-bottom)))
#+end_src
** Hydra
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7CD44DD7-1332-4C1C-8819-136859BF8AA8
:END:
   From [[https://github.com/abo-abo/hydra/wiki/Ibuffer][Hydra Wiki]] mode hydra
   #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A6D8D69A-A7A1-431C-BC16-A34732A92A60
   #+begin_src emacs-lisp
(defhydra major-mode-hydras/ibuffer-mode (:color red :hint nil)
  "
   ^Mark^         ^Actions^         ^View^          ^Select^              ^Navigation^
   _m_: mark      _D_: delete       _g_: refresh    _q_: quit             _k_:   ↑    _h_
   _u_: unmark    _s_: save marked  _S_: sort       _TAB_: toggle         _RET_: visit
   _*_: specific  _a_: all actions  _/_: filter     _o_: other window     _j_:   ↓    _l_
   _t_: toggle    _._: toggle hydra _H_: help       C-o other win no-select
   "
  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)
  ("t" ibuffer-toggle-marks)

  ("D" ibuffer-do-delete)
  ("s" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("S" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)
  ("H" describe-mode :color blue)

  ("h" ibuffer-backward-filter-group)
  ("k" ibuffer-backward-line)
  ("l" ibuffer-forward-filter-group)
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)

  ("TAB" ibuffer-toggle-filter-group)

  ("o" ibuffer-visit-buffer-other-window :color blue)
  ("q" (lambda () (interactive) (quit-window 4)) :color blue)
  ("." nil :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5
				     :after-exit (major-mode-hydras/ibuffer-mode/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))

(defhydra hydra-ibuffer-action (:color teal :columns 4
                                       :after-exit
                                       (if (eq major-mode 'ibuffer-mode)
					   (major-mode-hydras/ibuffer-mode/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))

(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))

(defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))
   #+end_src
