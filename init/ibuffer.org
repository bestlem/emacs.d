#+TITLE Emacs configuration - ibuffer
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Buffers
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:FADBA799-7985-455A-8BA0-5E6A6CC2C3DB
:END:

Ibuffer seems to be the one.
I would note that this is where use-package and other code reasons to keep together conflict with literate programming. Current use literate-programming but I suspect noweb is the way here once I have a working setup. use-package benefit includes a total fail if issue.
Current attempt is a halfway. Instead of noweb I call a new org file. This keeps all the code in org files as valid lisp. At some stage for e.g. hydra it might make sense for noweb as fragments are not valid lisp. An alternative is put other code in separate use-package bits with :defer t as per nasy.moe

There is some comment on internet that other things in ibuffer are a mess. I would say that the list of grouping is another.

This setup from [[https://emacs.nasy.moe/#org2ffc7b4][nasy.moe]] and others for the default and [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]] for the grouping

However much of the same code appears in many places so I don't know the real source

* Load package
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:1EDC2A71-58BD-4635-B02F-727C8677DC78
:END:
   The overall load.
   #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8FD96F98-B122-4E26-BC6D-62735E12E33F
   #+begin_src emacs-lisp
(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)
         ("A-M-b" . ibuffer)
         :map ibuffer-mode-map
         ("?" . major-mode-hydras/ibuffer-mode/body))
  :init
  (setq ibuffer-expert t
        ibuffer-old-time 48
        ibuffer-show-empty-filter-groups nil
        ibuffer-default-sorting-mode 'filename/process)
  :config
  (use-package ibuffer-vc :ensure t)   ; need as some config code depends on this
  (require 'ibuf-ext)                  ; fiddle the mess to get an internal variable setup
  (mwb-init-load "init/ibuffer_config")
  :hook (ibuffer . major-mode-hydras/ibuffer-mode/body))
   #+end_src

* Display functions
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D26DEC0A-8956-4075-97A3-981E315788BB
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_30D55E18-A0EB-4BEC-A9AE-DC22DE1E317A
#+begin_src emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline nil)
  (let ((bs (buffer-size)))
	(cond ((> bs 1e6) (format "%7.1fMB" (/ bs 1e6)))
		  ((> bs 1e3) (format "%7.1fkB" (/ bs 1e3)))
		  (t          (format "%7d  " bs)))))

(setq ibuffer-formats
	  '((mark modified read-only vc-status-mini " "
			  (name 30 30 :left :elide)
			  " "
			  (size-h 9 -1 :right)
			  " "
			  (mode 10 10 :left :elide)
			  " "
			  (vc-status 10 10 :left)
			  " "
			  vc-relative-file)))
  #+end_src

* Groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:1256BA3D-288D-4B3D-B06D-1474969EF405
:END:
This is from  [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]]

** Collapse buffer groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:05D42CAD-2C1C-4ABA-97A9-032C0C4F23DB
:END:
*** Choose the groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:29EEF179-59EF-4590-A610-25E7DF12014D
:END:
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_77968D6B-1BBA-4161-B6E1-B81A674421AD
 #+begin_src emacs-lisp
(setq gk-ibuffer-collapsed-groups
      (list
       "Special buffers"
       "Dired"
       "Emacs internal"
       "EmacsMac"
       "Aquamacs"
       "Emacs Documentation"
       "Help"
       "GNUs"
       "Magit"
       "Custom"
       "Helm"
       ;; "Special buffers"
       "EWW Reading"
       "VC"))
#+end_src
*** Do the collapsing
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:E192D834-8E4A-43CF-9F53-EA58B15D65DA
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_6423311D-14C1-4B74-8260-3839A650AB57
#+begin_src emacs-lisp
(define-advice ibuffer (:after (&rest args) gk-hidden-groups)
  "Hide groups in ‘gk-ibuffer-collapsed-groups’."
  (ignore args)
  (save-excursion
	(dolist (group gk-ibuffer-collapsed-groups)
	  (ignore-errors
		(ibuffer-jump-to-filter-group group)
		(ibuffer-toggle-filter-group)))))
#+end_src
*** Add the hook for the grouping
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:AA7E5412-2496-4BAC-AE50-D65C6DA0B6F9
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A7D37C41-4530-4DD6-871B-B2B828F66B19
#+begin_src emacs-lisp
(cl-defun gk-ibuffer-hook ()
   (unless (eq ibuffer-sorting-mode 'alphabetic)
	 (ibuffer-do-sort-by-filename/process))
   (ibuffer-update nil t))

(add-hook 'ibuffer-hook 'gk-ibuffer-hook)
	#+end_src

