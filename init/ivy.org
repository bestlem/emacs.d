#+TITLE Emacs configuration How emacs completes itself
#+PROPERTY:header-args :cache yes :tangle yes :comments link

* Ivy
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:064B90CD-F13F-4BB4-B46E-49B8F0354D54
:END:
Start with a small setup as I lost track but some of it is needed.

This is the completion tools
Take some from John Wiegley
Note takes time to load
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_9D67023B-7598-49E4-8C6E-F9DF857A30F2
#+begin_src emacs-lisp
(use-package ivy
  :ensure t
  :diminish
  :bind (("C-x b" . ivy-switch-buffer)
         ("H-b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("M-H" . ivy-resume))
  :bind (:map ivy-minibuffer-map
              ("<tab>" . ivy-alt-done)
              ("SPC" . ivy-alt-done-or-space)
              ("C-d" . ivy-done-or-delete-char)
              ("C-i" . ivy-partial-or-done)
              ("C-r" . ivy-previous-line-or-history)
              ("M-r" . ivy-reverse-i-search)

              ("<C-return>" . ivy-immediate-done)
              ("C-<f18>" . ivy-next-line) ;c-ins
              ; emacs complains about this due to mapping ESC here. ESC map is
              ; the M- map so can't use it as a key
              ;; ("<ESC>" . minibuffer-keyboard-quit)

              ;;  following should already be in map
              ("M-n" . ivy-next-history-element)
              ("M-p" . ivy-previous-history-element)
              )
  :bind (:map ivy-switch-buffer-map
              ("C-k" . ivy-switch-buffer-kill))

  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; Do not show ./ amd ../ at top
  ;; https://emacs.stackexchange.com/a/40540/9874
  (setq ivy-extra-directories '())
  ;; Show #/total when scrolling buffers
  (setq ivy-count-format "%d/%d ")
  :preface
  (defun ivy-done-or-delete-char ()
    (interactive)
    (call-interactively
     (if (eolp)
         #'ivy-immediate-done
       #'ivy-delete-char)))

  (defun ivy-alt-done-or-space ()
    (interactive)
    (call-interactively
     (if (= ivy--length 1)
         #'ivy-alt-done
       #'self-insert-command)))

  (defun ivy-switch-buffer-kill ()
    (interactive)
    (debug)
    (let ((bn (ivy-state-current ivy-last)))
      (when (get-buffer bn)
        (kill-buffer bn))
      (unless (buffer-live-p (ivy-state-buffer ivy-last))
        (setf (ivy-state-buffer ivy-last)
              (with-ivy-window (current-buffer))))
      (setq ivy--all-candidates (delete bn ivy--all-candidates))
      (ivy--exhibit)))

  ;; This is the value of `magit-completing-read-function', so that we see
  ;; Magit's own sorting choices.
  (defun my-ivy-completing-read (&rest args)
    (let ((ivy-sort-functions-alist '((t . nil))))
      (apply 'ivy-completing-read args))))
#+end_src

* Ivy posframe
:PROPERTIES:
:ID:       org_2020-12-02+00-00:9671A889-905C-45B8-9B40-F40DE02B9925
:END:
#+NAME: org_2020-12-02+00-00_36E0112E-FDE9-4FEB-87E9-19EF7B62A776
#+begin_src emacs-lisp
;; Show ivy frame using posframe
(when (>= emacs-major-version 27)
  (use-package ivy-posframe
    :ensure t
    :after ivy
    :init
    (setq ivy-posframe-display-functions-alist
		  '((swiper . ivy-display-function-fallback)
			(swiper-isearch . ivy-display-function-fallback)
			;; (complete-symbol . ivy-posframe-display-at-point)
			(t . ivy-posframe-display)
			;; (t . ivy-display-function-fallback)
			))
    ;; (ivy-posframe-mode 1)

    :config
	(setq ivy-posframe-border-width 1
		  ivy-posframe-hide-minibuffer t
		  ivy-posframe-min-width 100
		  ivy-posframe-min-height 10
		  ivy-posframe-parameters '((alpha 100 100)
									(max-width . 140)
									(left-fringe . 10)
									(right-fringe . 10)))
    (ivy-posframe-mode)))
#+end_src
* Ivy hydra
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:6826257A-FB43-4551-9B23-C99DA1A1947C
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A70BDBE1-B195-4AC5-A852-D68DE552C579
#+begin_src emacs-lisp :
(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))
#+end_src
* Ivy rich all the icons
:PROPERTIES:
:ID:       org_mark_mini20.local:20210610T180145.175955
:END:
#+NAME: org_mark_mini20.local_20210610T180145.157654
#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :ensure t
  :unless *aquamacs*
  :after (ivy-rich ivy-prescient)
  :config
  (setq all-the-icons-ivy-rich-icon-size 0.8)
  (all-the-icons-ivy-rich-mode 1)
  )
#+end_src
* Ivy rich
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:F5A59AEA-8733-49B8-9EFF-C93F935CC468
:END:
More friendly interface for ivy
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_29D787D4-65EA-4C99-9F6F-30C2667174CD
#+begin_src emacs-lisp :
(use-package ivy-rich
  :after ivy counsel  all-the-icons-ivy-rich
  :unless *aquamacs*
  :demand t
  :ensure t
  :config
  (ivy-rich-mode 1)
  (setq ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t
        ivy-rich-path-style 'abbrev))
#+end_src

* Swiper
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:5C40100D-4B11-4D14-A0F9-E508AE4C1D4C
:END:
Replace isearch
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_BD7AD456-5157-41F0-BFF1-A6FF7747F2EA
#+begin_src emacs-lisp :
(use-package swiper
  :after ivy
  :ensure t
  :bind (("C-s" . swiper-isearch)
         ("C-r" . swiper-isearch-backward))
  :config (setq swiper-stay-on-quit t) ; https://emacs.stackexchange.com/questions/55675/escape-swiper-even-when-match-is-required
  )
#+end_src

** Recentre
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:539EBB08-67B6-4B09-983D-E4EF742C8EAD
:END:
	   From [[http://pragmaticemacs.com/emacs/dont-search-swipe/][Pragmatic emacs]] advise swiper to recenter on exit (ivy-display-style defaults to fancy)
	   #+begin_src emacs-lisp
       (defun bjm-swiper-recenter (&rest args)
         "recenter display after swiper"
         (recenter))
       (advice-add 'swiper :after #'bjm-swiper-recenter)
	   #+end_src
*** TODO Aquamacs
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:C3ABE1A8-82F1-450A-951A-C84155C819C9
:END:
Need to integrate with command FG etc (note thet are separate to C-s) although has been useful top be separate

* Counsel
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:C41D57FA-BA5C-47DB-A443-79E048D2DD9C
:END:
Improve many emacs functions
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_B21800D8-545E-465D-9D90-154F944E30F5

#+NAME: org_2020-12-02+00-00_437D6838-DCA0-4F08-B895-A55F6C21021B
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :demand
  :diminish
  :after ivy
;;;  Using mode means these aren't needed?
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-x C-r" . counsel-recentf)
         ;; ("<f1> f" . counsel-describe-function)
         ;; ("<f1> v" . counsel-describe-variable)
         ;; ("<f1> l" . counsel-find-library)
         ("C-<f18>" . counsel-yank-pop) ; C-ins
                                        ; ("<f2> i" . counsel-info-lookup-symbol)
                                        ; ("<f2> u" . counsel-unicode-char)
         ("M-i" . counsel-imenu)
         ("C-c g" . counsel-git-grep) ; well deadgrep does that
         ("C-c j" . counsel-git)
                                        ;("C-c k" . counsel-ag)
         ("A-<f4>" . counsel-rg) ; deadgrep much better
         ("C-x l" . counsel-locate)
         :map minibuffer-local-map
         ("C-r" . counsel-minibuffer-add))
  :config
  (if (executable-find "ripgrep")
      ;; use ripgrep instead of grep because it's way faster
      (setq counsel-grep-base-command
			"ripgrep  -M 120 --no-heading --line-number --color never '%s' %s"
			counsel-rg-base-command
			"ripgrep -i -M 120 --no-heading --line-number --color never %s .")
    (warn "\nWARNING: Could not find the ripgrep executable. It is recommended you install ripgrep."))
  (setq counsel-find-file-at-point t)
  :config
  (counsel-mode 1))
	 #+end_src
** prescient
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:AF2C3A97-2934-4856-9FB3-B831C48B5ADC
:END:
[[https://github.com/raxod502/prescient.el][Prescient]]  is a library which sorts and filters lists of candidates,
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_378BD735-5E0C-4075-9ED5-A69FC65B29E4
#+begin_src emacs-lisp
(use-package prescient
  :demand
  :ensure t
  :config
  (prescient-persist-mode t))
(use-package ivy-prescient
  :ensure t
  :demand
  :after (counsel prescient)
  :config (ivy-prescient-mode 1)
  )
#+end_src
