#+TITLE:  Keys
#+AUTHOR: Mark Bestley
#+EMAIL:  emacs@bestley.co.uk
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: overview

* Table of Contents                                                   :TOC:3:
:PROPERTIES:
:ID:       org_2020-12-08+00-00:43A5679B-7627-4459-9E27-050BEFAB7B84
:VISIBILITY: all
:END:
- [[#global-key-bindings-musings][Global key bindings musings]]
  - [[#how-to-bind][How to bind]]
  - [[#keyboard-thoughts][Keyboard Thoughts]]
- [[#mac-modifier-key-bindings][Mac modifier key Bindings]]
- [[#key-based-code][Key based code]]
  - [[#which-key][Which Key]]
  - [[#display-keys-in-help-and-menus][Display keys in help and menus]]
  - [[#freekeys][FreeKeys]]
  - [[#log-keys][Log keys]]
- [[#bindings-grouped-by-topic][Bindings grouped by topic]]
  - [[#homeendpaging][Home/End/Paging]]
  - [[#cua-bindings][Cua bindings]]
  - [[#scrolling][Scrolling]]
  - [[#deleting-and-return][Deleting and return]]
  - [[#undo][undo]]
  - [[#old-bindings][Old bindings]]
  - [[#quickrun][quickrun]]
  - [[#file-actions][File actions]]
  - [[#buffer-related][Buffer related]]
- [[#single-key-bindings][Single key bindings]]
  - [[#function-keys][Function keys]]
  - [[#hyper-key-bindings][Hyper key bindings]]
  - [[#other][Other]]
  - [[#toggle-treemode-as-needed-often][Toggle treemode as needed often]]
  - [[#control-x-binding][Control x binding]]
- [[#mouse][Mouse]]
  - [[#imenu][iMenu]]
  - [[#macos-mouse][Macos mouse]]
- [[#hydra][Hydra]]
  - [[#leader-keys][Leader keys]]
  - [[#hydra-transpose][Hydra transpose]]
  - [[#goto][Goto]]
  - [[#search][Search]]
  - [[#kitchin-hydras][Kitchin hydras]]

* Global key bindings musings
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A2A04D70-D20C-4D64-8C03-FE52D779E97B
:END:
This file manages my global  key bindings except in Aquamacs they are not global.
Other files might have defined global keys e.g. to start particular modes,  but in general we want them here.

It is debateable wether we put bindings here or next to the functions

** How to bind
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D8A384B2-3A02-4CDA-9A56-AC71DA2150F9
:END:
The obvious is global key but......Aquamacs has added a map or two mainly to provide the command keys e.g. ⌘S so [[https://www.emacswiki.org/emacs/AquamacsFAQ#toc13][Aquamacs FAQ]]  suggest (define-key osx-key-mode-map (kbd "H-t") 'treemacs) to alter the OSX map.

This [[https://stackoverflow.com/a/27441815/151019][Stack Overlow answer]] suggests use of bind-key  if we do not want to be overridden.

Also see [[https://github.com/noctuid/general.el][General package]] but see [[https://github.com/noctuid/general.el/issues/10][comparison]] with bind-key from use package so stick to bind.

I use mac-key-code for non Aquamacs Mac. I then noticed two issues A-s fails in Org src and the some keys randomly became odd chars.
e.g. A-c becomes ¢ well not exactly that . which-key shows the correct key. This required learning a lot of rubbish I can forget now. First is due to order of keymaps and second is iso-transl which messes the key translation..

There is a general idea as in the SO answer quoted above as to put your keys into a minor mode map that you can turn and off. Aquamacs comment for osx-map-mode suggests the same. But there is a mix here as I want to be able to override my keys.  As there is no real use of Alt key in Emacs it is an independent map (except for the iso-transl mess)

Aquamacs works with the A-s issue as it loads osx-mode-map early. I loaded mac-kep-map quite early but it is after org-mode so I can't override that key. In both cases visual-line-mode is loaded first then Aquamacs has tabbar and keyboard emulation and mac-key-mode has isearch and then outline and org modes. Note that Aquamacs does at start of osxkey-mode mess with isearch (ah does that affect swiper)

So quick hack is put mac-key-mode before org-mode, so has to be in config which is better than behaviour logically - and the org setup for keybindings is simple so does not need org mode.
*** Key representation
:PROPERTIES:
:ID:       org_mark_2020-02-09T19-36-52+00-00_mini12:AB151351-1B6E-4D39-AF9D-74CDDA7DB10E
:END:
There is a difference between bind and general in how they report the bindings. general always puts the string through kbd bind does not. The difference is in getting the description. Aquamacs is patched to show the Apple key symbols but bind only shows them if the string is passed through kbd. This can be patched. However Aquamacs is not fully patched, if an of the key is in <> e.g. <f1> then it does not try to reformat the string.

*** TODO Replace the key definition functions with a mwb one that can switch between global-key and the Aquamacs way
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:8C7E2431-4A95-4BA4-B084-93325BB68F14
:END:
Use bind-key

??? Oct 2020 I don't understand

*** Emacs versions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210819T115433.266731
:END:
GNUemacs, Aquamacs  and macport don't agree on mouse 4 and 5 - GNU and Aquamacs  bind 3 to 4 and has no 5
** Keyboard Thoughts
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:68EED975-E28B-4FD7-8E78-BA5A8E260CD1
:END:

*** History
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:DC0B71B3-E9A2-46D6-A0C9-5C542FD5EDC1
:END:
I used Teletypes at some stage in the beginning or at least very clicky keyboards. My first professional and heavy programming was in APL so I am used to odd layouts (IBM 3279 although this [[https://www.google.com/imgres?imgurl=https%3A%2F%2Flive.staticflickr.com%2F1671%2F25859890091_f7e9173891_b.jpg&imgrefurl=https%3A%2F%2Fwww.flickr.com%2Fphotos%2F22368471%40N04%2F25859890091&docid=ZLVoX24MY-4ACM&tbnid=ZUP2S6AC-ynJIM%3A&vet=10ahUKEwi32JONrMDmAhVOQhUIHV8UCAEQMwhOKAAwAA..i&w=1023&h=445&bih=872&biw=1298&q=apl%20keyboard&ved=0ahUKEwi32JONrMDmAhVOQhUIHV8UCAEQMwhOKAAwAA&iact=mrc&uact=8][one]] looks more like it) and clicky keys. My DOS editor was microemacs so learn some of the control xs xc and c-ae.

This is really the main piece of Emacs customization I have done over the years. I do not have full history before 2008 which is for Aquamacs and by that stage I had forgotten what all the key definitions were. The rcs log was from 2002 and that was 1.1.1.17 so quite a bit there but even that would have been a conversion to OSX, from my work using NT and Sun (Linux was all server) and a NeXT PC.

I then read about keyboards especially from Xah Lee and came across the [[http://xahlee.info/kbd/i/NeXT_adb_keyboard_87366.jpg][NeXT adb keyboard for Pizza Box NeXT]] which I then realised is what I used and was where I really started to use Emacs. Note the command key is a bar below space and the keys are Help Alt going out from the space. So I used command as a binding and Help.
These keys are what the \?H bindings were and I had forgotten and probably removed a lot of those as I did not understand them. I also forgot what use the <return> and C-m choices were for. See [[http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html][Xah Lee "<return>" and "RET"]]
 "<return>" is the Return key while emacs runs in a graphical user interface.
 "RET" is the Return key while emacs runs in a terminal.
 "RET" is also equivalent to "C-m" (【Ctrl+m】). (For why, see: [[http://ergoemacs.org/emacs/keystroke_rep.html][Emacs's Key Syntax Explained]])

*** Function keys
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:44D1E1EE-D5A8-4B46-B8E2-237CB43139C8
:END:
Muscle memory has a lot to answer for.
The first app that I which had useful function keys was Visual C (The IBM had it but most programming was on Micro APL and I forget what that was)
The latest MS [[https://docs.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-for-frequently-used-commands-in-visual-studio?view=vs-2019][document]] lists them. f5 is the one I remember and that now does Debug.Start, which I think does a build then runs the debugger so that was my main hit and go key. Nowadays my usual task is build and run tests and debug only if needed. So I changed f5 some time ago. The debug steps are f10 and f11 but can't see a continue, I include f12 there. f8 is Edit.GoToNextLocation so fits with my next error. But the NeXT suggestion looks like f7 and 8 (well equivalent) so the next error got shifted.
*** Keyboard usage.
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:3D77889B-CC24-41BF-8425-5682FCE44E65
:END:
Following Xah Lee's comments and seeing [[http://xahlee.info/kbd/space-cadet_keyboard.html][The Space Cadet Keyboard]] which is what emacs was implemented on and they keys outwards of space are control, Meta, Special and Hyper. So I tried binding so it went control, meta, super and caps lock as hyper but I am too used to the Apple binding so went back to Command, Meta and control with caps lock as hyper (and right Windows key). However the control key is difficult to hit.

**** TODO Xah Lee bracket binding
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:0B6A7551-799C-4E98-8C70-D25F6B1ECF97
:END:
Alt-J etc as suggested [[http://xahlee.info/kbd/best_way_to_insert_brackets.html][here]]
Fixed sort of by karabinier making all number keys act as shifted.

**** Typing style
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A57546DB-DA63-4AC4-9305-AD9B95A71A7D
:END:
I can't touch type but seem to have two modes. One is two or more finger for text. Then a mode switch to alter things where I have a right hand on the mouse and left with thumb on ⌘, little finger near caps lock, next on a etc. Thus ⌘zxcvasd are easy most of those are Apple keys, similarly the alt versions are OK but emacs does use that. The control ones are difficult. The Hyper ones are OK.
I discovered [[https://github.com/abo-abo/hydra][Hydra Mode]] which allows you to define keys and a menu to show what they do. I realised that for a new to me mode I could bind the most interesting functions to a hydra to help me learn what the mode does and also cut down on control-C (That's interrupt, isn't it 🤣must bind control-C to control-G as I have wanted that for ages)

So hyper-A is now a mode hydra key and I have started defining a hydra on that,
And as per Yah Lee it might be better to not use chords - ie two key presses e.g.  A-s so I have started implementinmg a leader hydra so that I can make caps-lock a real key not hyper. Now use caps lock as a leader key f19 which now calls a hydra.

**** Windows menu key
:PROPERTIES:
:ID:       org_2020-12-08+00-00:FAFCEE81-16FC-42C8-AC69-6DED2AE1C468
:END:
This seems bound to <help> - shades of NeXT


* Mac modifier key Bindings
:PROPERTIES:
:ID:       org_mark_mini12.local:20201213T170849.967233
:END:
We have fn available so have it as hyper and then use Karabiner  (try iCue later) to map Caps Lock and Window key to hyper. Super is used sometimes so I think is confusing and as noted sequence of keys (emacs key-chord and hydra) is better.
I don't use the right hand modifier keys so not set separately.
Things got changed on one run so set here and remove from customisation

#+NAME: org_mark_mini12.local_20201213T170849.929562
#+begin_src emacs-lisp
(if *aquamacs*
    (setq ns-function-modifier 'hyper
          ns-alternate-modifier 'meta
          ns-right-alternate-modifier nil
          ns-right-command-modifier 'super
          )
  (setq mac-function-modifier 'hyper
        mac-option-modifier 'meta
        mac-command-modifier 'alt
        mac-right-option-modifier nil
        mac-right-command-modifier 'super
        )
  )
#+end_src

* Key based code
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:0464FD58-5332-45BB-8772-A45A4ABD0B20
:END:
This section covers packages and functions to help use and discovery of keys

** Which Key
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:CF1562A8-8457-4393-ADE7-E36762C1ED47
:END:
Package [[https://github.com/justbur/emacs-which-key][which-key]] shows after a key press what you can do next (not useful for control-C as there are too many to show and you can't scroll).

It was disabled as it calls iso-transl to wreck A-/ bindings but fix iso-transl as above so back
   #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_E1F20E36-2E4C-47E8-B20E-F08B7B7F9C77
   #+begin_src emacs-lisp
(use-package which-key
    :ensure t
    :defer 20
    :config
    (setq ;; which-key-sort-order 'which-key-key-order-alpha
     which-key-sort-order 'which-key-description-order
     which-key-side-window-max-width 0.33
     which-key-idle-delay 1)
    ;; (setq which-key-popup-type 'frame) ; fails to f19-f19 otherwise interesting
    (which-key-mode)
    (if (>= emacs-major-version 27)
        (use-package which-key-posframe
            :ensure t
            :config
            (which-key-posframe-mode 1))
      (which-key-setup-side-window-right-bottom))
    :diminish which-key-mode)
   #+end_src
** Display keys in help and menus
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:07E735E7-F73B-475D-96E1-7D24627B32DF
:END:
Note that you can control what the screen displays A for Alt or ⌥. Emacs is not that clever and looks at what it is told and not what appears on the key but I am back to the normal bindings so does not matter. Although hydra seems to object, now fixed. Set the value to non=nil to use Mac symbols.
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8B14E763-46C4-4ADC-ABE3-F119293CCF15
#+begin_src emacs-lisp
(when *aquamacs*
  (setq ns-use-mac-modifier-symbols  t))
#+end_src

** FreeKeys
:PROPERTIES:
:ID:       org_mark_mini20.local:20210601T161324.978840
:END:
Show unused keys from https://github.com/Fuco1/free-keys
#+NAME: org_mark_mini20.local_20210601T161324.957225
#+begin_src emacs-lisp
(use-package free-keys
  :ensure t
  :commands free-keys)
#+end_src

** Log keys
:PROPERTIES:
:ID:       org_mark_mini20.local:20210819T101912.817939
:END:
Show the frequency of keys
#+NAME: org_mark_mini20.local_20210819T101912.797007
#+begin_src emacs-lisp
(use-package-elpa keyfreq
  :demand
  :init
  (setq keyfreq-excluded-commands
		'(self-insert-command
          org-self-insert-command
          forward-char
          backward-char
          previous-line
          next-line
          mac-mwheel-scroll
          mouse-set-point
          org-mouse-down-mouse
          mouse-drag-region
          ))
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
  )
#+end_src
* Bindings grouped by topic
:PROPERTIES:
:ID:       org_2020-12-08+00-00:933FF670-72A1-4807-B31D-2702C695F22E
:END:
This does the actual binding
** Home/End/Paging
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:B05228E7-9F92-462C-95B3-D0C74C4A9F46
:END:
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_4281835C-7CD8-4FE9-B6A7-EBB5B2B0ED08
 #+begin_src emacs-lisp
 ;;(define-key osx-key-mode-map [C-end] 'end-of-buffer ) ; seems to be there by default
(bind-key [C-home] 'beginning-of-buffer macos-key-map)
(when *macport*
  (bind-key [C-H-left] 'beginning-of-buffer macos-key-map)
  (bind-key [C-H-right] 'end-of-buffer macos-key-map))

;;  From old Windows/Next/Unix -
(bind-key [C-kp-end] 'end-of-buffer)
(bind-key [C-kp-home] 'beginning-of-buffer)
(bind-key [S-kp-next] 'scroll-other-window-down)
(bind-key [S-kp-prior] 'scroll-other-window)
#+end_src
** Cua bindings
:PROPERTIES:
:ID:       org_mark_2020-10-01T11-27-32+01-00_mini12.local:D0079FD5-B3EE-47A0-8279-5448DF4CE51F
:END:
#+NAME: org_mark_2020-10-01T11-27-32+01-00_mini12.local_A4D766AC-9C2C-4FA6-BE37-7E4D822DA0E7
#+begin_src emacs-lisp
;; Apple and cua bindings
(when *aquamacs*
  ;; Aquamacs thinks the insert key is <help>
  (bind-key [S-kp-delete] 'cua-cut-region)
  ;; Cocoa emacs does not recognise this key
  (bind-key [S-kp-insert] 'cua-paste)
  (bind-key [C-kp-insert] 'cua-copy-region)
  (bind-key "H-<return>" 'cua-set-rectangle-mark cua-global-keymap)
  (unbind-key "C-<return>" cua-global-keymap)
  ;; Aquamacs defaults these to same
  ;;(bind-key [C-end] 'end-of-buffer )
  ;;(bind-key [C-home] 'beginning-of-buffer )
  )

#+end_src
** Scrolling
:PROPERTIES:
:ID:       org_mark_2020-10-01T11-27-32+01-00_mini12.local:859480D6-54DB-4B10-BF93-05372385B89F
:END:
I suspect not touched since before ages. But need for macport
#+NAME: org_mark_2020-10-01T11-27-32+01-00_mini12.local_8782706E-463C-4A10-906A-3E3E2AF91C93
#+begin_src emacs-lisp
(bind-key [S-kp-next] 'scroll-other-window-down )
(bind-key [S-kp-prior] 'scroll-other-window )
;; (bind-key [s-left] 'scroll-left)
;; (bind-key [s-right] 'scroll-right)
;;(bind-key [?\M-left] 'scroll-left )
(bind-key "H-<up>" 'scroll-down macos-key-map)
(bind-key "H-<down>" 'scroll-up macos-key-map)
#+end_src

** Deleting and return
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:FB038850-533F-4334-9607-5BC975283E81
:END:
  #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_DD9F56DD-C914-46B4-B26D-131CC2ABAD7F
  #+begin_src emacs-lisp
  ;; (bind-key [C-return] 'newline-and-indent )
  ;;(bind-key [C-backspace] 'backward-delete-char-untabify )
(bind-key mwbkey-delete 'delete-char)
(bind-key "<backspace>" 'backward-delete-char-untabify)

  ;;(bind-key [?\A-backspace] 'undo )
  #+end_src

** undo
:PROPERTIES:
:ID:       org_mark_mini12.local:20210102T015452.201351
:END:
Use Aquamacs'
#+NAME: org_mark_mini12.local_20210102T131152.591658
#+begin_src emacs-lisp
(use-package aquamacs-redo
    :unless *aquamacs*
    :demand t
    :bind ("A-z" . aquamacs-undo)
    )
#+end_src

** Old bindings
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:9DC3CE51-289C-4767-A1DE-E461A402C58F
:END:
These will be old NeXT Pizza bindings


     ;(global-set-key [?\A-=] 'what-line )
     ;(global-set-key [?\M-g] 'goto-line)
     ;(global-set-key [?\A-g] 'goto-line)
     ;(global-set-key "\M-q" 'query-replace)
     ;(global-set-key "\M-r" 'replace-string)
     ;(global-set-key "\M-i" 'indent-region)
** quickrun
:PROPERTIES:
:ID:       org_2020-12-10+00-00:FEC7FE48-F0F3-44D4-B404-B8B876681B21
:END:
Runs the current buffer through a compiler or interpreter. There are also functions to do for a method. Includes C, Racket, Python, Julia. However all through a batch command so not into REPL and not really through make.
See https://github.com/syohex/emacs-quickrun but assumes a lot. Better look at org mode and repls.

** File actions
:PROPERTIES:
:ID:       org_mark_2020-10-01T11-27-32+01-00_mini12.local:72150B6F-1352-4EC2-AD0F-B5B273269885
:END:
This is the override of save etc to the mode maps
#+NAME: org_mark_2020-10-01T11-27-32+01-00_mini12.local_1707CDE5-818A-4399-863A-F81E8653D8F6
#+begin_src emacs-lisp
(bind-key [remap mac-key-save-file] 'mwb/mac-key-save-buffer-force-backup macos-key-map)
(bind-key [remap save-buffer] 'mwb/mac-key-save-buffer-force-backup macos-key-map)
#+end_src
** Buffer related
:PROPERTIES:
:ID:       org_mark_2020-09-24T21-45-16+01-00_mini12.local:6D014266-E049-4521-A263-7154358EAD5D
:END:
#+NAME: org_mark_2020-09-24T21-45-16+01-00_mini12.local_427A6531-52EE-4F7E-A5E8-B2841C9B166A
#+begin_src emacs-lisp
;; (bind-key "A-b" 'ivy-switch-buffer macos-key-map)
(bind-key "A-M-k" 'bjm/kill-this-buffer macos-key-map)
(bind-key "C-x k" 'bjm/kill-this-buffer macos-key-map)
(bind-key "A-k" 'bury-buffer macos-key-map)
;; (bind-chord "kk" #'er-switch-to-previous-buffer macos-key-map)
;; macport makes A-u µ
(bind-key  "A-u" 'revert-buffer-no-confirm macos-key-map)
#+end_src
* Single key bindings
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7A9AB89E-F4F2-4508-8FD9-FCB30C5AE861
:END:
These are random and not organised by package

** Function keys
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:C8D7FB19-15CD-4E95-AA3F-786AE41105A7
:END:
Originally fit in with Visual C 6 (or earlier) keys. F1 help and can't redo in emacs. Just discovered that GNU say what F1-4 should be and seemed good for keyboard macros not my F7.
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_ABE6F5EB-5A3A-418A-9980-F45327576935
#+begin_src emacs-lisp
;; (bind-key [f3] 'gdb)
;; (bind-key [f4] 'grep )
(bind-key [f5] 'compile)
(bind-key [S-f4] 'grep)
;; These are the VC6 ones - not used for 15 years so could learn new ones,
;; (bind-key [kp-f3] 'gdb)
;; (bind-key [f12] 'gud-step )
;; (bind-key [f11] 'gud-next )
;; (bind-key [C-f10] 'gud-cont )
;; (bind-key [f10] 'gud-finish )
;; (bind-key [C-f11] 'gud-break )
;; (bind-key [C-f12] 'gud-tbreak )

;;  More VC6 keys
;; (bind-key [S-f7] 'next-error)
;; (bind-key [S-f8] 'previous-error)

;; But makes more sense to quickly hit a key
(bind-key [f8] 'next-error)
(bind-key [S-f8] 'previous-error)

;; f11 is bound by emacs to toggle-frame-fullscreen
(unbind-key [f11])
#+end_src

** Hyper key bindings
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:47F25520-0E9A-4872-B519-59399D80D775
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_F6D628C7-FADF-42EB-BA66-CC18C2BD0D2A

#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_0ABBEBC7-DD95-4225-A722-008492957813
#+begin_src emacs-lisp
(bind-key (kbd "H-1")  'delete-other-windows )
(bind-key (kbd "H-0")  'delete-window )
;; H-a is major mode specific Hydra so bound to mode keymap by
;; use-package :hydra

;; (bind-key (kbd "H-h") 'hydra-space/body)
;; The following is aquamacs only - probably mess around with window hydra
;; (bind-key (kbd "H-n") 'tabbar-move-current-buffer-to-new-frame )
;; H-r is register
;; H-s is return from org special edit
#+end_src

** Other
:PROPERTIES:
:ID:       org_mark_2020-09-24T21-45-16+01-00_mini12.local:5850CC8F-7956-45D4-8CDA-2CB4C152A34C
:END:
#+NAME: org_mark_2020-09-24T21-45-16+01-00_mini12.local_AF417D0A-EE73-4B8C-9B57-B7DFFFB19E40
#+begin_src emacs-lisp
(bind-key "A-M-u" 'ediff-revision macos-key-map)
(if *aquamacs*
    (progn
      (bind-key "A-<kp-add>" 'zoom-font macos-key-map)
      (bind-key "A-<kp-subtract>" 'zoom-font-out macos-key-map)
      (bind-key "A-/" 'comment-or-uncomment-region-or-line macos-key-map))

  (progn
    (bind-key "A-<kp-add>" 'zoom-in macos-key-map)
    (bind-key "A-<kp-subtract>" 'zoom-out macos-key-map)
    (bind-key "A-/" 'comment-dwim-2 macos-key-map)))
#+end_src
** Toggle treemode as needed often
:PROPERTIES:
:ID:       org_mark_mini20.local:20210812T103208.413730
:END:
#+NAME: org_mark_mini20.local_20210812T103208.394575
#+begin_src emacs-lisp
(bind-key "A-M-t" 'treemacs)
#+end_src
** Control x binding
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:69EED50E-06AD-4068-A0FA-34186BCC8E7D
:END:
   From [[https://github.com/abo-abo/hydra/wiki/Emacs][Hydra wiki - Find file with xf]]
   Not really working as elisp well lispy messes it up and I use Mac bindings so ^x rarer.
   It does work except lispy
   Make the x readonly more as it can replace C-x with f19 leader
   #+NAME: org_mark_2020-03-06T13-08-35+00-00_mini12.local_BE42E0D7-506F-4778-89F9-E4DC4B14493E
   #+begin_src emacs-lisp
(defun x-hydra-pre ()
  (insert "x")
  (let ((timer (timer-create)))
    (timer-set-time timer (timer-relative-time (current-time) 0.5))
    (timer-set-function timer 'hydra-keyboard-quit)
    (timer-activate timer)))

(defhydra x-hydra (:body-pre x-hydra-pre
                 :color blue
                 :hint nil)
  ("b" (progn (zap-to-char -1 ?x) (ivy-switch-buffer)))
  ("f" (progn (zap-to-char -1 ?x) (counsel-find-file)))
  ("r" (progn (zap-to-char -1 ?x) (counsel-recentf))))

(defhydra x-hydra-readonly ( :color blue
                            :timeout 2)
  ("b" ivy-switch-buffer "switch buffer")
  ("f" counsel-find-file "find-file")
  ("r" counsel-recentf "recentf")
  ("w" write-file "write file" )
  ("x" nil "cancel" :color blue))

(defun mwb-x-key ()
  (interactive)
  (if buffer-read-only
      (x-hydra-readonly/body)
    (x-hydra/body)))

(bind-key "x" #'mwb-x-key)
#+end_src

* Mouse
:PROPERTIES:
:ID:       org_mark_2020-10-17T19-55-57+01-00_mini12.local:6D65DE51-07D2-4306-9156-B8E684BC67C3
:END:
This is a problem. I have used several mice with emacs. The best is the old 3 button Sun mouse or Logitech trackball, this makes mouse-2 easy to use. However we now have scroll wheels so mouse-2 is uncomfortable and not easy to control. But then I bouth a 3 button mouse.

macOS has its own standards so mouse-3 does its own thing.
There are several things we want mouse-3 to do:
1. If on a word and it is misspelt then show alternatives and ability to save.
2. If on a region show cut and paste, other actions on a region
3. Thing at point (if region or not) search for region or word in google
4. Show menus from main menu - e.g. mode specific and imenu.

Aquamacs has the best support. But it hacks flyspell heavily mainly to get macOS dictionary (the main benefit of Aquamacs) but also to show the corrections etc. Then it adds to the flyspell menu the rest of cut and past, google etc.  help:flyspell-emacs-popup and help:aquamacs-popup-context-menu
Emacs has a couple of maps mouse3-noregion-popup-entries etc
mac-key-mode has a simple one [[help:mac-key-context-menu]]
mouse3+ has a more complex setup including if selected a region or not see help:mouse3-popup-menu

I think start with Aquamacs copy using non Aquamacs functions and then try to put flyspell on.

** iMenu
:PROPERTIES:
:ID:       org_mark_mini20.local:20210204T124122.808094
:END:
Sort the imenu found options in the mouse menu
#+NAME: org_mark_mini20.local_20210204T124122.783791
#+begin_src emacs-lisp
(setq imenu-sort-function 'imenu--sort-by-name)
#+end_src
** Macos mouse
:PROPERTIES:
:ID:       org_mark_mini12.local:20210104T224325.845039
:END:
Well Aquamacs at least - and possibly others does an emulate 3 button mouse which stops c-mouse! (and alt)
#+NAME: org_mark_mini12.local_20210104T224325.807058
#+begin_src emacs-lisp
(when *aquamacs*
  (setq ns-emulate-three-button-mouse 'nil))
#+end_src
*** Mouse 3
:PROPERTIES:
:ID:       org_mark_mini12.local:20201213T170631.398434
:END:
Try with an enhanced one but test to mouse-4 which might have issues with treemacs but I think the order is OK
#+NAME: org_mark_mini12.local_20201213T170631.361457
#+begin_src emacs-lisp
(unless *aquamacs*
  (use-package "mouse3"
    :mwb-load-path "site-lisp/Emacs_wiki"
    :bind ("<mouse-4>" . 'mouse3-action-wo-save-then-kill)))
#+end_src
* Hydra
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A41389A4-CD6E-44AD-A79A-C170F7936D9D
:END:
** Leader keys
:PROPERTIES:
:ID:       org_2020-12-08+00-00:8916E17A-D941-4F9E-B5B6-2F32476DF3C0
:END:
Replace Hyper key combination with a leader key

As this has to be a leader map so no hydra H-s is the issue as in some org-mode maps then mighty be better to use which-key-add-keymap-based-replacements to set pretty names for which key

Odd things needed
Tried inherit to set f19 s as mode dependant but seems not to work with pretty hydra. So make the function dispatch by mode
*** Special function
:PROPERTIES:
:ID:       org_mark_mini20.local:20210812T114450.516655
:END:
#+NAME: org_mark_mini20.local_20210812T114450.499147
#+begin_src emacs-lisp
(defun mwb-special-in-hydra ()
  (interactive)
  (cond ((eq major-mode 'org-mode) (org-edit-special))
        ((bound-and-true-p org-src-mode) (org-edit-src-exit))
        (t org-babel-tangle-jump-to-org)))
#+end_src
*** Main map
:PROPERTIES:
:ID:       org_mark_mini20.local:20210812T103208.412764
:END:
#+NAME: org_2020-12-05+00-00_94E1455C-7F91-48B1-BF7B-EA3753E7BDCB
#+begin_src emacs-lisp
(pretty-hydra-define hydra-kl (:title (with-octicon "tools" "Global tools" 1 -0.05)
                                      :color teal
                                      :idle 1.0)
  ("Hydrae"
   (("C" hydra-flycheck/body "Flycheck")
    ("g" jp-git/body "git...")
    ("h" hydra-hs/body "Hide/show...")
    ("n" hydra-navigate/body "Navigate")
    ("P" hydra-projectile/body "projectile")
    ("t" hydra-transpose/body "Transpose")
    ("x" x-hydra-readonly/body "C-X fns")
    ("<f19>" major-mode-hydra "Major mode")
    ("[" ptrv/smartparens/body "Smartparens")
    ("l" hydra-goto/body "Go to"))
   "Windows"
   (("F" other-frame "Switch Frame")
    ("m" (mwb-new-frame "*Messages*") "Messages")
    ("W" hydra-jp-window/body "Window Management")
    ("0" delete-window "Delete Window")
    (")" delete-window "Delete Window")
    ("|" split-window-right "horizontally"))
   "Current buffer"
   (("L" linum-mode "line number" :toggle t)
    ("c" insert-char "insert char")
    ("TAB" hs-mwb-show-one-level "show one level")
    ("C-<tab>" hs-toggle-hiding "Toggle hide-show")
    ("f" refill-mode "Auto refill mode ")
    ("r" backup-walker-start "Backup Walker")
    ("i" consult-imenu "imenu"))
   "Actions"
   (("D" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
    ("d" hyd-dired-common/body "Open dired frame")
    ("M" toggle-mwb-message-timestamp :toggle mwb-message-timestamp)
    ("p" package-quickstart-refresh "refresh quickstart packages")
    ("q" keyboard-quit-context+ "Quit minibuffer etc")
    ("S" org-babel-detangle "Detangle")
    ("e" iedit-mode "iedit"))
   "Change Buffers"
   (("b" consult-buffer "Switch Buffer")
    ("B" counsel-bookmark "Jump to bookmark")
    ("s" mwb-special-in-hydra "org edit")
    ("w" narrow-or-widen-dwim "Narrow or Widen")
    ;; ("s" org-babel-tangle-jump-to-org "Back to org")
    ("j" dired-jump "Dired jump"))))
(bind-key "H-`"  'hydra-kl/body)
(bind-key "<f19>"  'hydra-kl/body)
#+end_src
** Hydra transpose
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:F0488F70-6114-4DF6-AB8A-70BCCF07A5C2
:END:
    From hydra wiki
    #+NAME: org_mark_mini20.local_20210812T123645.018949
    #+begin_src emacs-lisp
(defhydra hydra-transpose (:color red)
    "Transpose"
     ("c" transpose-chars "characters")
     ("w" transpose-words "words")
     ("o" org-transpose-words "Org mode words")
     ("l" transpose-lines "lines")
     ("s" transpose-sentences "sentences")
     ("e" org-transpose-elements "Org mode elements")
     ("p" transpose-paragraphs "paragraphs")
     ("t" org-table-transpose-table-at-point "Org mode table")
     ("q" nil "cancel" :color blue))
    #+end_src

** Goto
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T222808.558433
:END:
Goto is based on consult's map and Kitchin hydra
#+NAME: org_mark_mini20.local_20210811T180310.388838
#+begin_src emacs-lisp
(pretty-hydra-define hydra-goto
  (:title (mwb-icon-text "directions" "Goto")
          :foreign-keys warn
          :quit-key "q"
          :exit t
          :idle 0.5)
  ("goto"
   (("g" consult-goto-line))
   "Structure"
   (("h" consult-org-heading "Org heading")
    ("o" consult-outline "Outline")
    ("i" consult-imenu "imenu")
    ("I" consult-project-imenu "Project imenu"))
   "Errors"
   (
    ("e" consult-compile-error "compile error")
    ("f" consult-flycheck "flycheck"))
   "Marks"
   (("m" consult-mark "mark")
    ("M" consult-global-mark "global mark"))))
#+end_src

** Search
:PROPERTIES:
:ID:       org_mark_mini20.local:20210801T222808.557693
:END:
From consult

*** Helper functions
:PROPERTIES:
:ID:       org_mark_mini20.local:20210811T144548.707417
:END:
#+NAME: org_mark_mini20.local_20210811T144548.684882
#+begin_src emacs-lisp
(defun consult-line-symbol-at-point ()
  (interactive)
  (consult-line (thing-at-point 'symbol)))
#+end_src


**** Hydra
:PROPERTIES:
:ID:       org_mark_mini20.local:20210811T144548.706167
:END:
#+NAME: org_mark_mini20.local_20210811T144548.688365
#+begin_src emacs-lisp
(bind-key "<f4>"
          (pretty-hydra-define hydra-search
            (:title (mwb-icon-text "search" "Search")
                    :foreign-keys warn
                    :quit-key "q"
                    :exit t
                    :idle 0.5)
            ("Project"
             (("<f5>" deadgrep "Deadgrep")
              ("r" consult-ripgrep "Counsel ripgrep"))
             "Global"
             (("L" consult-locate "Locate")
              ("M-w" eww-search-words "Web"))
             "Directory"
             (("g" consult-grep "grep")
              ("G" consult-git-grep "grep using git")
              ("f" consult-find "Find"))
             "Current Buffer"
             (("l" consult-line "Line")
              ("k" consult-keep-lines "Keep Lines")
              ("u" consult-focus-lines "Focus Lines")
              ("e" consult-isearch "consult Incremental search")
              ("<f4>" consult-line  "Incremental search")
              ("o" occur "Occur")
              ("." consult-line-symbol-at-point "isearch point")
              ("_" isearch-forward-symbol "isearch symbol")
              ("w" isearch-forward-word "Isearch word"))
             "Buffers"
             (("m"  consult-multi-occur "Multi occur"))
             "Highlight"
             (("h." highlight-symbol-at-point "Point")
              ("hf" hi-lock-find-patterns "Lock Pattern")
              ("hl" highlight-lines-matching-regexp "Lines")
              ("hp" highlight-phrase "Phrase")
              ("hr" highlight-regexp "regexp")
              ("hu" unhighlight-regexp "Unhighlight")
              ("hw" hi-lock-write-interactive-patterns "Write patterns")))))
#+end_src

*** isearch map
:PROPERTIES:
:ID:       org_mark_mini20.local:20210802T082202.482760
:END:
#+NAME: org_mark_mini20.local_20210802T104242.905780
#+begin_src emacs-lisp
(use-feature emacs
  :bind (:map isearch-mode-map
              ("M-e" . consult-isearch)
              ("<f4>" . consult-isearch) ;; orig. isearch-edit-string
              ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
              ("M-s l" . consult-line)
              ("<right>" . isearch-repeat-forward)
              ("<left>" . isearch-repeat-backward)
              :map minibuffer-local-isearch-map
              ("<left>" . isearch-reverse-exit-minibuffer)
              ("<right>" . isearch-forward-exit-minibuffer)))

#+end_src




*** Let search continue with arrows
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:9C6C52F9-BD9C-4A80-856B-6D5620E5C9A7
:END:
This is disabled as swiper and consult-line scroll in the minibuffer.
But point seems to be messed up and does Aquamacs do something.
[[http://ergoemacs.org/emacs/emacs_isearch_by_arrow_keys.html][Xah Lee  again]] set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
How does this work with ivy
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_91E28470-7CDD-41AD-B712-ACCD36F51EAF
#+begin_src emacs-lisp :tangle no

(progn
  ;; (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
  ;; (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )

  (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
  (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)

  (define-key minibuffer-local-isearch-map (kbd "<left>") 'isearch-reverse-exit-minibuffer)
  (define-key minibuffer-local-isearch-map (kbd "<right>") 'isearch-forward-exit-minibuffer))
#+end_src
**** TODO Use with cmd-F
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A15CC8C1-7203-4FD0-8E6B-F0923D40F40D
:END:
Aquamacs also messes around with isearch and the two don't exactly match. Which might be a good thing
** Kitchin hydras
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:CA320A7E-C8CE-4C9D-B24B-C7FFE5F04B9C
:END:
   From [[https://kitchingroup.cheme.cmu.edu/blog/2015/09/28/A-cursor-goto-hydra-for-emacs/][Kitchin Group]] Original has helm and I add some from Hydra Wiki
*** Navigate
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:85154714-C478-4D9F-850F-7C01537CFD9C
:END:
    #+NAME: org_mark_mini20.local_20210812T123645.021261
    #+begin_src emacs-lisp
(defhydra hydra-navigate (:color red
                          :hint nil)
  "
_f_: forward-char       _w_: forward-word       _n_: next-line
_b_: backward-char      _W_: backward-word      _p_: previous-line
^ ^                     _o_: subword-right      _,_: beginning-of-line
^ ^                     _O_: subword-left       _._: end-of-line

_s_: forward sentence   _a_: forward paragraph  _g_: forward page
_S_: backward sentence  _A_: backward paragraph _G_: backward page

 _B_: buffer list       _i_: window
_<left>_: previous buffer   _<right>_: next buffer
_<up>_: scroll-up           _<down>_: scroll-down

_[_: backward-sexp _]_: forward-sexp
_<_ beginning of buffer _>_ end of buffer _m_: set mark _/_: jump to mark
"
  ("f" forward-char)
  ("b" backward-char)
  ("w" forward-word)
  ("W" backward-word)
  ("n" next-line)
  ("p" previous-line)
  ("o" subword-right)
  ("O" subword-left)
  ("s" forward-sentence)
  ("S" backward-sentence)
  ("a" forward-paragraph)
  ("A" backward-paragraph)
  ("g" forward-page)
  ("G" backward-page)
  ("<right>" next-buffer)
  ("<left>" previous-buffer)
  ("i" ace-window :color blue)
  ("m" org-mark-ring-push)
  ("/" org-mark-ring-goto :color blue)
  ("B" counsel-buffers)
  ("<up>" scroll-up)
  ("<down>" scroll-down)
  ("<" beginning-of-buffer)
  (">" end-of-buffer)
  ("." end-of-line)
  ("[" backward-sexp)
  ("]" forward-sexp)
  ("," beginning-of-line)
  ("q" nil "quit" :color blue))

(bind-key "H-m" 'hydra-navigate/body)
    #+end_src
