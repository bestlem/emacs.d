#+TITLE Emacs configuration org Mode - all the complete things
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: content
* Start using org mode
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:6810C5AF-469D-4E0E-BD24-8F6301313A91
:END:
This is my first attempt at learning it.
The config is a mess as I pick up on things.
I was going to leave this to last so could make changes as I used org. However as I kept editing it I realised that I needed to comment and than was better in literate programming so this is the first non key file to be done.
This is a large config and might be easier to document if not all put in a use-package (or break my rule and let some parts not be complete lisp)
** use package issues
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:1C8523CC-5CB5-4EA3-A010-6881059B6B32
:END:
This config gets long so difficult to see in one block
Currently I put things outside use-package
See in future noweb see https://raw.githubusercontent.com/zzamboni/dot-emacs/master/init.org if add name property it seems to work
** Noweb issues
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:757C060B-ED8C-49CB-9096-EA146141E59F
:END:
noweb allows me to totally reorder the org file so better reading so support code can be in an appendix etc.
However org-babel-detangle cannot deal with detangling as it looks for the whole file and tries to do a block at a time - which does not work with embedded blocks. After days debugging this (well several attempts until it clicked) I found confirmation https://news.ycombinator.com/item?id=17653473
One fix might be to just detangle the current block.
** Grettke
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:111E7DB2-5383-4E1F-9B6E-EE14CBFE8671
:END:
This seems one of the most complete literate programming setups and he does have weave but no examples with links. He does saya few things so lets try.
As everything is after loading of org dump in a config section after the rest.


* Load and setup org mode
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:DA0B129D-3E54-4C67-94D2-B9D303434BAF
:END:
org-mode is a pain as we need a newer than aquamacs supplies and also there are recommendations to use an even later version. Also re packaging emacs package.el reads already built stuff others e.g. straight.el don't and that could be a problem with org-mode. There are reasons not to use the org repo but Elpa - [[https://www.reddit.com/r/emacs/comments/5sx7j0/how_do_i_get_usepackage_to_ignore_the_bundled/ddix2ta/?utm_source=share&utm_medium=web2x][from Reddit]] basically possible security issues so I am with ELPA and missing org-contrib.

Aug 2019 got an error in cut subtree so revert to org mode with Aquamacs nad lose formatting of code blocks. (and will get name changes in links in generated files) but seems OK now.
** The use package setup
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:411C4ABA-EFFC-4E73-9C0F-5E936AC5B73B
:END:
Note Hydra is not really used after just a couple of weeks.
  #+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_72F56F5E-3D65-491F-B68F-CDCFF334FFB6
  #+begin_src emacs-lisp :noweb tangle
  (use-package org
    :ensure t
    :bind
    <<key-binds>>
    :config
    (setq org-datetree-add-timestamp (quote active)
          org-default-notes-file "~/SyncServices/Dropbox/Docs/org/notes.org"
          org-directory "/Users/mark/SyncServices/Dropbox/Docs/org"
;;          org-use-speed-commands t
)
    :hook
    <<org-mode-hooks>>
    <<org-mode-hooks-wrapping>>
<<org-mode-hydrae>>
;;<<org-mode-hydrae-code>>
:config
<<org-config>>
<<org-mode-hydrae-refile>>

<<org-grettke>>

    )
  #+end_src
*** Key bindings
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:7CFDEDFE-FB36-47D9-8D94-0CDC83AF71CC
:END:
Put the bind bit in noweb
#+NAME: key-binds
#+begin_src emacs-lisp :tangle no
(
 ("H-s" . org-babel-tangle-jump-to-org)
 ("H-S-s" . org-babel-detangle)     ; actually update but can't deal with weave
 :map org-mode-map
 ("H-s" . org-edit-special)
 ("<f5>" . org-ctrl-c-ctrl-c)
 :map org-src-mode-map
 ("H-s" . org-edit-src-exit)
 ("A-s" . org-edit-src-save)            ; I press by mistake but it makes
                                        ; sense now save not save and exit
 ("H-k". org-edit-src-abort)
 ;; :map org-capture-mode-map
 ;; ("<f12>" . org-capture-finalize)
 )
#+end_src

*** Hack around
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:163000D5-C193-4FB4-A502-C78FD1FB08AB
:END:
basically can't edit the above as tangle - this is ironically the best suggestion for wring in code with outshine and not org mode
**** Org capture
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:3D4D14AB-E281-45E0-A18E-0590E25E74A4
:END:
From http://doc.norang.ca/org-mode.html#Capture
#+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_065E6C30-63CE-4A91-B3FC-182E8D209A06
#+begin_src emacs-lisp

;; ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
;; (setq org-capture-templates
;;       (quote (("t" "todo" entry (file "~/git/org/refile.org")
;;                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
;;               ("r" "respond" entry (file "~/git/org/refile.org")
;;                "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
;;               ("n" "note" entry (file "~/git/org/refile.org")
;;                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
;;               ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
;;                "* %?\n%U\n" :clock-in t :clock-resume t)
;;               ("w" "org-protocol" entry (file "~/git/org/refile.org")
;;                "* TODO Review %c\n%U\n" :immediate-finish t)
;;               ("m" "Meeting" entry (file "~/git/org/refile.org")
;;                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
;;               ("p" "Phone call" entry (file "~/git/org/refile.org")
;;                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
;;               ("h" "Habit" entry (file "~/git/org/refile.org")
;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))


(setq org-capture-templates
      '(("n" "Thought or Note"  entry
         (file org-default-notes-file)
         "* %?\n\n  %i\n\n  See: %a" :empty-lines 1)
        ("t" "todo" entry (file org-default-notes-file)
         "* TODO %?\n%U\n%a\n" )
        ))
#+end_src

*** TODO Save org files saved in dropbox dir automatically (NB not emacs autosave)
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:8A5AC122-42AB-4B05-BEEE-ED6A16F5A966
:END:
See https://www.reddit.com/r/emacs/comments/9e5h4f/is_there_a_way_to_autosave_org_note_buffers/ and real-auto-save-mode and the hook
*** TODO Tangle on save
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:42D6E858-998F-48DE-8D73-799C228FF91E
:END:
This code is unreadable the consts would make more sense not being there as they would then match the documentation
#+NAME: org-mode-hooks
	#+begin_src emacs-lisp :tangle no
(org-mode . (lambda ()
              (add-hook
               'after-save-hook
               'org-babel-tangle
               'run-at-end
               'only-in-org-mode)))
	#+end_src
** Setup outside use-package
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:2DC0229D-C398-4D28-B321-23AFDA2DA87A
:END:
*** Imenu to provide info for treemacs and contextual menu
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:793DB60B-CF8D-4A9B-8AA1-1A16077CBCB1
:END:
  #+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_12513515-1117-4C44-86E5-C9E98808513C
  #+begin_src emacs-lisp
  (add-hook 'org-mode-hook
			(lambda () (imenu-add-to-menubar "Imenu")))
  (setq org-imenu-depth 6)
  #+end_src
** Babel initialisation
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:1972881C-34EE-46DE-BB07-8C34C8CC0094
:END:
Code block behaviour - but also see customization for appearance
 #+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_F0D54908-6A04-45A1-BF64-E082C9DE207E
 #+begin_src emacs-lisp
 (setq org-src-fontify-natively t
	   org-src-tab-acts-natively t
	   org-confirm-babel-evaluate nil
	   org-edit-src-content-indentation 0
	   org-startup-indented t)
 #+end_src
*** Grettke babel
 :PROPERTIES:
      :header-args: :noweb-ref org-grettke :tangle no
      :ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:547FD263-C9C1-4384-850B-989B61F4E03D
      :END:
**** Minimal config
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:4AF845AD-16BB-4C99-B8BB-AA29A91E8D84
:END:
Grettke has two set ups

***** Time
:PROPERTIES:
:ID:       org_gcr_2018-03-16_mara:BC16A47E-FC4E-4F12-8813-583BF4C3EF5A
:END:
Standardize timestamps.

#+name: org_gcr_2018-03-16_mara_24B486D3-AF94-44E7-99F6-AEB7A53FD0E6
#+begin_src emacs-lisp
(defun help/get-timestamp ()
  "Produces a full ISO 8601 format timestamp."
  (interactive)
  (let* ((timestamp-without-timezone (format-time-string "%Y-%m-%dT%T"))
         (timezone-name-in-numeric-form (format-time-string "%z"))
         (timezone-utf-offset
          (concat (substring timezone-name-in-numeric-form 0 3)
                  ":"
                  (substring timezone-name-in-numeric-form 3 5)))
         (timestamp (concat timestamp-without-timezone
                            timezone-utf-offset)))
    timestamp))

(defun help/insert-timestamp ()
  "Inserts a full ISO 8601 format timestamp."
  (interactive)
  (insert (help/get-timestamp)))

(defun help/get-timestamp-no-colons ()
  "Produces a full ISO 8601 format timestamp with colons replaced by hyphens."
  (interactive)
  (let* ((timestamp (help/get-timestamp))
         (timestamp-no-colons (replace-regexp-in-string ":" "-" timestamp)))
    timestamp-no-colons))

(defun help/insert-timestamp-no-colons ()
  "Inserts a full ISO 8601 format timestamp with colons replaced by hyphens."
  (interactive)
  (insert (help/get-timestamp-no-colons)))

(defun help/insert-datestamp ()
  "Produces and inserts a partial ISO 8601 format timestamp."
  (interactive)
  (insert (format-time-string "%F")))
#+end_src
***** Garbage collection
:PROPERTIES:
:ID:       org_gcr_2017-07-30_mara:D9207828-3783-4599-BA48-A6EB2C3FCAE4
:END:
Clear memory and disable garbage collection or return garbage collection to
normal.

#+NAME: org_gcr_2017-07-29_mara_3F459DF6-EA6A-4D48-BB0A-3670FCB25713
#+BEGIN_SRC emacs-lisp
(defun help/set-gc-cons-threshold (&optional multiplier notify)
  "Set `gc-cons-threshold' either to its default value or a
   `multiplier' thereof."
  (let* ((new-multiplier (or multiplier 1))
         (new-threshold (* mwb/gc-cons-threshold
                           new-multiplier)))
    (setq gc-cons-threshold new-threshold)
    (when notify (message "Setting `gc-cons-threshold' to %s" new-threshold))))
#+END_SRC
Helper doubles available memory.

#+NAME: org_gcr_2017-08-02_mara_92B4C3CB-6CE3-4211-8A18-C7BE905BFBC2
#+BEGIN_SRC emacs-lisp
(defun help/double-gc-cons-threshold () "Double `gc-cons-threshold'." (help/set-gc-cons-threshold 2))
#+END_SRC

Double garbage collection during tangling. Instead of storing this in the
primary Org-Mode Literate Programming configuration I want it here so that it
is always available.

#+NAME: org_gcr_2017-08-02_mara_DAC6E558-E49D-4551-8789-2B3FB88F6CE7
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-pre-tangle-hook #'help/double-gc-cons-threshold)
(add-hook 'org-babel-post-tangle-hook #'help/set-gc-cons-threshold)
#+END_SRC

Display system info.

#+NAME: org_gcr_2017-05-12_mara_901541A6-1DB6-4EA2-8688-9C888C41902A
#+BEGIN_SRC emacs-lisp
(defun help/display-system-info ()
  (interactive)
  (message "<<<Org Information>>>\nThis buffer file: %s\nAs Of: %s\nOrg-Version: %s\nOrg-Git-Version:%s\nEmacs-Version: %s\nNoweb wrap start and stop delimeters: '%s' and '%s'\norg-babel-default-header-args:\n"
           buffer-file-name
           (help/get-timestamp)
           (org-version)
           (org-git-version)
           (emacs-version)
           org-babel-noweb-wrap-start
           org-babel-noweb-wrap-end)
  (pp org-babel-default-header-args))
(help/display-system-info)
#+END_SRC
****

**** Fundamentals
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:F13213F6-AD98-4F71-AC18-D1139D5ED9D1
:END:
**** Literate Programming
  :PROPERTIES:
  :ID:       orgmode:gcr:vela:8510C876-F644-4804-9F87-54A0B44DBA6A
  :END:

#+MACRO: lp-configure-each-sb Configuration likely per Source-Block or System.

This system enables you to perform 3 Literate Document activities
- Tangling
- Evaluating
- Weaving

Combined they provide a rich Literate Programming environment.

These activities are not performed interactively by the user. They are automatic
operations that occur as a result of the configuration by the document itself.

The following is the guide for the default configuration of this system and how
it behaves.

Key:

- Columns
  - S :: Source document modified?
  - T :: Destination tangled-document modified?
  - W :: Destination weaved-document modified?
  - C :: Source-Block Evaluation occurred?
  - O :: Org-Macro Expansion occurred?

| Activity   | S | T | W | C  | O |
|------------+---+---+---+----+---|
| Tangling   | F | T | F | F  | F |
| Evaluating | T | F | F | T  | F |
| Weaving    | F | F | T | F! | T |

They are separate and distinct operations.

"Programming" is logically an activity that is the combination of these 3
activites. It is interactively performed by Sysop. It is not a distinct
or isolated operation. Results of one activity exist here and serve as inputs to
another activity.

- Note about ~F!~: Weaving Source-Block Evaluation occurred?^{*}
  - Source block evaluation on export is disabled using header arguments:
    those source blocks will never be evaluated on weaving
  - However the /ability/ for them evaluate on weaving /is/ enabled so that weaved
    source blocks can be replaced by their result value. This gives a kind of
    template system. More details [[eval][here]]

**** Helper Functions
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:B14776FD-6835-4D1D-BCD3-50D56555423C
   :END:

Help configure Org-Mode.

#+NAME: org_gcr_2017-05-12_mara_21BEDC86-D1A3-43FC-85AC-8FF54D161E2F
#+BEGIN_SRC emacs-lisp
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(defun help/set-org-babel-default-inline-header-args (property value)
  "See `help/set-org-babel-default-header-args'; same but for inline header args."
  (setq org-babel-default-inline-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-inline-header-args))))

(defun help/set-org-babel-default-header-args:R (property value)
  "See `help/set-org-babel-default-header-args'; same but for R.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:R
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:R))))

(defun help/set-org-babel-default-header-args:ditaa (property value)
  "See `help/set-org-babel-default-header-args'; same but for ditaa.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:ditaa
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:ditaa))))

(defun help/set-org-babel-default-header-args:dot (property value)
  "See `help/set-org-babel-default-header-args'; same but for dot.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:dot
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:dot))))

(defun help/set-org-babel-default-header-args:plantuml (property value)
  "See `help/set-org-babel-default-header-args'; same but for plantuml.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:plantuml
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:plantuml))))

(defun help/org-toggle-macro-markers ()
  (interactive)
  (let ((old org-hide-macro-markers)
        (new (not org-hide-macro-markers)))
    (setq org-hide-macro-markers new)
    (message "Just changed org-hide-macro-markers from %s to %s" old new)
    (font-lock-mode)
    (font-lock-mode)))

(defun help/org-prp-hdln ()
  "Visit every Headline. If it doesn't have an ID property then add one and
  assign it a UUID. Attribution: URL
  `http://article.gmane.org/gmane.emacs.orgmode/99738'. It is OK to leave the
  colon separator in here because these are never used as Source-Blocks and
  the rest of the code expects the colon separator."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (dolist (p (nreverse
                (org-element-map (org-element-parse-buffer 'headline) 'headline
                  (lambda (headline) (org-element-property :begin headline)))))
      (goto-char p)
      (org-id-get-create))
    (save-buffer)))

(defun help/org-id-new ()
  "Re-purposing `org-id' hit a snag when colons were forbidden in Source-Block
  names. Adding support for a user-defined Org-Id separator would have fixed
  this but with no benefit to Org-Id. So this function removes the colon
  instead.
 "
  (interactive)
  (let* ((gend (org-id-new))
         (newid (replace-regexp-in-string ":" "_" gend)))
    newid))

(defun help/org-prp-src-blk ()
  "If it doesn't have a NAME property then add one and
   assign it a UUID. Attribution: URL `http://article.gmane.org/gmane.emacs.orgmode/99740'"
  (interactive)
  (help/org-2every-src-block
   #'(lambda (element)
       (if (not (org-element-property :name element))
           (let ((i (org-get-indentation)))
             (beginning-of-line)
             (save-excursion (insert "#+NAME: " (help/org-id-new) "\n"))
             (indent-to i)
             (forward-line 2))))))

(defconst help/org-special-pre "^\s*#[+]")

(defun help/org-2every-src-block (fn)
  "Visit every Source-Block and evaluate `FN'."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (while (re-search-forward (concat help/org-special-pre "BEGIN_SRC") nil t)
        (let ((element (org-element-at-point)))
          (when (eq (org-element-type element) 'src-block)
            (funcall fn element)))))
    (save-buffer)))

(defun help/org-babel-demarcate-block ()
  "Add a NAME property then assign it a UUID."
  (interactive)
  (org-babel-demarcate-block)
  (insert "#+name: " (help/org-id-new))
  (beginning-of-line)
  (insert "\n"))
#+END_SRC

**** Identity
:PROPERTIES:
:ID:       orgmode:gcr:vela:25F4226F-2EB2-48EC-A4D5-56DD5CCC753E
:END:

A Headline's primary key is =ID=. Use =org-id= to manage it.

#+NAME: org_gcr_2017-05-12_mara_922805E3-E016-4026-BAF6-C3BA5DFC6B5A
#+BEGIN_SRC emacs-lisp
(require 'org-id)
#+END_SRC

In Links: Never use =ID= or =CUSTOM_ID=; always use the file name and text to make
it accessible outside of Emacs.

#+NAME: org_gcr_2017-05-12_mara_6F578996-A506-4193-8566-C3FAC6102228
#+BEGIN_SRC emacs-lisp
(setq org-id-link-to-org-use-id 'nil)
#+END_SRC

Make sure that =ID= is always unique, portable, and easy to maintain by
- Using an acceptable prefix
  - Memorable
    - So you can remember where you created it and when
    - So you can share it and let the recipient know (in theory useful)
    - So you can enable a non Emacs/Org-Mode user to work with the tangled
      code referencing it's origin
  - Valid
    - Must be both LaTeX label and XHTML identifier compliant
      - ~org-lint~ checks for this
- Include the current login
- Include the current domain
- Use a UUID

#+NAME: org_gcr_2017-05-12_mara_8F2F5DAE-40B9-490D-8523-BABCAA913A71
#+BEGIN_SRC emacs-lisp
(setq org-id-prefix (concat "org_" (user-real-login-name) "_" (help/get-timestamp-no-colons) "_" (system-name)))
(setq org-id-method 'uuid)
#+END_SRC

**** Tangling
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:267EEDED-1367-405F-807C-B3C489045704
   :END:
=ID= and =NAME= are essential for successful =LP= using ~org-babel-tangle-jump-to-org~.

#+NAME: org_gcr_2017-05-12_mara_C4C2CC56-88D6-440F-A277-75B174B7F8E8
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-pre-tangle-hook #'help/org-prp-hdln)
(add-hook 'org-babel-pre-tangle-hook #'help/org-prp-src-blk)
#+END_SRC

There is a way to disable property inheritance that speeds up tangling a lot.
This is only for user-defined properties; *not* Org-Mode properties.

The problem is that you lose property inheritance which is unacceptable. Never,
never allow that. Its inconsistent with how Org-Mode works.

#+NAME: org_gcr_2017-05-12_mara_7AFF21D6-39A6-4580-8AD1-3BF24A83091A
#+BEGIN_SRC emacs-lisp
(setq org-babel-use-quick-and-dirty-noweb-expansion nil)
#+END_SRC

Assume that tangled document always live within the same directory structure
as their origin document.

#+NAME: org_gcr_2017-05-12_mara_BFB80EA4-F37F-484C-9A7E-7B97166A2F49
#+BEGIN_SRC emacs-lisp
(setq org-babel-tangle-use-relative-file-links t)
#+END_SRC

- Post tangle actions
  - Indentation
    - At first glance this is surprising! The author should be responsible for
      the indentation, right? Yes, that is right. But there is one exception:
      using ~:noweb-ref~ source block concatenation. [[http://orgmode.org/manual/noweb_002dref.html][It]] is powerful and elegant.
      But the source blocks are indented on their own line. It forces any
      reader format it to make any sense of it. That is a poor start to using
      the tangled files. So tangled files get indented.

#+NAME: org_gcr_2017-05-12_mara_1946BB7D-D2A7-40F3-BF7D-1C22B887D1F6
#+BEGIN_SRC emacs-lisp
(defun help/org-babel-post-tangle-hook-fn ()
  (interactive)
  (indent-region (point-min) (point-max) nil)
  (save-buffer))
(add-hook 'org-babel-post-tangle-hook #'help/org-babel-post-tangle-hook-fn)
#+END_SRC

***** comments
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:49787FC5-CAA7-466B-B742-0F38973E070B
    :END:

#+BEGIN_QUOTE
Toggle insertion of comments in tangled code files
#+END_QUOTE

Provide as much information as possible in the tangled artifact about the
origin artifact.

#+NAME: org_gcr_2017-05-12_mara_5516E87C-58CA-451B-84B3-BA7B9D2A284E
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :comments "noweb")
#+END_SRC

***** mkdirp
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:B0F9A321-3B69-46BB-B512-0AF3C663A4C0
    :END:

#+BEGIN_QUOTE
Toggle creation of parent directories of target files during tangling
#+END_QUOTE

#+NAME: org_gcr_2017-05-12_mara_51AE0BB2-9E85-482C-AAC6-8860D2141999
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :mkdirp "yes")
#+END_SRC

***** no-expand
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:90170E6A-AA1A-44EA-9BF8-1A6AA38FD224
    :END:

#+BEGIN_QUOTE
Turn off variable assignment and noweb expansion during tangling
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** noweb
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:E12B48AB-68E8-4515-89E3-30A16FB6FD22
    :END:

#+BEGIN_QUOTE
Toggle expansion of noweb references
#+END_QUOTE

Expand noweb references in source-blocks before:

| Activity   | Expand |
|------------+--------|
| Tangling   | T      |
| Evaluating | T      |
| Weaving    | F      |

This embraces the notion that you are telling the right thing to the
computer and the right thing to the human. By the time you get to exporting, you
ought to refer to the generated document.

#+NAME: org_gcr_2017-05-12_mara_F9D0273A-A0E4-4265-B133-C665ADE1F031
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :noweb "no-export")
#+END_SRC

***** noweb-ref
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:2836D0AA-5DBA-48AC-A338-B47002DE8D7F
    :END:

#+BEGIN_QUOTE
Specify block's noweb reference resolution target
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** noweb-sep
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:B1A57D15-6BBF-4E78-A0D9-0B02C283C6B0
    :END:

#+BEGIN_QUOTE
String used to separate noweb references
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** padline
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:DDE727A6-DDF7-4B61-9063-549614B135F0
    :END:

#+BEGIN_QUOTE
Control insertion of padding lines in tangled code files
#+END_QUOTE

- ~org-babel-tangle-jump-to-org~ requires padded lines. This configuration could
  arguably appear in the "Programming" heading because it impacts operation. It
  lives here because it *must* occur as part of the Tangling activity so that it
  can be used in the Programming activity.
- Often I go back and for on this one. Sometimes it is nicer to have less spaces
  in generated code when guests are viewing it. When no one else is reading it
  I love the spaces. Defaulting to what I like.

#+NAME: org_gcr_2017-05-12_mara_D7CD2E35-5BE4-4003-8D78-26D939E0031E
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :padline "yes")
#+END_SRC

***** session
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:8219A42A-E90F-418A-8EF0-EB150CF6D730
    :END:

#+BEGIN_QUOTE
Preserve the state of code evaluation
#+END_QUOTE

{{{lp-configure-each-sb}}}

For some situations, this may be the same for every source block for a
particular language. R is a good example.

***** shebang
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:542185DD-4FD6-459A-B422-DA7B546FB292
    :END:

#+BEGIN_QUOTE
Make tangled files executable
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** tangle
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:EA716FC9-4A90-4F3E-ABD0-31FEA575C969
    :END:

#+BEGIN_QUOTE
Toggle tangling and specify file name
#+END_QUOTE

#+NAME: org_gcr_2017-05-12_mara_B11664F9-C0E7-48C0-8050-0A66B199FEBF
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :tangle "no")
#+END_SRC

***** tangle-mode
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:5F0B7157-2DC8-4AFD-8F26-4B21025A5ECE
    :END:

#+BEGIN_QUOTE
Set permission of tangled files
#+END_QUOTE

{{{lp-configure-each-sb}}}

**** Evaluating
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:ED23FF0B-1F90-435C-9B56-ACA06C1ACAE0
   :END:

Load the required languages
#+NAME: org_mark_2020-01-24T12-49-05+00-00_mini12_FEAA4B06-655F-4F20-ACE9-24DEFBBC209A
#+begin_src emacs-lisp
(use-package ob-sml
  :mwb-load-path "fork/ob-sml")
#+end_src
Org-Mode may use all of the listed languages.

#+NAME: org_gcr_2017-05-12_mara_54FEB960-2B87-41E3-A4E4-6DE9DED9B1BD
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (org . t)
   (sml . t)
   ;;
   (C . t)
   (python . t)
   ;;
   (makefile . t)
   (shell . t)))
#+END_SRC
***** cache
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:49B8BFE9-643B-450F-A8A1-20CE3079E215
    :END:

#+BEGIN_QUOTE
Avoid re-evaluating unchanged code blocks
#+END_QUOTE

{{{lp-configure-each-sb}}}

Default =no= is correct for nearly every scenario.

***** colnames
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:4D683007-14AE-4A7D-A506-E2301FD32E82
    :END:

#+BEGIN_QUOTE
Handle column names in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** dir
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:CD1494F1-0A2A-44D0-9955-0D0501AF1539
    :END:

#+BEGIN_QUOTE
Specify the default (possibly remote) directory for code block execution
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** epilogue
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:CA7F5086-9D4B-4847-9449-3231CE027804
    :END:

#+BEGIN_QUOTE
Text to append to code block body
#+END_QUOTE

See Prologue.

***** eval
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:0329BACE-2C99-4BB3-A7A5-7C800EF53FAD
    :END:

#+BEGIN_QUOTE
Limit evaluation of specific code blocks
#+END_QUOTE

Never evaluate source-blocks or in-line-source-blocks *on export*.

#+NAME: org_gcr_2017-05-12_mara_FE5C21BF-9766-4277-A413-B3AF5C255C39
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :eval "never-export")
(help/set-org-babel-default-inline-header-args :eval "never-export")
#+END_SRC

~org-export-use-babel~

How does this overlap with the ~:eval~ header arg? Are they the same or
different? What is the point? For a while I thought I understood the
difference and how it worked. Later when I ran into a problem with my exports
I realized that I didn't understand the difference!

I thought that I had configured inline source blocks to

1) Have their results replaced on each export
2) Only include their results, excluding their source code
3) Allow execution of source blocks interactively, never on export

It is all documented here [[Literate Programming]].

Instead of that, when I exported, the results /weren't/ replaced and the source
code /was/ included: exactly the opposite of what I had wanted to happen. Ouch!

Source blocks include a header arg ~:eval~ that controls evaluation of source
blocks. I'd configured them all (both normal source blocks and inline source
blocks) with the setting "never-export". Never-export makes it so that you can
evaluate source blocks when you are editing the document but they can never be
evaluated during export. That is why #3 worked correctly. But I will still
stuck with #1-#2.

Long story short after reviewing what I was thought every setting regarding
evaluating and exportation I ended up on ~org-export-use-babel~. It seemed silly
to read it's documentation again because I'd read it so many times that I
though I knew it inside and out: it controls whether or not code blocks /can/ be
evaluated on export. I'd set it to true though, to be totally sure that the
system worked as I had expected. Now *two* places disabled evaluation on export:
header args and this variable. It was here though that my understanding had a
major mistake!

~org-export-use-babel—~ answers two questions (controls two features) with one
answer:

1) Is code evaluated on export?
2) Are header args obeyed?

The key is the second part: the header args must be obeyed to make ~replace~
work. My problem was that I never noticed that this variable controls both
execution and header args use. The latter, somehow I totally missed that. So
no matter how I configured the header-args, those results /could never/ be
replaced because the header-args are *totally ignored*. Wow, I was so happy to
discover this.

In the end the configuration was super simple: set ~org-export-use-babel~ to
true, make sure the desired source blocks were set to ~:never-export~, and the
inline source blocks were setup to replace.

#+NAME: org_gcr_2017-05-12_mara_DB816700-04B3-45D0-9847-490BBFE9DBA0
#+BEGIN_SRC emacs-lisp
(setq org-export-use-babel t)
#+END_SRC

***** file
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:80824708-62AF-4337-A517-828DA22D1FCA
    :END:

#+BEGIN_QUOTE
Specify a path for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** file-desc
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:6F9A2745-7118-469E-9FDB-4B327C02E5FA
    :END:

#+BEGIN_QUOTE
Specify a description for file results
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** file-ext
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:0716A48E-9227-44FD-B1FA-185DF6545E91
    :END:

#+BEGIN_QUOTE
Specify an extension for file output
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** hlines
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:721F4E5E-A343-4D7C-A3A3-12A544B3A273
    :END:

#+BEGIN_QUOTE
Handle horizontal lines in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** output-dir
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:D0DDFE88-1B41-4A67-A5F4-88B1B35A7513
    :END:

#+BEGIN_QUOTE
Specify a directory to write file output to
#+END_QUOTE

{{{lp-configure-each-sb}}}

One example is a System where *all* intermediate results are stored to individual
files.

***** post
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:1A4DEC98-C735-4D88-8261-6AD13C495EF2
    :END:

#+BEGIN_QUOTE
Post processing of code block results
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** prologue
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:3D1780E0-2E6D-428C-916D-BFB10E79C76F
    :END:

#+BEGIN_QUOTE
Text to prepend to code block body
#+END_QUOTE

{{{lp-configure-each-sb}}}

For some situations, this may be the same for every source block for a
particular language. The user manual described ~gnuplot~, which often shows up on
the list and the solution is to ~reset~ the session.

Another example, say that you've got a bunch of R Source-Blocks and you want to
be able to rearrange them as you please. You want to be sure that there are no
dependencies between them on bindings created in the workspace. Set ~prologue~
to ~rm(list = ls())~.

Epilgue works hand-in-hand with this.

***** results
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:2755571E-113B-436E-9EEC-26618A55A27E
    :END:

#+BEGIN_QUOTE
Specify the type of results and how they will be collected and handled
#+END_QUOTE

Ways to configure =:results=: src_emacs-lisp{(apply '* (-keep 'cdr '((Collection . 2) (Type . 4) (Format . 7) (Handling . 4))))} {{{results(=224=)}}}.

This system stores the results of evaluation in the source document. It believes
that the results are critical to the research.

Keep the document as close to being executable as possible; make it very visible
when it is not.

- Collection
  - =value=: Functions have a single result. So do Source-Blocks.
- Type
  - =scalar=
    - Functions always return a single result
    - Evidence demonstrates that I use this or =output= most of the time and I
      want to configure this to work right for =Literate Programming= by default
      because it feels better.
  - =WAS=
    - Because in theory returning a collection was flexible (see below). In
      practice I never ever used this.
    - =table=:
      - Tables are the best type because
        - Dimensions make them human-readable in text.
        - Work with Babel LP.
        - Appear as lists to programming languages.
        - Weaves well.
        - Inline Source-Blocks disallow tables so use scalars instead.
- Format
  - =drawer=: Enable results replacement
- Handling
  - =replace=: Replace them each time you evaluate the block.

#+NAME: org_gcr_2017-05-12_mara_2F6FE420-85A2-4A99-AAB7-20473F02B878
#+BEGIN_SRC emacs-lisp
(defconst help/org-sb-results-cfg "value scalar drawer replace")
(help/set-org-babel-default-header-args :results help/org-sb-results-cfg)
#+END_SRC

Their format will show that they are results. Inline source blocks
automatically get formatted as verbatim. For some reason, this only needs to
be configured as =replace= to work unlike normal source blocks. Copying the
configuration from normal source blocks here breaks the replacement
functionality.

#+NAME: org_gcr_2017-05-12_mara_3E59D8A5-2B8A-44D6-A863-7051E8E62421
#+BEGIN_SRC emacs-lisp
(defconst help/org-isb-results-cfg "replace")
(help/set-org-babel-default-inline-header-args :results help/org-isb-results-cfg)
#+END_SRC

***** rownames
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:B184A507-1B03-4096-A4D8-E50A1DA047DB
    :END:

#+BEGIN_QUOTE
Handle row names in tables
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** sep
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:F1336AAA-68EF-4E87-B253-458103B6FF2F
    :END:

#+BEGIN_QUOTE
Delimiter for writing tabular results outside Org
#+END_QUOTE

{{{lp-configure-each-sb}}}

***** var
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:3B4D638C-82EE-47F3-835C-52B2F03620A0
    :END:

#+BEGIN_QUOTE
Pass arguments to code blocks
#+END_QUOTE

- *The* most revealing of the power of Org-Mode's LP offering
- Values-by-reference
  - Table
  - List
  - Source-Block without and with parameters
  - Literal-Block
- Idexable variable values
- Emacs Lisp evaluation of variables

**** Weaving
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:F71DD8BA-B853-4903-A348-400E13C0E6F8
   :END:

Help the reader make sense of the document by displaying it's internal
properties.

#+NAME: org_gcr_2017-05-12_mara_FDA3AE76-9095-49A6-8D3B-F522060FFE0E
#+BEGIN_SRC emacs-lisp
(setq org-export-with-properties t)
#+END_SRC

- Stop your flow to monitor the export for errors
  - <2016-01-19 Tue> Expect it to start weaves for all weavers asynchronously.
    Does not do so; main thread is blocked until weaves complete.

#+NAME: org_gcr_2017-05-12_mara_75498F0F-C121-4954-9E27-B6859173C1E1
#+BEGIN_SRC emacs-lisp
(setq org-export-in-background nil)
#+END_SRC

Make sure that exported files are Unicode UTF-8.

#+NAME: org_gcr_2017-05-12_mara_400FE840-685A-4130-B697-8835F8FDB1FF
#+BEGIN_SRC emacs-lisp
(setq org-export-coding-system 'utf-8)
#+END_SRC

Line breaks are for humans typing them, not for publishing.

When publishing to ASCII, set this property in the file.

#+NAME: org_gcr_2017-05-12_mara_DE83AAE3-B4D6-4AB8-83BF-EE3252F9F6D2
#+BEGIN_SRC emacs-lisp
(setq org-export-preserve-breaks nil)
#+END_SRC

When exporting anything, do not insert the exported content into the kill ring.

#+NAME: org_gcr_2017-05-12_mara_564FC52E-A339-4209-9B6E-86E890D8835C
#+BEGIN_SRC emacs-lisp
(setq org-export-copy-to-kill-ring nil)
#+END_SRC

By default I never want a table of contents generated. It is so easy to enable
it with a property, it will be fine to turn it off.

#+NAME: org_gcr_2017-05-12_mara_BF7F8052-2578-4BA2-9740-DA437B55447B
#+BEGIN_SRC emacs-lisp
(setq org-export-with-toc nil)
#+END_SRC

On export, maintain the literal spacing as found in the source block. Obviously
this is important for make-files. It is really important everywhere because
anything else would violate the law of least surprise.

#+NAME: org_gcr_2017-05-12_mara_5E57CCF7-6D5D-42B4-BD49-26D55EC0891C
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

Maximize flexibility for weaving operations during export.

#+NAME: org_gcr_2017-05-12_mara_BC45B41D-BED3-4448-BFE6-9EE43DAD37E2
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

Disable element caching because it might break weaves via [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00646.html][this thread]].

#+NAME: org_gcr_2017-05-12_mara_DA69CB4F-597A-4057-A532-2B9EC5E4FCF9
#+BEGIN_SRC emacs-lisp
(setq org-element-use-cache nil)
#+END_SRC

***** exports
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:57B3786B-017F-4F6E-89F9-05642304F3B6
    :END:

#+BEGIN_QUOTE
Export code and/or results
#+END_QUOTE

Always share source blocks and their results. Whether or not to generate a
result for a particular source block is configured per-block. If you don't want
to share a result for a source block then disable storage of results on that
block.

#+NAME: org_gcr_2017-05-12_mara_C933F9D3-EC64-4D09-980D-FB8C7E39CB92
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :exports "both")
#+END_SRC

Use inline Source-Blocks to provide values read as part of the document. Don't
show their source code. Allows inline Source-Blocks to function as /rich/ macros
when combined with ~org-sbe~.

#+NAME: org_gcr_2017-05-12_mara_8D15DF2A-D8EE-4797-AD1C-CB81CFE1404B
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-inline-header-args :exports "results")
#+END_SRC

***** wrap
    :PROPERTIES:
    :ID:       orgmode:gcr:vela:94D6B3BE-5DA1-499A-B5C7-A6B71710A1EA
    :END:

#+BEGIN_QUOTE
Mark source block evaluation results
#+END_QUOTE

Inline-Source-Blocks are recognizable by their =verbatim= font. They do not
interrupt the flow. Source-Blocks are their own entities. They stand out. Their
results need to be visibly noticeably different for the reader by making them
=EXAMPLE= special blocks.

#+NAME: org_gcr_2017-05-12_mara_9C45DF8B-120E-47C8-9CA8-04EE6EEB162A
#+BEGIN_SRC emacs-lisp
(help/set-org-babel-default-header-args :wrap "EXAMPLE")
#+END_SRC

Diagramming languages require =RESULTS= output for exporting.

** Footnotes
:PROPERTIES:
:ID:       org_mark_2020-03-06T13-08-35+00-00_mini12.local:31819091-6339-413D-9DD1-C248C5F6520B
:END:
Need to set up an auto-sort
#+NAME: org_mark_2020-03-06T13-08-35+00-00_mini12.local_632B9653-A2FD-4226-A130-A0260FCD9B66
#+begin_src emacs-lisp :noweb-ref org-config :tangle no
(setq org-footnote-auto-adjust t)
#+end_src


** Prettify
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:722CBA7A-79F6-4695-B710-ACF8F3C1F219
:END:
Make org mode look prettier. See also the customization
Basically set to variable pitch font but note Aquamacs has a way (different of course to do this)

*** Circular bullets
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:00807D90-E9FE-4A4E-ABAE-4EF867BE97EA
:END:
From [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][here]]
 #+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_BD3DD793-C3F1-46EE-A7C2-72CA21C5066E
 #+begin_src emacs-lisp
 (use-package org-bullets
   :ensure t
   :init (add-hook 'org-mode-hook 'org-bullets-mode))
 #+end_src
	#+begin_src emacs-lisp
    (font-lock-add-keywords
     'org-mode
     '(("^ +\\([-*]\\) "
        (0
         (prog1
             ()
           (compose-region
            (match-beginning 1)
            (match-end 1)
            "•"))))))
	#+end_src
*** Set fonts for headers
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:27E089B7-580B-46F8-A96A-68754C385DAF
:END:
   Set by size not colour.
   This is code to be run once so not tangled - but does not seem to save so tangle it
   #+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_A91880B6-9B60-44BC-B73B-3B49DB8775CC
   #+begin_src emacs-lisp


   (let* ((variable-tuple
		   (cond ((x-list-fonts   "Gill Sans") '(:font   "Gill Sans"))
				 ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
				 ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
				 ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
				 ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
				 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
		  (base-font-color (face-foreground 'default nil 'default))
		  (headline       `(:inherit variable-pitch :weight regular :foreground ,base-font-color)))

	 (custom-theme-set-faces
	  'user
	  `(org-level-8        ((t (,@headline ,@variable-tuple))))
	  `(org-level-7        ((t (,@headline ,@variable-tuple))))
	  `(org-level-6        ((t (,@headline ,@variable-tuple))))
	  `(org-level-5        ((t (,@headline ,@variable-tuple))))
	  `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
	  `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
	  `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
	  `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.75))))
	  `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
   #+end_src
*** Indent other text
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:E1789BA1-AF3F-441B-95B6-1FD7ADABD862
:END:
	#+begin_src emacs-lisp
	(use-package org-indent
	  :defer 10
	  :ensure nil
	  :diminish)
	#+end_src
*** Line wrapping
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:EE29BA62-13AD-4C22-9ABB-AF723DCA7950
:END:
 Setting up =visual-line-mode= and making all my paragraphs one single line, so that the lines wrap around nicely in the window according to their proportional-font size, instead of at a fixed character count, which does not work so nicely when characters have varying widths. I set up a hook that automatically enables =visual-line-mode= and =variable-pitch-mode= when entering org-mode. From [[https://raw.githubusercontent.com/zzamboni/dot-emacs/master/init.org][zzamboni]]
 #+NAME: org-mode-hooks-wrapping
 #+begin_src emacs-lisp :tangle no
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
  #+end_src
** Agenda
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:E8D53E27-7D3B-403A-9179-D415A9B2581A
:END:
I don't use but the hook is there. Main setup from Jerry Peng, needed as in org hydra and might as well setup up.
#+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_D54091C8-6480-46A6-B79B-3350E35DA246
#+begin_src emacs-lisp
(use-package org-agenda
  ;; :after (org)
  :commands (org-agenda)
  :config
  (progn
    (setq org-agenda-restore-windows-after-quit t)
    (setq org-agenda-window-setup 'only-window)

    (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)

    (setq org-agenda-custom-commands
          '(
            ("s" "Someday"
             ((tags "+someday/TODO"
                    ((org-agenda-overriding-header "Maybe Someday:")))))))

    (setq org-agenda-files (list  org-directory
                                  ))

    (setq org-agenda-category-icon-alist
          `(("Emacs" ,(list (all-the-icons-fileicon "emacs" :height 0.8 :v-adjust 0.05))
             nil nil :ascent center)
            ("Projects" ,(list (all-the-icons-octicon "repo" :v-adjust 0.05))
             nil nil :ascent center)

            ("Inbox" ,(list (all-the-icons-faicon "inbox" :height 0.9 :v-adjust 0.05))
             nil nil :ascent center)
            ("Personal" ,(list (all-the-icons-faicon "user" :height 0.95 :v-adjust 0.05))
             nil nil :ascent center)))

    (setq org-agenda-sorting-strategy
          '((agenda habit-down time-up priority-down category-keep)
            (todo category-keep timestamp-down)
            (tags category-keep timestamp-down)
            (search category-keep)))))
#+end_src
** Capture
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:A1CCBFF3-51A3-4B75-9EED-179DB3DD0940
:END:
I should start using this
Again from jerrypnz
#+NAME: org_mark_2020-01-23T20-21-34+00-00_mini12_951A79B2-540A-4A60-B3FA-7EEA9F02A656
#+begin_src emacs-lisp
(use-package org-capture
  ;; :after (org)
  :commands (org-capture)
  :bind (("<f13>" . org-capture)
         ("C-<f13>" . open-org-notes))
  :preface
  (defun open-org-notes ()
    (interactive)
    (find-file org-default-notes-file))
  :config
  (setq org-capture-templates
        `(("t" "TODO" entry (file org-default-notes-file)
           "* TODO %?\n%u\n")
          ("p" "Project" entry (file org-default-notes-file)
           "* %? [%] :PROJECT:\n%u\n")
          ("m" "Meeting" entry (file org-default-notes-file)
           "* Meeting notes for %? :MEETING:\n%t" :clock-in t :clock-resume t)
          ("n" "Notes" entry (file org-default-notes-file)
           "* %? \n%t"))))
#+end_src
** Mode Hydras
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:BD042FBD-8A86-4528-8410-A0403E313F56
:END:
*** Main mode
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:D4058350-C97F-4A1D-858C-70008D09A2FF
:END:
Using new pretty mode hydra but with #+setupfile: from the matcha

#+NAME: org-mode-hydrae
#+begin_src emacs-lisp :tangle no
:mode-hydra
(org-mode
 ("Edit Subtree"
  (("x" org-cut-subtree "Cut")
   ("w" org-copy-subtree "Copy")
   ("y" org-paste-subtree "Paste")
   ("Y" org-yank "Yank")
   ("W" org-clone-subtree-with-time-shift "Clone"))
  "Babel"
  (("e" org-babel-execute-src-block "Execute Source Block")
   ("'" org-edit-src-code "Edit Source")
   ("b" org-babel-tangle "Tangle"))
  "Insert"
  (("m" org-meta-return "Heading")
   ("M" org-insert-heading-respect-content "Heading Under")

   ("T" org-insert-todo-heading-respect-content "Todo Under"))
  "Org"
  (("a" org-agenda "Agenda")
   ("c" org-capture "Capture")
   ("R" org-refile "Refile")
   ("r" hydra-org-refile/body "Refile Hydra")
   ("t" org-todo "Todo"))
  "Links"
  (("l" org-store-link "Store")
   ("i" org-insert-link "Insert")
   ("f" org-footnote-action "Footnote"))))

#+end_src
*** Refile
:PROPERTIES:
:header-args: :noweb-ref  org-mode-hydrae-refile
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:B74FA3DA-C2DF-4A3E-8122-A95BCA29C592
:END:
Based off https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/ to refile to separate files. No doubt will extend in future and follow the later bits.
**** Code
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:F95400D0-B750-4B14-A1F5-78BF1E070185
:END:
#+NAME: org-mode-hydrae-code
#+begin_src emacs-lisp :tangle no
(defun my/refile (file headline &optional arg)
  (let ((pos (save-excursion
               (find-file (expand-file-name file org-directory))
               (org-find-exact-headline-in-buffer headline))))
    (org-refile arg nil (list headline file nil pos)))
  (switch-to-buffer (current-buffer)))
#+end_src

**** Hydra
:PROPERTIES:
:ID:       org_mark_2020-01-23T20-21-34+00-00_mini12:57EFAC1C-E2F3-49FC-AAC4-5D152747D36E
:END:
I am not certain how ro add a name in the use-package so use plain macro in :config
#+NAME: org_mark_2020-02-13T09-56-02+00-00_mini12_EF3743C9-57EA-438C-97A4-5EBA94AA7A89
#+begin_src emacs-lisp :tangle no
(pretty-hydra-define hydra-org-refile
  (:color pink :quit-key "q")
  ("Shopping"
   (("g" (my/refile "shopping.org" "Groceries") "Groceries")
    ("s" (my/refile "shopping.org" "Other") "Other shopping"))
   "computer"
   (("e" (my/refile "dev_todo.org" "Emacs") "Emacs tasks")
    ("p" (my/refile "dev_todo.org" "programming") "Prog tasks")
    ("r" (my/refile "dev_todo.org" "racket") "Racket tasks"))
   "Other"
   (("w" (my/refile "dev_todo.org" "racket") "Web"))))
#+end_src
