#+TITLE Emacs configuration org Mode - all the complete things
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb
#+STARTUP: content
* Start using org mode
This is my first attempt at learning it.
The config is a mess as I pick up on things.
I was going to leave this to last so could make changes as I used org. However as I kept editing it I realised that I needed to comment and than was better in literate programming so this is the first non key file to be done.
This is a large config and might be easier to document if not all put in a use-package (or break my rule and let some parts not be complete lisp)
** use package issues
This config gets long so difficult to see in one block
Currently I put things outside use-package
See in future noweb see https://raw.githubusercontent.com/zzamboni/dot-emacs/master/init.org if add name property it seems to work
** Noweb issues
noweb allows me to totally reorder the org file so better reading so support code can be in an appendix etc.
However org-babel-detangle cannot deal with detangling as it looks for the whole file and tries to do a block at a time - which does not work with embedded blocks. After days debugging this (well several attempts until it clicked) I found confirmation https://news.ycombinator.com/item?id=17653473
One fix might be to just detangle the current block.
** Grettke
This seems one of the most complete literate programming setups and he does have weave but no examples with links. He does saya few things so lets try.
As everything is after loading of org dump in a config section after the rest.


* Load and setup org mode
org-mode is a pain as we need a newer than aquamacs supplies and also there are recommendations to use an even later version. Also re packaging emacs package.el reads already built stuff others e.g. straight.el don't and that could be a problem with org-mode. There are reasons not to use the org repo but Elpa - [[https://www.reddit.com/r/emacs/comments/5sx7j0/how_do_i_get_usepackage_to_ignore_the_bundled/ddix2ta/?utm_source=share&utm_medium=web2x][from Reddit]] basically possible security issues so I am with ELPA and missing org-contrib.

Aug 2019 got an error in cut subtree so revert to org mode with Aquamacs nad lose formatting of code blocks. (and will get namne changes in links in generated files)
** The use package setup
Note Hydra is not really used after just a couple of weeks.
  #+begin_src emacs-lisp :noweb tangle
  (use-package org
    :ensure t
    :bind
    <<key-binds>>
    :config
    (setq org-datetree-add-timestamp (quote active)
          org-default-notes-file "~/SyncServices/Dropbox/Docs/org/notes.org"
          org-directory "/Users/mark/SyncServices/Dropbox/Docs/org"
;;          org-use-speed-commands t
)
    :hook
    <<org-mode-hooks>>
    <<org-mode-hooks-wrapping>>
<<org-mode-hydrae>>
<<org-mode-hydrae-code>>
<<org-mode-hydrae-refile>>
<<org-grettke>>
    )
  #+end_src
*** Key bindings
Put the bind bit in noweb
#+NAME: key-binds
#+begin_src emacs-lisp :tangle no
(
 ;; ("H-s" . org-babel-tangle-jump-to-org)
 ("H-s" . org-babel-detangle)           ; actually update
 :map org-mode-map
 ("H-s" . org-edit-special)
 ("<f5>" . org-ctrl-c-ctrl-c)
 :map org-src-mode-map
 ("H-s" . org-edit-src-exit)
 ("A-s" . org-edit-src-save)            ; I press by mistake but it makes sensenowsavenotsaveandexit
 ;; :map org-capture-mode-map
 ;; ("<f12>" . org-capture-finalize)
 )
#+end_src

*** Hack around
basically can't edit the above as tangle - this is ironically the best suggestion for wring in code with outshine and not org mode
**** Org capture
From http://doc.norang.ca/org-mode.html#Capture
#+begin_src emacs-lisp

;; ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
;; (setq org-capture-templates
;;       (quote (("t" "todo" entry (file "~/git/org/refile.org")
;;                "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
;;               ("r" "respond" entry (file "~/git/org/refile.org")
;;                "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
;;               ("n" "note" entry (file "~/git/org/refile.org")
;;                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
;;               ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
;;                "* %?\n%U\n" :clock-in t :clock-resume t)
;;               ("w" "org-protocol" entry (file "~/git/org/refile.org")
;;                "* TODO Review %c\n%U\n" :immediate-finish t)
;;               ("m" "Meeting" entry (file "~/git/org/refile.org")
;;                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
;;               ("p" "Phone call" entry (file "~/git/org/refile.org")
;;                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
;;               ("h" "Habit" entry (file "~/git/org/refile.org")
;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))


(setq org-capture-templates
      '(("n" "Thought or Note"  entry
         (file org-default-notes-file)
         "* %?\n\n  %i\n\n  See: %a" :empty-lines 1)
        ("t" "todo" entry (file org-default-notes-file)
         "* TODO %?\n%U\n%a\n" )
        ))
#+end_src

*** TODO Save org files saved in dropbox dir automatically (NB not emacs autosave)
See https://www.reddit.com/r/emacs/comments/9e5h4f/is_there_a_way_to_autosave_org_note_buffers/ and real-auto-save-mode and the hook
*** TODO Tangle on save
This code is unreadable the consts would make more sense not being there as they would then match the documentation
#+NAME: org-mode-hooks
	#+begin_src emacs-lisp :tangle no
(org-mode . (lambda ()
              (add-hook
               'after-save-hook
               'org-babel-tangle
               'run-at-end
               'only-in-org-mode)))
	#+end_src
** Setup outside use-package
*** Imenu to provide info for treemacs and contextual menu
  #+begin_src emacs-lisp
  (add-hook 'org-mode-hook
			(lambda () (imenu-add-to-menubar "Imenu")))
  (setq org-imenu-depth 6)
  #+end_src
** Babel initialisation
Code block behaviour - but also see customization for appearance
 #+begin_src emacs-lisp
 (setq org-src-fontify-natively t
	   org-src-tab-acts-natively t
	   org-confirm-babel-evaluate nil
	   org-edit-src-content-indentation 0
	   org-startup-indented t)
 #+end_src
*** Grettke babel
 :PROPERTIES:
      :header-args: :noweb-ref org-grettke :tangle no
      :END:
**** Minimal config
Grettke has two set ups
***** Garbage collection
:PROPERTIES:
:ID:       org_gcr_2017-07-30_mara:D9207828-3783-4599-BA48-A6EB2C3FCAE4
:END:
Clear memory and disable garbage collection or return garbage collection to
normal.

#+NAME: org_gcr_2017-07-29_mara_3F459DF6-EA6A-4D48-BB0A-3670FCB25713
#+BEGIN_SRC emacs-lisp
(setq help/default-gc-cons-threshold gc-cons-threshold)
(defun help/set-gc-cons-threshold (&optional multiplier notify)
  "Set `gc-cons-threshold' either to its default value or a
   `multiplier' thereof."
  (let* ((new-multiplier (or multiplier 1))
         (new-threshold (* help/default-gc-cons-threshold
                           new-multiplier)))
    (setq gc-cons-threshold new-threshold)
    (when notify (message "Setting `gc-cons-threshold' to %s" new-threshold))))
#+END_SRC
Helper doubles available memory.

#+NAME: org_gcr_2017-08-02_mara_92B4C3CB-6CE3-4211-8A18-C7BE905BFBC2
#+BEGIN_SRC emacs-lisp
(defun help/double-gc-cons-threshold () "Double `gc-cons-threshold'." (help/set-gc-cons-threshold 2))
#+END_SRC

Double garbage collection during tangling. Instead of storing this in the
primary Org-Mode Literate Programming configuration I want it here so that it
is always available.

#+NAME: org_gcr_2017-08-02_mara_DAC6E558-E49D-4551-8789-2B3FB88F6CE7
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-pre-tangle-hook #'help/double-gc-cons-threshold)
(add-hook 'org-babel-post-tangle-hook #'help/set-gc-cons-threshold)
#+END_SRC

Display system info.

#+NAME: org_gcr_2017-05-12_mara_901541A6-1DB6-4EA2-8688-9C888C41902A
#+BEGIN_SRC emacs-lisp
(defun help/display-system-info ()
  (interactive)
  (message "<<<Org Information>>>\nThis buffer file: %s\nAs Of: %s\nOrg-Version: %s\nOrg-Git-Version:%s\nEmacs-Version: %s\nNoweb wrap start and stop delimeters: '%s' and '%s'\norg-babel-default-header-args:\n"
           buffer-file-name
           (help/get-timestamp)
           (org-version)
           (org-git-version)
           (emacs-version)
           org-babel-noweb-wrap-start
           org-babel-noweb-wrap-end)
  (pp org-babel-default-header-args))
(help/display-system-info)
#+END_SRC
****

***** Helper Functions
   :PROPERTIES:
   :ID:       orgmode:gcr:vela:B14776FD-6835-4D1D-BCD3-50D56555423C
   :END:

Help configure Org-Mode.

#+NAME: org_gcr_2017-05-12_mara_21BEDC86-D1A3-43FC-85AC-8FF54D161E2F
#+BEGIN_SRC emacs-lisp
(defun help/set-org-babel-default-header-args (property value)
  "Easily set system header arguments in org mode.

PROPERTY is the system-wide value that you would like to modify.

VALUE is the new value you wish to store.

Attribution: URL `http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments'"
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(defun help/set-org-babel-default-inline-header-args (property value)
  "See `help/set-org-babel-default-header-args'; same but for inline header args."
  (setq org-babel-default-inline-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-inline-header-args))))

(defun help/set-org-babel-default-header-args:R (property value)
  "See `help/set-org-babel-default-header-args'; same but for R.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:R
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:R))))

(defun help/set-org-babel-default-header-args:ditaa (property value)
  "See `help/set-org-babel-default-header-args'; same but for ditaa.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:ditaa
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:ditaa))))

(defun help/set-org-babel-default-header-args:dot (property value)
  "See `help/set-org-babel-default-header-args'; same but for dot.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:dot
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:dot))))

(defun help/set-org-babel-default-header-args:plantuml (property value)
  "See `help/set-org-babel-default-header-args'; same but for plantuml.

This is a copy and paste. Additional languages would warrant a refactor."
  (setq org-babel-default-header-args:plantuml
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args:plantuml))))

(defun help/org-toggle-macro-markers ()
  (interactive)
  (let ((old org-hide-macro-markers)
        (new (not org-hide-macro-markers)))
    (setq org-hide-macro-markers new)
    (message "Just changed org-hide-macro-markers from %s to %s" old new)
    (font-lock-mode)
    (font-lock-mode)))

(defun help/org-prp-hdln ()
  "Visit every Headline. If it doesn't have an ID property then add one and
  assign it a UUID. Attribution: URL
  `http://article.gmane.org/gmane.emacs.orgmode/99738'. It is OK to leave the
  colon separator in here because these are never used as Source-Blocks and
  the rest of the code expects the colon separator."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (dolist (p (nreverse
                (org-element-map (org-element-parse-buffer 'headline) 'headline
                  (lambda (headline) (org-element-property :begin headline)))))
      (goto-char p)
      (org-id-get-create))
    (save-buffer)))

(defun help/org-id-new ()
  "Re-purposing `org-id' hit a snag when colons were forbidden in Source-Block
  names. Adding support for a user-defined Org-Id separator would have fixed
  this but with no benefit to Org-Id. So this function removes the colon
  instead.
 "
  (interactive)
  (let* ((gend (org-id-new))
         (newid (replace-regexp-in-string ":" "_" gend)))
    newid))

(defun help/org-prp-src-blk ()
  "If it doesn't have a NAME property then add one and
   assign it a UUID. Attribution: URL `http://article.gmane.org/gmane.emacs.orgmode/99740'"
  (interactive)
  (help/org-2every-src-block
   #'(lambda (element)
       (if (not (org-element-property :name element))
           (let ((i (org-get-indentation)))
             (beginning-of-line)
             (save-excursion (insert "#+NAME: " (help/org-id-new) "\n"))
             (indent-to i)
             (forward-line 2))))))

(defconst help/org-special-pre "^\s*#[+]")

(defun help/org-2every-src-block (fn)
  "Visit every Source-Block and evaluate `FN'."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search t))
      (while (re-search-forward (concat help/org-special-pre "BEGIN_SRC") nil t)
        (let ((element (org-element-at-point)))
          (when (eq (org-element-type element) 'src-block)
            (funcall fn element)))))
    (save-buffer)))

(defun help/org-babel-demarcate-block ()
  "Add a NAME property then assign it a UUID."
  (interactive)
  (org-babel-demarcate-block)
  (insert "#+name: " (help/org-id-new))
  (beginning-of-line)
  (insert "\n"))
#+END_SRC

** Prettify
Make org mode look prettier. See also the customization
Basically set to variable pitch font but note Aquamacs has a way (different of course to do this)

*** Circular bullets
From [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][here]]
 #+begin_src emacs-lisp
 (use-package org-bullets
   :ensure t
   :init (add-hook 'org-mode-hook 'org-bullets-mode))
 #+end_src
	#+begin_src emacs-lisp
    (font-lock-add-keywords
     'org-mode
     '(("^ +\\([-*]\\) "
        (0
         (prog1
             ()
           (compose-region
            (match-beginning 1)
            (match-end 1)
            "•"))))))
	#+end_src
*** Set fonts for headers
   Set by size not colour.
   This is code to be run once so not tangled - but does not seem to save so tangle it
   #+begin_src emacs-lisp


   (let* ((variable-tuple
		   (cond ((x-list-fonts   "Gill Sans") '(:font   "Gill Sans"))
				 ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
				 ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
				 ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
				 ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
				 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
		  (base-font-color (face-foreground 'default nil 'default))
		  (headline       `(:inherit variable-pitch :weight regular :foreground ,base-font-color)))

	 (custom-theme-set-faces
	  'user
	  `(org-level-8        ((t (,@headline ,@variable-tuple))))
	  `(org-level-7        ((t (,@headline ,@variable-tuple))))
	  `(org-level-6        ((t (,@headline ,@variable-tuple))))
	  `(org-level-5        ((t (,@headline ,@variable-tuple))))
	  `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
	  `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
	  `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
	  `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.75))))
	  `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
   #+end_src
*** Indent other text
	#+begin_src emacs-lisp
	(use-package org-indent
	  :defer 10
	  :ensure nil
	  :diminish)
	#+end_src
*** Line wrapping
 Setting up =visual-line-mode= and making all my paragraphs one single line, so that the lines wrap around nicely in the window according to their proportional-font size, instead of at a fixed character count, which does not work so nicely when characters have varying widths. I set up a hook that automatically enables =visual-line-mode= and =variable-pitch-mode= when entering org-mode. From [[https://raw.githubusercontent.com/zzamboni/dot-emacs/master/init.org][zzamboni]]
 #+NAME: org-mode-hooks-wrapping
 #+begin_src emacs-lisp :tangle no
    (org-mode . visual-line-mode)
    (org-mode . variable-pitch-mode)
  #+end_src
** TODO Hydras for tangling
The template one is broken by org-mode version  - I suspect I need to learn yasnippet
In practice I don't use that.
 #+begin_src emacs-lisp
 (defhydra mwb-hydra-org-code
   (:color teal)
   ""
   ("e" org-edit-special "Edit the code")
   ("i" hydra-org-template/body "Insert code") ; FIXME
   ("t" org-babel-tangle "Tangle buffer")
   ("q" nil "cancel"))

 #+end_src
** Agenda
I don't use but the hook is there. Main setup from Jerry Peng, needed as in org hydra and might as well setup up.
#+begin_src emacs-lisp
(use-package org-agenda
  ;; :after (org)
  :commands (org-agenda)
  :config
  (progn
    (setq org-agenda-restore-windows-after-quit t)
    (setq org-agenda-window-setup 'only-window)

    (advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)

    (setq org-agenda-custom-commands
          '(
            ("s" "Someday"
             ((tags "+someday/TODO"
                    ((org-agenda-overriding-header "Maybe Someday:")))))))

    (setq org-agenda-files (list  org-directory
                                  ))

    (setq org-agenda-category-icon-alist
          `(("Emacs" ,(list (all-the-icons-fileicon "emacs" :height 0.8 :v-adjust 0.05))
             nil nil :ascent center)
            ("Projects" ,(list (all-the-icons-octicon "repo" :v-adjust 0.05))
             nil nil :ascent center)

            ("Inbox" ,(list (all-the-icons-faicon "inbox" :height 0.9 :v-adjust 0.05))
             nil nil :ascent center)
            ("Personal" ,(list (all-the-icons-faicon "user" :height 0.95 :v-adjust 0.05))
             nil nil :ascent center)))

    (setq org-agenda-sorting-strategy
          '((agenda habit-down time-up priority-down category-keep)
            (todo category-keep timestamp-down)
            (tags category-keep timestamp-down)
            (search category-keep)))))
#+end_src
** Capture
I should start using this
Again from jerrypnz
#+begin_src emacs-lisp
(use-package org-capture
  :after (org)
  :commands (org-capture)
  :bind ("<f13>" . org-capture)
  :config
  (progn
    (setq org-capture-templates
          `(("t" "TODO" entry (file org-default-notes-file)
             "* TODO %?\n%u\n")
            ("p" "Project" entry (file org-default-notes-file)
             "* %? [%] :PROJECT:\n%u\n")
            ("m" "Meeting" entry (file org-default-notes-file)
             "* Meeting notes for %? :MEETING:\n%t" :clock-in t :clock-resume t)
            ("n" "Notes" entry (file org-default-notes-file)
             "* %? \n%t")))))
#+end_src
** Mode Hydras
*** Main mode
Using new pretty mode hydra but with #+setupfile: from the matcha

#+NAME: org-mode-hydrae
#+begin_src emacs-lisp :tangle no
:mode-hydra
(org-mode
 ("Edit Subtree"
  (("x" org-cut-subtree "Cut")
   ("w" org-copy-subtree "Copy")
   ("y" org-paste-subtree "Paste")
   ("Y" org-yank "Yank")
   ("W" org-clone-subtree-with-time-shift "Clone"))
  "Babel"
  (("e" org-babel-execute-src-block "Execute Source Block")
   ("'" org-edit-src-code "Edit Source")
   ("b" org-babel-tangle "Tangle"))
  "Insert"
  (("m" org-meta-return "Heading")
   ("M" org-insert-heading-respect-content "Heading Under")

   ("T" org-insert-todo-heading-respect-content "Todo Under"))
  "Org"
  (("a" org-agenda "Agenda")
   ("c" org-capture "Capture")
   ("r" org-refile "Refile")
   ("t" org-todo "Todo"))
  "Links"
  (("l" org-store-link "Store")
   ("i" org-insert-link "Insert"))))

#+end_src
*** Refile
Based off https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/ to refile to separate files. No doubt will extend in future and follow the later bits.
**** Code
#+NAME: org-mode-hydrae-code
#+begin_src emacs-lisp :tangle no
:config
(defun my/refile (file headline &optional arg)
  (let ((pos (save-excursion
               (find-file file)
               (org-find-exact-headline-in-buffer headline))))
    (org-refile arg nil (list headline file nil pos)))
  (switch-to-buffer (current-buffer)))
#+end_src

**** Hydra
#+NAME: org-mode-hydrae-refile
#+begin_src emacs-lisp :tangle no
:pretty-hydra
((  :color pink :quit-key "q")
 ( "Shopping"
   ( ("g" (my/refile Groceries
                     "shopping.org" "Groceries")  "Groceries")
     ("s" (my/refile "shopping.org" "Other" ) "Other shopping"))
   "computer"
   ( ("e"  (my/refile "todo.org" "Emacs" "Emacs tasks")))))
#+end_src
