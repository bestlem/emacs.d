#+TITLE Emacs configuration - setup packaging + use_package
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Packaging
Loading other code. Using emacs internal packagemenager and use-package.

This file does too much for error trapping and needs. We only need the SSL, package manager and use-package and the rest can go after org mode.
But this is working so don;t need to chnage until an actual bug + my org-mode setup is the most complex bit. So these extra things go before org-all.
* SSL  network connection
 Basically we need gnutls to connect via SSL as certificates have changed
 From https://github.com/paolodedios/dot-files/blob/1a7b4500c8ce07d0d473dbf714a2303f4d440ef5/.emacs.d/init.el
 Configure GnuTLS

 GnuTLS requires additional configuration on Emacs 25+ on macOS to prevent it
 from crashing when loading package repositories.

 @see https://github.com/davidswelt/aquamacs-emacs/issues/133
 @see https://github.com/davidswelt/aquamacs-emacs/issues/149
 @see https://www.reddit.com/r/emacs/comments/8sykl1/emacs_tls_defaults_are_downright_dangerous/
 @see https://www.gnu.org/software/emacs/manual/html_node/emacs-gnutls/Help-For-Users.html

  @note starttls.el and tls.el have been moved to obsolete in the master branch
  (what will be Emacs 27).
	 #+begin_src emacs-lisp

	 (require 'tls)

	 (with-eval-after-load 'tls
	   ;; Add the gnutls CA certificate file
	   (push "/private/etc/ssl/cert.pem"                gnutls-trustfiles)
	   ;; Add the curl CA certificate file from Macports
	   (push "/opt/local/share/curl/curl-ca-bundle.crt" gnutls-trustfiles)
	   )

	 ;; Validate TLS certificates
	 (setq gnutls-verify-error           t)

	 ;; Increase prime bits on TLS keys
	 (setq gnutls-min-prime-bits      2048)

	 ;; Network Security Module settings
	 ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Network-Security.html
	 (setq network-security-level  'medium)
	 (setq nsm-save-host-names           t)

	 ;; Set tls-checktrust to `'ask` instead of `t` to allow user to determine
	 ;; whether or not to trust a certificate.
	 (setq tls-checktrust             'ask)

	 ;; Update the tls-program invocation command line string
	 ;;
	 ;; Add `--priority` flag to  prevents the 3des certificate from being used.
	 ;; Add `:%%PROFILE_MEDIUM` to ban intermediate SHA1 certificates.
	 ;; Add `--ocsp` flag to require certificate revocation check
	 ;;
	 ;; Add `--insecure` flag as a temporary workaround for the expired certificate
	 ;; on marmalade.org from hanging Aquamacs.
	 (setq tls-program
		   '("gnutls-cli -p %p --dh-bits=2048 --ocsp --x509cafile=%t --insecure \
	 --priority='SECURE192:+SECURE128:-VERS-ALL:+VERS-TLS1.2:%%PROFILE_MEDIUM' %h"))
	 #+end_src
* Package Manager
	  Initialize packages immediately and not after init.el is read post startup
	  Note that Aquuamacs set these repositories.
	  Don't need package-initialize as use package does it all? per https://www.youtube.com/watch?v=2TSKxxYEbII but see this [[https://emacs.stackexchange.com/a/16832/9874][Emacs SE]] saying you might want to add a t parameter to that but then takes little tome so just put it in.
	   #+begin_src emacs-lisp
       (require 'package)
       (setq package-user-dir
             (expand-file-name
              (format "elpa/%s/elpa"
                      (concat emacs-version (when (getenv "MELPA_STABLE") "-stable"))) user-emacs-directory))
       (setq package-enable-at-startup nil)
        ;(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))'
        ;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
        ;(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
       (package-initialize)
	   #+end_src
* Macros to set up how modes are set up
** use-package
 include use-package setup from <https://github.com/CachesToCaches/getting_started_with_use_package/blob/master/init-use-package.el>
 #+begin_src emacs-lisp
 (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

 ;; Enable use-package
 (eval-when-compile
   (require 'use-package)
   (if init-file-debug
	   (setq use-package-verbose t
			 use-package-expand-minimally nil
			 use-package-compute-statistics t
			 )
	 (setq use-package-verbose nil
		   use-package-expand-minimally t)))
 #+end_src
*** Extras needed for loading
 These are used in the use-package macro
**** Diminish
 Mark if the mode being setup should not show in the mode/status line.
  #+begin_src emacs-lisp
  (use-package diminish   :ensure t   :demand t)
  #+end_src

**** Improve elisp
Add more functional methods.
#+begin_src emacs-lisp
(use-package dash
  :ensure t)
#+end_src

**** Elisp code
Need to alter list
#+begin_src emacs-lisp
(defun mwb-insert-before-element (find-element new-element list)
  "Find FIND-ELEMENT and then insert NEW-ELEMENT before it in LIST."
  (let ((i (-elem-index find-element list)))
    (-insert-at i new-element list)))
#+end_src

**** Key chords
#+begin_src emacs-lisp
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
#+end_src
*** Add load path
The code is relative to this file and not user-emacs-directory
So add :mwb-load-path as a new key to use-package
#+begin_src emacs-lisp
(defun use-package-normalize-mwb-paths (label arg &optional recursed)
  "Normalize a list of filesystem paths."
  (cond
   ((and arg (or (use-package-non-nil-symbolp arg) (functionp arg)))
    (let ((value (use-package-normalize-value label arg)))
      (use-package-normalize-paths label (eval value))))
   ((stringp arg)
    (let ((path (if (file-name-absolute-p arg)
                    arg
                  (mwb-user-emacs-file arg))))
      (list path)))
   ((and (not recursed) (listp arg) (listp (cdr arg)))
    (mapcar #'(lambda (x)
                (car (use-package-normalize-paths label x t))) arg))
   (t
    (use-package-error
     (concat label " wants a directory path, or list of paths")))))


;;;; :mwb-load-path

(defun use-package-normalize/:mwb-load-path (_name keyword args)
  (use-package-as-one (symbol-name keyword) args
    #'use-package-normalize-mwb-paths))

(defun use-package-handler/:mwb-load-path (name _keyword arg rest state)
  (use-package-handler/:load-path name _keyword arg rest state))

(setq use-package-keywords
      (mwb-insert-before-element :load-path :mwb-load-path  use-package-keywords))
#+end_src
** Hydra
Need key setting menus.
#+begin_src emacs-lisp
(use-package hydra :ensure t
  :config (setq hydra-look-for-remap t))
(use-package use-package-hydra :ensure t)
#+end_src
