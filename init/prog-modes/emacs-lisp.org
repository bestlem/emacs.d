#+TITLE Emacs configuration -  emacs lisp
#+PROPERTY:header-args :cache yes :tangle yes  :comments link
#+STARTUP: content

Emacs lisp specific extras

* Hydra
#+begin_src emacs-lisp
(major-mode-hydra-define emacs-lisp-mode nil
  ("Eval"
   (("b" eval-buffer "buffer")
    ("e" eval-defun "defun")
    ("r" eval-region "region"))
   "REPL"
   (("I" ielm "ielm"))
   "Test"
   (("t" ert "prompt")
    ("T" (ert t) "all")
    ("F" (ert :failed) "failed"))
   "Doc"
   (("d" describe-foo-at-point "thing-at-pt")
    ("f" describe-function "function")
    ("v" describe-variable "variable")
    ("i" info-lookup-symbol "info lookup"))))
#+end_src
* Formatter
	I am not certain this is needed now as other things do this
    #+begin_src  emacs-lisp
    (use-package elisp-format
      :disabled
      :defer 10
      :ensure t)
    #+end_src
* See macros
	Dependencies because lispy etc and macrostep use the same keys
	#+begin_src emacs-lisp
    (use-package macrostep
      :ensure t
      :after (emacs-lisp lispy-mnemonic lispy)
      :commands (macrostep-expand
                 macrostep-mode)
      :config (set macrostep-expand-in-separate-buffer t)
      :bind (:map emacs-lisp-mode
                  ("C-c e m" . macrostep-expand)))
	#+end_src
* Extra debugging
	Seen but not used yet [[https://github.com/ScottyB/edebug-x][edebug-x]]
	#+begin_src emacs-lisp
	(use-package edebug-x :disabled :ensure t)
	#+end_src
* Completion
Add company backend from John Widgley
#+begin_src emacs-lisp
(use-package company-elisp
  :after company
  :config
  (push 'company-elisp company-backends))

(setq-local company-backend '(company-elisp))
#+end_src
* Cask
[[https://github.com/Wilfred/cask-mode][cask-mode]] is a mode for editing [[https://cask.readthedocs.io/en/latest/][cask]] files. Cask is an emacs project management tool. ie contolling dependencies, and running tests like maven etc.

#+begin_src emacs-lisp
(use-package cask-mode
    :ensure t
    :defer 5)
#+end_src

* xah mode
	 This does more formatting and has useful abbreviations but I don't know if will work with lispy
     #+begin_src emacs-lisp
	 (use-package xah-elisp-mode
	   :ensure t
	   :disabled
	   :hook emacs-lisp-mode)
     #+end_src

* Regular expressions
They are not understanable so these help

** Rx
Convert a set of function calls to an RE. (it is part of emacs.
#+BEGIN_SRC emacs-lisp
(use-package rx)
#+END_SRC
** Xr
And this is the reverse
#+begin_src emacs-lisp
(use-package xr
  :ensure t)
#+end_src
* Keyboard Macros
Well not really lisp but much can be converted to it
** Show as emacs lisp
*** TODO Put these together
*** Load the converter to elisp
	#+begin_src emacs-lisp
    (use-package elmacro
      :ensure t
      :commands (elmacro-show-last-macro elmacro-show-last-commands))
	#+end_src
*** Hydra for macros
From [[https://github.com/abo-abo/hydra/wiki/Macro][Hydra wiki]] and [[https://github.com/edil3ra/emacs_save/blob/master/settings.org][another init file]] but not the latter seems to have some odd entries as well so an edit of the two
	  #+begin_src emacs-lisp
      (defhydra hydra-macro (:hint nil :color pink :pre
                                   (when defining-kbd-macro
                                     (kmacro-end-macro 1)))
        "
              ^Create-Cycle^         ^Basic^          ^Insert^        ^Save^         ^Edit^
            ╭─────────────────────────────────────────────────────────────────────────╯
                    ^_p_^           [_e_] execute    [_i_] insert    [_b_] name      [_'_] previous
                    ^^↑^^           [_d_] delete     [_c_] set       [_K_] key       [_,_] last
             _<f3>_ ←   → _e_       [_o_] edit       [_a_] add       [_x_] register  [_._] losage
                    ^^↓^^           [_r_] region     [_f_] format    [_B_] defun     [_v_] view
                    ^_k_^           [_m_] step                                       [_l_] prev lisp
                   ^^   ^^          [_s_] swap                                       [_L_] commands
            "
        ("<f3>" kmacro-start-macro :color blue)
        ("e" kmacro-end-or-call-macro-repeat)
        ("E" kmacro-end-or-call-macro-repeat :color blue)

        ("p" kmacro-cycle-ring-previous)
        ("k" kmacro-cycle-ring-next)
        ("r" apply-macro-to-region-lines)
        ("d" kmacro-delete-ring-head)
        ("o" kmacro-edit-macro-repeat)
        ("m" kmacro-step-edit-macro)
        ("s" kmacro-swap-ring)
        ("i" kmacro-insert-counter)
        ("c" kmacro-set-counter)
        ("a" kmacro-add-counter)
        ("f" kmacro-set-format)
        ("b" kmacro-name-last-macro)
        ("K" kmacro-bind-to-key)
        ("B" insert-kbd-macro)
        ("x" kmacro-to-register)
        ("'" kmacro-edit-macro)
        ("," edit-kbd-macro)
        ("." kmacro-edit-lossage)
        ("u" universal-argument)
        ("v" kmacro-view-macro)
        ("V" kmacro-view-ring-2nd-repeat)
        ("l" elmacro-show-last-macro)
        ("L" elmacro-show-last-commands)
        ("q" nil :color blue))

      (bind-key "<f3>" 'hydra-macro/body)

	  #+end_src
