#+TITLE Emacs configuration git
#+PROPERTY:header-args :cache yes :tangle yes  :comments link

#+STARTUP: content

Picked up from many places especially jerry peng  but then looked a centaur and this is very much like what I have already so add the rest
* Commit editor
:PROPERTIES:
:ID:       org_mark_mini12.local:20201224T001534.667034
:END:
This is [[https://github.com/magit/with-editor][with-editor]] Magit calls it - only exposed so I can play with keys
#+NAME: org_mark_mini12.local_20201224T204932.248625
#+begin_src emacs-lisp
(use-package with-editor
    :ensure t
    :bind (:map with-editor-mode-map
                ("A-k" . with-editor-cancel)
                ("A-s" . with-editor-finish)
                ))
#+end_src
* Magit
:PROPERTIES:
:ID:       org_mark_mini12.local:20201222T214721.127535
:END:
#+NAME: org_mark_mini12.local_20201222T214721.115179
jp-git from jetty-peng and then rest from centuar
#+NAME: org_mark_mini20.local_20210814T083258.095114
#+begin_src emacs-lisp
(use-package-elpa magit
  :defer 2
  :init (setq magit-diff-refine-hunk t)
  :config
  (setq magit-repository-directories
        '(("~/src/" . 2)
          (org-directory . 0)))
  ;; (setq magit-completing-read-function 'ivy-completing-read)
  (setq magit-completing-read-function 'magit-builtin-completing-read)
  (transient-bind-q-to-quit)

  <<magit-config>>
  (pretty-hydra-define+ jp-git
    (:color teal :quit-key "q"
			:title (mwb-icon-string "git" "Git"))
    ("Magit"
     (("s" magit-status "magit status")
      ("l" magit-log-buffer-file "commit log (current file)")
      ("L" magit-log-current "commit log (project)")
      ("b" magit-blame-addition "blame"))
     "Diff"
     (("d" magit-diff-buffer-file "diff buffer")))))
#+end_src
*** posframe
:PROPERTIES:
:ID:       org_mark_mini20.local:20210115T132445.517593
:END:
Show choices in posframe
#+NAME: org_mark_mini20.local_20210115T132445.501529
#+begin_src emacs-lisp :tangle no :noweb-ref magit-config
(when *emacs/>=26p*
  (use-package-elpa transient-posframe
    :demand
    :custom-face
    (transient-posframe ((t (:inherit tooltip))))
    (transient-posframe-border ((t (:background ,(face-foreground 'font-lock-comment-face nil t)))))
    :after magit
    :init
    (setq transient-posframe-border-width 3
          transient-posframe-min-height 22
          transient-posframe-min-width nil
          transient-posframe-parameters '((left-fringe . 8)
                                          (right-fringe . 8)))
    :config
    (transient-posframe-mode)
    (with-no-warnings
      (defun my-transient-posframe--show-buffer (buffer _alist)
        "Show BUFFER in posframe and we do not use _ALIST at this period."
        (when (posframe-workable-p)
          (let ((posframe (posframe-show
                           buffer
			               :font transient-posframe-font
			               :position (point)
			               :poshandler transient-posframe-poshandler
			               :background-color (face-attribute 'transient-posframe :background nil t)
			               :foreground-color (face-attribute 'transient-posframe :foreground nil t)
			               :min-width (or transient-posframe-min-width (round (* (frame-width) 0.62)))
			               :min-height transient-posframe-min-height
                           :lines-truncate t
			               :internal-border-width transient-posframe-border-width
			               :internal-border-color (face-attribute 'transient-posframe-border :background nil t)
			               :override-parameters transient-posframe-parameters)))
            (frame-selected-window posframe))))
      (advice-add #'transient-posframe--show-buffer :override #'my-transient-posframe--show-buffer)

      (defun my-transient-posframe--render-buffer ()
        (with-current-buffer (get-buffer-create transient--buffer-name)
          (goto-char (point-min))
          (insert (propertize "\n" 'face '(:height 0.3)))
          (goto-char (point-max))
          (insert (propertize "\n\n" 'face '(:height 0.3)))))
      (advice-add #'transient--show :after #'my-transient-posframe--render-buffer))
    ))
#+end_src
* Git timemachine
:PROPERTIES:
:ID:       org_mark_mini12.local:20201222T214721.121908
:END:
I think works with other vcs
#+NAME: org_mark_mini12.local_20201223T212747.790111
#+begin_src emacs-lisp
(use-package-elpa git-timemachine
  :after magit
  :custom-face
  (git-timemachine-minibuffer-author-face ((t (:inherit success))))
  (git-timemachine-minibuffer-detail-face ((t (:inherit warning))))
  :bind (:map vc-prefix-map
			  ("t" . git-timemachine))
  :pretty-hydra
  (jp-git
   ("Other"
	(("t" git-timemachine "time machine"))))
  :commands (git-timemachine)

  :preface
  (defun my/git-timmachine-check ()
	(when (bound-and-true-p git-timemachine-mode)
	  (user-error "Cannot revert the timemachine buffer")))

  :hook (before-revert . my/git-timmachine-check))
  #+end_src
* Git messenger
:PROPERTIES:
:ID:       org_mark_mini20.local:20210814T100659.238603
:END:
 Pop up last commit information of current line
#+NAME: org_mark_mini20.local_20210814T100659.226333
#+begin_src emacs-lisp
(use-package-elpa git-messenger
  :bind (:map vc-prefix-map
			  ("p" . git-messenger:popup-message)
			  :map git-messenger-map
			  ("m" . git-messenger:copy-message))
  :init (setq git-messenger:show-detail t
              git-messenger:use-magit-popup t)
  :pretty-hydra
  (jp-git
   ("Other"
	(("m" git-messenger:popup-message "messenger"))))
  :config
  (with-no-warnings
    (with-eval-after-load 'hydra
      (defhydra hydra-git-messenger (:color blue)
        ("s" git-messenger:popup-show "show")
        ("c" git-messenger:copy-commit-id "copy hash")
        ("m" git-messenger:copy-message "copy message")
        ("," (catch 'git-messenger-loop (git-messenger:show-parent)) "go parent")
        ("q" git-messenger:popup-close "quit")))

    (defun my-git-messenger:format-detail (vcs commit-id author message)
      (if (eq vcs 'git)
          (let ((date (git-messenger:commit-date commit-id))
                (colon (propertize ":" 'face 'font-lock-comment-face)))
            (concat
             (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                     (propertize "Commit" 'face 'font-lock-keyword-face) colon
                     (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                     (propertize "Author" 'face 'font-lock-keyword-face) colon
                     (propertize author 'face 'font-lock-string-face)
                     (propertize "Date" 'face 'font-lock-keyword-face) colon
                     (propertize date 'face 'font-lock-string-face))
             (propertize (make-string 38 ?â”€) 'face 'font-lock-comment-face)
             message
             (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
        (git-messenger:format-detail vcs commit-id author message)))

    (defun my-git-messenger:popup-message ()
      "Popup message with `posframe', `pos-tip', `lv' or `message', and dispatch actions with `hydra'."
      (interactive)
      (let* ((hydra-hint-display-type 'message)
             (vcs (git-messenger:find-vcs))
             (file (buffer-file-name (buffer-base-buffer)))
             (line (line-number-at-pos))
             (commit-info (git-messenger:commit-info-at-line vcs file line))
             (commit-id (car commit-info))
             (author (cdr commit-info))
             (msg (git-messenger:commit-message vcs commit-id))
             (popuped-message (if (git-messenger:show-detail-p commit-id)
                                  (my-git-messenger:format-detail vcs commit-id author msg)
                                (cl-case vcs
                                  (git msg)
                                  (svn (if (string= commit-id "-")
                                           msg
                                         (git-messenger:svn-message msg)))
                                  (hg msg)))))
        (setq git-messenger:vcs vcs
              git-messenger:last-message msg
              git-messenger:last-commit-id commit-id)
        (run-hook-with-args 'git-messenger:before-popup-hook popuped-message)
        (git-messenger-hydra/body)
        (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
               (let ((buffer-name "*git-messenger*"))
                 (posframe-show buffer-name
                                :string (concat (propertize "\n" 'face '(:height 0.3))
                                                popuped-message
                                                "\n"
                                                (propertize "\n" 'face '(:height 0.3)))
                                :left-fringe 8
                                :right-fringe 8
                                :internal-border-width 1
                                :internal-border-color (face-foreground 'font-lock-comment-face nil t)
                                :background-color (face-background 'tooltip nil t))
                 (unwind-protect
                     (push (read-event) unread-command-events)
                   (posframe-hide buffer-name))))
              ((and (fboundp 'pos-tip-show) (display-graphic-p))
               (pos-tip-show popuped-message))
              ((fboundp 'lv-message)
               (lv-message popuped-message)
               (unwind-protect
                   (push (read-event) unread-command-events)
                 (lv-delete-window)))
              (t (message "%s" popuped-message)))
        (run-hook-with-args 'git-messenger:after-popup-hook popuped-message)))
    (advice-add #'git-messenger:popup-close :override #'ignore)
    (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))
#+end_src
* Show changes since last checkin
:PROPERTIES:
:ID:       org_mark_mini12.local:20201223T212427.542343
:END:
[[https://github.com/dgutov/diff-hl][diff-hl]]
#+NAME: org_mark_mini12.local_20201223T212427.538014
#+begin_src emacs-lisp
(use-package diff-hl
    :ensure t
    :after magit
    :commands (diff-hl-next-hunk diff-hl-previous-hunk diff-hl-revert-hunk )
    :pretty-hydra (jp-git
                   ("Diff"
                    (("n" diff-hl-next-hunk "next hunk" :exit nil)
                     ("p" diff-hl-previous-hunk "previous hunk" :exit nil)
                     ("u" diff-hl-revert-hunk "revert hunk" :exit nil))))
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode))
#+end_src
* Smerge
:PROPERTIES:
:ID:       org_mark_mini20.local:20210813T230728.367536
:END:
A minor mode that shows the differences
Main use if for merge conflicts
#+NAME: org_mark_mini20.local_20210814T191833.218656
#+begin_src emacs-lisp
(use-package smerge-mode
  :ensure nil
  :diminish
  :pretty-hydra
  ((:title (mwb-icon-text "diff" "Smerge"  )
		   :color pink :quit-key "q")
   ("Move"
    (("n" smerge-next "next")
     ("p" smerge-prev "previous"))
    "Keep"
    (("b" smerge-keep-base "base")
     ("u" smerge-keep-upper "upper")
     ("l" smerge-keep-lower "lower")
     ("a" smerge-keep-all "all")
     ("RET" smerge-keep-current "current")
     ("C-m" smerge-keep-current "current"))
    "Diff"
    (("<" smerge-diff-base-upper "upper/base")
     ("=" smerge-diff-upper-lower "upper/lower")
     (">" smerge-diff-base-lower "upper/lower")
     ("R" smerge-refine "refine")
     ("E" smerge-ediff "ediff"))
    "Other"
    (("C" smerge-combine-with-next "combine")
     ("r" smerge-resolve "resolve")
     ("k" smerge-kill-current "kill")
     ("ZZ" (lambda ()
             (interactive)
             (save-buffer)
             (bury-buffer))
      "Save and bury buffer" :exit t))))
  :bind (:map smerge-mode-map
			  ("C-c m" . smerge-mode-hydra/body)
			  ("<f5>" . smerge-mode-hydra/body))
  :hook ((find-file . (lambda ()
                        (save-excursion
                          (goto-char (point-min))
                          (when (re-search-forward "^<<<<<<< " nil t)
                            (smerge-mode 1)))))
         (magit-diff-visit-file . (lambda ()
                                    (when smerge-mode
                                      (hydra-smerge/body))))))
#+end_src
