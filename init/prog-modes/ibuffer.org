#+TITLE Emacs configuration - ibuffer
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Buffers
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:FADBA799-7985-455A-8BA0-5E6A6CC2C3DB
:END:

Ibuffer seems to be the one.
I would note that this is where use-package and other code reasons to keep together conflict with literate programming. Current use literate-programming but I suspect noweb is the way here once I have a working setup. use-package benefit includes a total fail if issue.
Current attempt is a halfway. Instead of noweb I call a new org file. This keeps all the code in org files as valid lisp. At some stage for e.g. hydra it might make sense for noweb as fragments are not valid lisp. An alternative is put other code in separate use-package bits with :defer t as per nasy.moe

There is some comment on internet that other things in ibuffer are a mess. I would say that the list of grouping is another.

This setup from [[https://emacs.nasy.moe/#org2ffc7b4][nasy.moe]] and others for the default and [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]] for the grouping

However much of the same code appears in many places so I don't know the real source.

On really forcing loading etc this still loads immediately after-init but should be delayed until I request it. So should be redone - perhaps start with bufler from scratch

* Load package
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:1EDC2A71-58BD-4635-B02F-727C8677DC78
:END:
   The overall load.
   #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_8FD96F98-B122-4E26-BC6D-62735E12E33F
   #+begin_src emacs-lisp
(use-feature ibuffer
  :bind (("C-x C-b" . ibuffer)
         ("A-M-b" . ibuffer)
         :map ibuffer-mode-map
         ("?" . major-mode-hydras/ibuffer-mode/body))
  :init
  (setq ibuffer-expert t
        ibuffer-old-time 48
        ibuffer-show-empty-filter-groups nil
        ibuffer-default-sorting-mode 'filename/process)
  :config
  (use-package-elpa ibuffer-vc :demand)   ; need as some config code depends on this
  (require 'ibuf-ext)             ; fiddle the mess to get an internal variable setup
  <<ibuffer-config>>
  :hook (ibuffer . major-mode-hydras/ibuffer-mode/body))
   #+end_src

* Config
:PROPERTIES:
:ID:       org_mark_mini20.local:20220607T174826.401201
:HEADER-ARGS: :tangle no :noweb-ref ibuffer-config
:END:
Heading here is to allow set of properties for no tangle into config
** Display functions
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:D26DEC0A-8956-4075-97A3-981E315788BB
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_30D55E18-A0EB-4BEC-A9AE-DC22DE1E317A
#+begin_src emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline nil)
  (let ((bs (buffer-size)))
	(cond ((> bs 1e6) (format "%7.1fMB" (/ bs 1e6)))
		  ((> bs 1e3) (format "%7.1fkB" (/ bs 1e3)))
		  (t          (format "%7d  " bs)))))

(setq ibuffer-formats
	  '((mark modified read-only vc-status-mini " "
			  (name 30 30 :left :elide)
			  " "
			  (size-h 9 -1 :right)
			  " "
			  (mode 10 10 :left :elide)
			  " "
			  (vc-status 10 10 :left)
			  " "
			  vc-relative-file)))
  #+end_src

** Groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:1256BA3D-288D-4B3D-B06D-1474969EF405
:END:
This is from  [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]]

*** Collapse buffer groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:05D42CAD-2C1C-4ABA-97A9-032C0C4F23DB
:END:
**** Choose the groups
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:29EEF179-59EF-4590-A610-25E7DF12014D
:END:
 #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_77968D6B-1BBA-4161-B6E1-B81A674421AD
 #+begin_src emacs-lisp
(setq gk-ibuffer-collapsed-groups
      (list
       "Special buffers"
       "Dired"
       "Emacs internal"
       "EmacsMac"
       "Aquamacs"
       "Emacs Documentation"
       "Help"
       "GNUs"
       "Magit"
       "Custom"
       "Helm"
       ;; "Special buffers"
       "EWW Reading"
       "VC"))
#+end_src
**** Do the collapsing
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:E192D834-8E4A-43CF-9F53-EA58B15D65DA
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_6423311D-14C1-4B74-8260-3839A650AB57
#+begin_src emacs-lisp
(define-advice ibuffer (:after (&rest args) gk-hidden-groups)
  "Hide groups in ‘gk-ibuffer-collapsed-groups’."
  (ignore args)
  (save-excursion
	(dolist (group gk-ibuffer-collapsed-groups)
	  (ignore-errors
		(ibuffer-jump-to-filter-group group)
		(ibuffer-toggle-filter-group)))))
#+end_src
**** Add the hook for the grouping
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:AA7E5412-2496-4BAC-AE50-D65C6DA0B6F9
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A7D37C41-4530-4DD6-871B-B2B828F66B19
#+begin_src emacs-lisp
(cl-defun gk-ibuffer-hook ()
   (unless (eq ibuffer-sorting-mode 'alphabetic)
	 (ibuffer-do-sort-by-filename/process))
   (ibuffer-update nil t))

(add-hook 'ibuffer-hook 'gk-ibuffer-hook)
	#+end_src


#  LocalWords:  bufler

*** Special groups before vc and directories
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:24E37B2D-EE33-4348-8C79-3F89D7837917
:END:
In let as I had macro expansion issues - probably not neede as I had to change ' to ` after doing this
#+NAME: org_mark_mini20.local_20210122T135511.128840
#+begin_src emacs-lisp
(let ((magit-regexp (rx bol (or "magit" "magit-process" "magit-diff") ":")))
  (setq mwb-ibuffer-filters-top
        `(("Aquamacs" (or
                      (filename . "^/Applications/Aquamacs")
                      (filename . "/Library/Preferences/Aquamacs Emacs/Packages/elpa")))
         ("EmacsMac" (or
                      (filename . "^/Applications/MacPorts/EmacsMac.app")
                      (filename . "~/elpa")))
         ;; ("Dired" (mode . dired-mode))
         ("Emacs internal" (or
                            (name . "^\\*dashboard\\*$")
                            (name . "^\\*scratch\\*$")
                            (name . "^\\*Messages\\*$")
                            (name . "^\\*Backtrace\\*$")
                            (name . "^\\*Buffer L\\*$")
                            (name . "^\\*Warnings\\*$")
                            (name . "^\\*deadgrep")
                            (name . "\\*\\(Echo\\|Minibuf\\)")
                            (name . "^\\*Personal Keybindings\\*$")
                            (name . "^\\*Pp Eval Output\\*$")
                            (name . "^\\*Help\\*$")
                            (name . "^\\*Apropos\\*$")
                            (name . "^\\*info\\*$")
                            (name . "^\\*helpful")
                            (name . "^\\*Flycheck")
                            (name . "^\\*\\(Man [0-9]?\\)")
                            (mode . custom-mode)
                            (mode . elisp-refs-mode)
                            (name . "^\\*Customize")))
         ("Commands"
          (or
           (mode . shell-mode)
           (mode . eshell-mode)
           (mode . term-mode)
           (mode . compilation-mode)))
         ("GNUs" (or
                  (mode . message-mode)
                  (mode . bbdb-mode)
                  (mode . mail-mode)
                  (mode . gnus-group-mode)
                  (mode . gnus-summary-mode)
                  (mode . gnus-article-mode)
                  (name . "^\\.bbdb$")
                  (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
                  (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
                  (name . "\\(Original Article\\|canonical address\\|extract address\\)")
                  (name . "^\\.newsrc-dribble")))
       ("VC"
          (or
           (mode . magit-status-mode)
           (mode . magit-log-mode)
           (name . ,magit-regexp)
           (name . "git-monitor")
           (name . "^\\*\\(vc\\|log\\)-?"))))))
#+end_src
*** Group for what is left
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:6DFA2B47-6ABC-421E-A9BE-010DF7D95B41
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_3137778E-3ABB-4FEB-9243-7FCE7B7F0714
#+begin_src emacs-lisp
(defvar mwb-ibuffer-filters-bottom
  '( 	("Helm" (mode . helm-major-mode))
	("Special buffers"
	 (name-not . "compilation")
	 (name . "^\\*.*\\*$"))
	("EWW Reading"
	 (mode . eww-mode)))
  "Fixed filter definitions for ibuffer.")
#+end_src
*** Group by directory
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:44444A37-2F58-4EA6-B3B8-15B997CA76FA
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_05543859-CB44-45CC-BA74-D4095032D649
#+begin_src emacs-lisp
(cl-defun gk-ibuffer-generate-filter-groups-by-dir ()
  "Create a set of ibuffer filter groups based on the dirs of buffers."
  (let ((dirs (ibuffer-remove-duplicates
			   (delq nil (mapcar (lambda (buf)
								   (when-let (bufnam (buffer-file-name buf))
									 (file-name-directory bufnam)))
								 (buffer-list))))))
	(mapcar (lambda (dir) (cons (concat "Directory: " dir) `((dir . ,dir)))) dirs)))
#+end_src

*** Put the buffer group  together
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:20ACDF50-A967-4095-8541-923E518371C1
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_89EF4423-0D2F-4B37-B79D-E37FCBABF47B
#+begin_src emacs-lisp
(define-advice ibuffer-update (:before (&rest args) autogroups)
  "Group related buffers together using ‘ibuffer-vc’ and ‘dir’,
and special ones sepatarely."
  (ignore args)
  (setf ibuffer-filter-groups
		(append
		 mwb-ibuffer-filters-top
		 (ibuffer-vc-generate-filter-groups-by-vc-root)
		 (gk-ibuffer-generate-filter-groups-by-dir)
		 mwb-ibuffer-filters-bottom)))
#+end_src

** Filters
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:7EFD5A3F-159C-418B-A8B6-6DD72CCC9743
:END:
**** Listing unsaved buffers
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:D24605A6-BAD3-42F0-9CB2-C80BFB59E7E8
:END:
From [[https://www.reddit.com/r/emacs/comments/6w1kqi/listing_unsaved_buffers/][reddit]]
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_DC932783-059D-4E60-9460-AA996EAC7573
#+begin_src emacs-lisp
(define-ibuffer-filter unsaved-file-buffers
    "Toggle current view to buffers whose file is unsaved."
  (:description "file is unsaved")
  (ignore qualifier)
  (and (buffer-local-value 'buffer-file-name buf)
       (buffer-modified-p buf)))
#+end_src

Set the key in the map but also add the hydra at the end which shadows the /
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_97D12CF3-9F04-4EAE-9312-740A7F65F81E
#+begin_src emacs-lisp
(define-key ibuffer-mode-map (kbd "/ u")
  #'ibuffer-filter-by-unsaved-file-buffers)
#+end_src

**** Unused Filters
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:DDF85788-36D7-495C-B224-6405A6F7F45E
:END:

***** A filter not certain if used
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:F7C1B140-AF61-4E91-AD84-FD0A1525E79D
:END:
  #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A5A7543E-5271-488C-A83B-F274165EB383
  #+begin_src emacs-lisp
(define-ibuffer-filter name-not
    "Negated buffer name match."
  (:description "buffer name not"
		:reader (read-from-minibuffer "Exclude buffers (regexp): "))
  (not (string-match qualifier (buffer-name buf))))
  #+end_src

**** Directory
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:A49F17AB-2E17-4E3C-AA96-934B536B6D7F
:END:
#+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_C1F977A6-01FB-4389-A955-D80B2FC3A744
#+begin_src emacs-lisp
(define-ibuffer-filter dir
	"Toggle current view to buffers with dir QUALIFIER."
  (:description "directory" :reader (read-from-minibuffer "Filter by dir (regexp): "))
  (ibuffer-awhen (buffer-file-name buf)
	(string= qualifier (file-name-directory it))))
#+end_src

** Fontification
:PROPERTIES:
:ID:       org_2020-12-05+00-00:DE79B3FA-81CF-4FA4-B23E-D4FD1ACD8B09
:END:
#+NAME: org_2020-12-05+00-00_62864897-3AFE-4608-8125-7B831B5ED025
#+begin_src emacs-lisp
(setq ibuffer-fontification-alist
      '((5
         (and buffer-file-name
              (buffer-modified-p))
         font-lock-warning-face)
        (10 buffer-read-only font-lock-string-face)
        (15
         (and buffer-file-name
              (string-match ibuffer-compressed-file-name-regexp buffer-file-name))
         font-lock-doc-face)
        (25
         (and
          (string-match "^ "
                        (buffer-name))
          (null buffer-file-name))
         italic)
        (35
         (derived-mode-p 'dired-mode)
         font-lock-function-name-face)
        (40
         (and
          (boundp 'emacs-lock-mode)
          emacs-lock-mode)
         ibuffer-locked-buffer)))
#+end_src
** Wraparound Cursor Movement
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:BC2CF73A-8A15-4A2F-BB4B-04F47A94A1EF
:END:
From [[https://www.emacswiki.org/emacs/IbufferMode#toc13][Emacs wiki]]

With this improvement you do not need to hard code the line numbers, you just need copy, compile and run. Moreover, the keys ‘up’ and ‘down’ do the same thing but they skip the names of the filtered groups, and you can move to the beginning or the end of a group with ‘left’ and ‘right’.

#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_A537B07D-1F71-49A4-A4EC-4A90F741B1AF
#+begin_src emacs-lisp
(defun ibuffer-advance-motion (direction)
  (forward-line direction)
  (beginning-of-line)
  (if (not (get-text-property (point) 'ibuffer-filter-group-name))
      t
    (ibuffer-skip-properties '(ibuffer-filter-group-name)
			     direction)
    nil))

(defun ibuffer-previous-line (&optional arg)
  "Move backwards ARG lines, wrapping around the list if necessary."
  (interactive "P")
  (or arg (setq arg 1))
  (let (err1 err2)
    (while (> arg 0)
      (cl-decf arg)
      (setq err1 (ibuffer-advance-motion -1)
	    err2 (if (not (get-text-property (point) 'ibuffer-title))
		     t
		   (goto-char (point-max))
		   (beginning-of-line)
		   (ibuffer-skip-properties '(ibuffer-summary
					      ibuffer-filter-group-name)
					    -1)
		   nil)))
    (and err1 err2)))

(defun ibuffer-next-line (&optional arg)
  "Move forward ARG lines, wrapping around the list if necessary."
  (interactive "P")
  (or arg (setq arg 1))
  (let (err1 err2)
    (while (> arg 0)
      (cl-decf arg)
      (setq err1 (ibuffer-advance-motion 1)
	    err2 (if (not (get-text-property (point) 'ibuffer-summary))
		     t
		   (goto-char (point-min))
		   (beginning-of-line)
		   (ibuffer-skip-properties '(ibuffer-summary
					      ibuffer-filter-group-name
					      ibuffer-title)
					    1)
		   nil)))
    (and err1 err2)))

(defun brust/ibuffer-next-header ()
  (interactive)
  (while (ibuffer-next-line)))

(defun brust/ibuffer-previous-header ()
  (interactive)
  (while (ibuffer-previous-line)))

(bind-key  (kbd "<up>") 'ibuffer-previous-line ibuffer-mode-map)
(bind-key  (kbd "<down>") 'ibuffer-next-line ibuffer-mode-map)
(bind-key  (kbd "<right>") 'ibuffer-previous-header ibuffer-mode-map)
(bind-key  (kbd "<left>") 'ibuffer-next-header ibuffer-mode-map)
#+end_src

** Hydra
:PROPERTIES:
:ID:       org_mark_2020-01-24T17-28-10+00-00_mini12:7CD44DD7-1332-4C1C-8819-136859BF8AA8
:END:
From [[https://github.com/abo-abo/hydra/wiki/Ibuffer][Hydra Wiki]] mode hydra but with name changed to work as major mode hydra
   #+NAME: org_mark_2020-01-24T17-28-10+00-00_mini12_A6D8D69A-A7A1-431C-BC16-A34732A92A60
**** Major mode
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:64ECA435-EE5E-4D4A-BC96-EE92C1E8DB13
:END:
   #+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_5EB10EFD-EB06-471A-848E-CCE05C98E47A
   #+begin_src emacs-lisp
(defhydra major-mode-hydras/ibuffer-mode (:color red :hint nil)
  "
   ^Mark^         ^Actions^         ^View^          ^Select^              ^Navigation^
   _m_: mark      _D_: delete       _g_: refresh    _q_: quit             _k_:   ↑    _h_
   _u_: unmark    _s_: save marked  _S_: sort       _TAB_: toggle         _RET_: visit
   _*_: specific  _a_: all actions  _/_: filter     _o_: other window     _j_:   ↓    _l_
   _t_: toggle    _._: toggle hydra _H_: help       C-o other win no-select
   "
  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)
  ("t" ibuffer-toggle-marks)

  ("D" ibuffer-do-delete)
  ("s" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("S" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)
  ("H" describe-mode :color blue)

  ("h" ibuffer-backward-filter-group)
  ("k" ibuffer-backward-line)
  ("l" ibuffer-forward-filter-group)
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)

  ("TAB" ibuffer-toggle-filter-group)

  ("o" ibuffer-visit-buffer-other-window :color blue)
  ("q" (lambda () (interactive) (quit-window 4)) :color blue)
  ("." nil :color blue))
#+end_src
**** Mark
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:5DEB442D-7398-412A-800C-BF969C24DC50
:END:
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_EB4BAFA7-BA96-4E70-AC01-202C409AB5FE
#+begin_src emacs-lisp
(defhydra hydra-ibuffer-mark (:color teal :columns 5
				     :after-exit (major-mode-hydras/ibuffer-mode/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))
#+end_src
**** Actions
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:FD88EC7A-4B95-476A-9070-06E90F4D8B16
:END:
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_ABE7078B-1D1C-4BAB-80C0-EB20A2965531
#+begin_src emacs-lisp
(defhydra hydra-ibuffer-action (:color teal :columns 4
				       :after-exit
				       (if (eq major-mode 'ibuffer-mode)
					   (major-mode-hydras/ibuffer-mode/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))
#+end_src
**** Sort
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:2093F427-F562-4EAA-A31F-3582ED7CF3E7
:END:
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_8FC92A00-0F76-41D6-8183-D160916C7C90
#+begin_src emacs-lisp
(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))
#+end_src
**** Filter
:PROPERTIES:
:ID:       org_mark_2020-02-10T08-46-26+00-00_mini12:496BF7A7-340B-43E7-9CA9-EE69A7559C80
:END:
#+NAME: org_mark_2020-02-10T08-46-26+00-00_mini12_F34400B5-1325-4089-9D4F-CA89B9B64557
#+begin_src emacs-lisp
(pretty-hydra-define hydra-ibuffer-filter
    (:color pink
	 :quit-key "q"
	 :title (with-mode-icon major-mode "Filter" 1 -0.05))
  ("Name"
   (("m" ibuffer-filter-by-used-mode "mode")
    ("M" ibuffer-filter-by-derived-mode "derived mode")
    ("n" ibuffer-filter-by-name "name")
    ("d" ibuffer-filter-by-dir "dir")
    ("f" ibuffer-filter-by-filename "filename")
    ("e" ibuffer-filter-by-predicate "predicate"))
   "Buffer Properties"
   (("u" ibuffer-filter-by-unsaved-file-buffers "unsaved")
    ("c" ibuffer-filter-by-content "content")
    (">" ibuffer-filter-by-size-gt "size")
    ("<" ibuffer-filter-by-size-lt "size"))
   "Back"
   (("/" ibuffer-filter-disable "disable")
    ("b" major-mode-hydras/ibuffer-mode/body "back" :color blue))))
   #+end_src
