#+TITLE Emacs configuration - lisp
#+PROPERTY:header-args :cache yes :tangle yes  :comments link
#+STARTUP: content
* Lisp running environments
These are for all () languages but could extend to more as manythings are for all structured ASTs or simply brackets
** Make parentheses pretty
Although that should be in prog mode
	#+begin_src emacs-lisp
    (use-package
      rainbow-delimiters
      :ensure t
      :delight rainbow-delimiters-mode
      :hook (prog-mode . rainbow-delimiters-mode))
	#+end_src

** Add lisp interaction mode
*** Lispy
	 Set compat so that the keys for these modes work.
	 #+begin_src emacs-lisp
     (use-package lispy
       :ensure t
       ;;:mwb-load-path "fork/lispy"
       :bind (:map lispy-mode-map
                   ("<backspace>" . lispy-delete-backward)
                   ("<kp-delete>" . lispy-delete))
       :config (setq lispy-compat (quote (edebug macrostep))
                     lispy-safe-paste t)
       (add-hook 'lispy-mode-hook #'turn-off-smartparens-mode))
	 #+end_src
*** Get lispy test working
It assumes things like clojure
#+begin_src emacs-lisp
(use-package clojure-mode
    :ensure t)
#+end_src
*** and interaction hydra
	 Changes are now made directly to the package which is only now here
	 #+begin_src emacs-lisp
     (use-package lispy-mnemonic
       :mwb-load-path "site-lisp/lispy-mnemonic"
       :hook ((emacs-lisp-mode
               lisp-interaction-mode
               inferior-emacs-lisp-mode) . lispy-mnemonic-mode))
	 #+end_src
** Evaluation
	Instead of displaying the results in a separate buffer (like the iElm does), The [[https://github.com/xiongtx/eros][EROS project]] displays the results temporarily  /in the buffer/ in an overlay.  No need to do anything special:
  However it does it by remapping the eval keys so interferes with lispy so need to sort that out. PBest idea is make it one of the possible parts of lispy-mnemonic eval. lispy itself users cider to do this but I don't use clojurre.
#+BEGIN_SRC emacs-lisp
	(use-package eros
	  :ensure t
	  :commands eros--eval-overlay)
   #+END_SRC
* Lisps
** Emacs Lisp
#+begin_src emacs-lisp
(mwb-init-load "init/prog-modes/emacs-lisp")
#+end_src
** Racket
#+begin_src emacs-lisp
(mwb-init-load "init/prog-modes/racket")
#+end_src
