#+TITLE Emacs configuration org structured data modes
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb

* XML
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:6E22A9D3-1EB0-4FD1-A3F6-53C488E929A1
:END:
This has been there for a long time (actually only after retirement I suppose I had XML-spy at work)
But I seem to have lost all the mode associations
So from jweigley
#+NAME: org_mark_2020-11-23T16-09-29+00-00_mini12.local_891BF4BB-0615-4FC6-8454-E8519C3B009E
#+begin_src emacs-lisp
(use-feature nxml-mode
  :commands nxml-mode
  :bind (:map nxml-mode-map
		 ("<return>" . newline-and-indent)
		 ("C-c M-h" . tidy-xml-buffer))
  :mode (rx (seq "." (or "opml"
						 "fsproj"
						 "xml"
						 "xsd"
						 "sch"
						 "rng"
						 "xslt"
						 "svg"
						 "rss"
						 "inx")
				 string-end))
  :magic ("<\\?xml " . nxml-mode)
  :preface
  (defun tidy-xml-buffer ()
	(interactive)
	(save-excursion
	  (call-process-region (point-min)
						   (point-max)
						   "tidy" t t nil
						   "-xml" "-i" "-wrap" "0" "-omit" "-q" "-utf8")))

  :init
  (defalias 'xml-mode 'nxml-mode)
  :config
  (setq nxml-slash-auto-complete-flag t)
										; my one liner
  (setq nxml-bind-meta-tab-to-complete-flag t)
  (autoload 'sgml-skip-tag-forward "sgml-mode")
  (add-to-list 'hs-special-modes-alist
			   '(nxml-mode
				 "<!--\\|<[^/>]*[^/]>"
				 "-->\\|</[^/>]*[^/]>"
				 "<!--"
				 sgml-skip-tag-forward
				 nil))
  ;; Make spelling look at tags https://www.emacswiki.org/emacs/NxmlMode
  (add-to-list 'flyspell-prog-text-faces 'nxml-text-face)

  ;; Show xpath
  (defun nxml-where ()
    "Display the hierarchy of XML elements the point is on as a path."
    (interactive)
    (let ((path nil))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (< (point-min) (point)) ;; Doesn't error if point is at beginning of buffer
                      (condition-case nil
                          (progn
                            (nxml-backward-up-element) ; always returns nil
                            t)
                        (error nil)))
            (setq path (cons (xmltok-start-tag-local-name) path)))
          (if (called-interactively-p t)
              (message "/%s" (mapconcat 'identity path "/"))
            (format "/%s" (mapconcat 'identity path "/")))))))
  (add-hook 'which-func-functions 'nxml-where)

  )
#+end_src

** Pretty print
:PROPERTIES:
:ID:       org_mark_mini20.local:20220804T095259.795159
:END:
Just a pretty print
From http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html
 #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_2D695AD2-8485-4365-A27F-FF3E95FAB69B
 #+begin_src emacs-lisp
(defun nxml-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
  (message "Ah, much better!"))
 #+end_src

** rnc mode
:PROPERTIES:
:ID:       org_mark_mini20.local:20220804T095259.786350
:END:
Edit  the RELAX NG compact schemas for nxml. (This must have been in my old emacs but seems to be lost)
#+NAME: org_mark_mini20.local_20220804T095259.770874
#+begin_src emacs-lisp
(use-package-elpa rnc-mode
  :commands rnc-mode
  :init
  (setq rnc-indent-level 3))
#+end_src

** Apple plist
:PROPERTIES:
:ID:       org_mark_mini20:20230129T103159.289848
:END:

*** Plist mode
:PROPERTIES:
:ID:       org_mark_mini20:20230129T110027.621038
:END:
There is a [[https://github.com/gonewest818/osx-plist][plist mode]] for XML + hook to convert from binary
#+NAME: org_mark_mini20_20230129T110113.155635
#+begin_src emacs-lisp :tangle no
(use-package-elpa osx-plist
  :mode (rx (seq ".plist" string-end))
  :init
  ;; Allow editing of binary .plist files.
  (add-to-list 'jka-compr-compression-info-list
			   ["\\.plist$"
				"converting text XML to binary plist"
				"plutil"
				("-convert" "binary1" "-o" "-" "-")
				"converting binary plist to text XML"
				"plutil"
				("-convert" "xml1" "-o" "-" "-")
				nil nil "bplist"])

  ;;It is necessary to perform an update!
  (jka-compr-update)
  )
#+end_src
*** As json
:PROPERTIES:
:ID:       org_mark_mini20:20230129T110027.615223
:END:
There is also a [[https://jherrlin.github.io/posts/emacs-on-macos-monterey/][comment]] how to convert plist to and from json - which might be better.
#+NAME: org_mark_mini20_20230129T110027.594296
#+begin_src emacs-lisp
(add-to-list 'jka-compr-compression-info-list
			 ["\\.plist$"
			  "converting text json to binary plist"
			  "plutil"
			  ("-convert" "binary1" "-o" "-" "-")
			  "converting binary plist to text json"
			  "plutil"
			  ("-convert" "json" "-r " "-o" "-" "-")
			  nil t "bplist"])
;;It is necessary to perform an update!
(jka-compr-update)
#+end_src
* Json
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:BB5E4DA3-3168-4AA7-9B08-6B3E11930CB2
:END:
** Editing
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2D11F928-4739-4268-9A5B-91F6FEB2D9A6
:END:
This is the standard mode
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_61706197-9647-456A-9F2C-0A91722F017C
  #+begin_src emacs-lisp :tangle no
(use-package-elpa json-mode
  :mode (rx  (seq  ".json" string-end)))
  #+end_src
** Visualisation
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:1F9A0E96-B7A9-45BC-BFC4-A1BD0B149E7A
:END:
See as a tree.
Loading issue see https://github.com/DamienCassou/json-navigator/issues/22
#+NAME: org_mark_mini20.local_20220727T183214.995481
     #+begin_src emacs-lisp
(add-to-list 'straight-built-in-pseudo-packages 'hierarchy)
(use-package-elpa json-navigator
  :demand
  :after json-mode)
  #+end_src
* Config file
:PROPERTIES:
:ID:       org_mark_mini20.local:20211212T113859.518642
:END:
#+NAME: org_mark_mini20.local_20211212T113859.497593
#+begin_src emacs-lisp
(use-feature config
  :mode ("\\.cnf\\'" .  conf-mode))
#+end_src

* YAML
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:C1D50559-7C96-4DBB-83CB-456585037991
:END:
Setup From grettke Mode from https://github.com/yoshiki/yaml-mode
#+NAME: org_mark_2020-10-26T12-58-28+00-00_mini12.local_7834085F-27FE-48FF-A1FC-BE8B8E52F59F
#+BEGIN_SRC emacs-lisp
(use-package-elpa yaml-mode
  :config
  (defun yaml-next-field ()
    "Jump to next yaml field.

URL: `https://stackoverflow.com/questions/12648388/emacs-yaml-editing'"
    (interactive)
    (search-forward-regexp ": *"))
  (defun yaml-prev-field ()
    "Jump to next yaml field.

URL: `https://stackoverflow.com/questions/12648388/emacs-yaml-editing'"
    (interactive)
    (search-backward-regexp ": *"))
  (defun help/yaml-mode-hook-fn ()
    ;; (turn-off-auto-capitalize-mode)
    (turn-off-auto-fill)
    (setq flycheck-checker 'yaml-yamllint))

  :mode-hydra
  ("Navigate"
   (("<next>" yaml-next-field "Next Field")
    ("<prior>" yaml-prev-field "Previous Field")
    ("H-<down>" yaml-next-field "Next Field")
    ("H-<up>" yaml-prev-field "Previous Field"))
   "Other"
   (("i" yaml-indent-line "Indent-line")
    ("n" yaml-narrow-to-block-literal "Narrow")
    ("c" yaml-fill-paragraph "Fill paragraph")))

  :hook (yaml-mode . help/yaml-mode-hook-fn)
  :mode "\\(.ya?ml\\|.condarc\\)\\'"

  :bind (:map yaml-mode-map
              ("<backspace>" . sp-backward-delete-char )))
#+END_SRC

** lint the yaml
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:AFFF64BD-F09E-4EA7-BE6F-29A32D33237C
:END:
But there is no easy installable version of the executable - wait till I use more
#+NAME: org_mark_2020-10-26T12-58-28+00-00_mini12.local_1AFAF3D8-0DA1-42A1-8D46-1549F325CC57
#+begin_src emacs-lisp
(use-package-elpa flycheck-yamllint
  :disabled
  :after (yaml-mode flycheck-mode)
  :hook (flycheck-mode . flycheck-yamllint-setup )
  :config
  ;;  executable is python from https://github.com/adrienverge/yamllint
  (setq flycheck-yaml-yamllint-executable "/Users/gcr/yamllint/env/bin/yamllint"))
#+END_SRC

** Other yaml support
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:55CFB090-054E-4113-A1A3-602134C24F42
:END:
https://github.com/RadekMolenda/yaml-tomato to get the path from point
