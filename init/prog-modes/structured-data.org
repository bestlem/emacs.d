#+TITLE Emacs configuration org structured data modes
#+PROPERTY:header-args :cache yes :tangle yes :comments noweb

* XML
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:6E22A9D3-1EB0-4FD1-A3F6-53C488E929A1
:END:
This has been there for a long time (actually only after retirement I suppose I had XML-spy at work)
But I seem to have lost all the mode associations
So from jweigley
#+NAME: org_mark_2020-11-23T16-09-29+00-00_mini12.local_891BF4BB-0615-4FC6-8454-E8519C3B009E
#+begin_src emacs-lisp
(use-package nxml-mode
  :commands nxml-mode
  :bind (:map nxml-mode-map
              ("<return>" . newline-and-indent)
              ("C-c M-h"  . tidy-xml-buffer))
  :preface
  (defun tidy-xml-buffer ()
    (interactive)
    (save-excursion
      (call-process-region (point-min) (point-max) "tidy" t t nil
                           "-xml" "-i" "-wrap" "0" "-omit" "-q" "-utf8")))
  :init
  (defalias 'xml-mode 'nxml-mode)
  :config
  (setq nxml-slash-auto-complete-flag t) ; my one liner
  (autoload 'sgml-skip-tag-forward "sgml-mode")
  (add-to-list 'hs-special-modes-alist
               '(nxml-mode
                 "<!--\\|<[^/>]*[^/]>"
                 "-->\\|</[^/>]*[^/]>"
                 "<!--"
                 sgml-skip-tag-forward
                 nil)))
#+end_src
Just a pretty print
From http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html
 #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_2D695AD2-8485-4365-A27F-FF3E95FAB69B
 #+begin_src emacs-lisp
(defun nxml-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
  (message "Ah, much better!"))
 #+end_src
* Json
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:BB5E4DA3-3168-4AA7-9B08-6B3E11930CB2
:END:
** Editing
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:2D11F928-4739-4268-9A5B-91F6FEB2D9A6
:END:
This is the standard mode
  #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_61706197-9647-456A-9F2C-0A91722F017C
  #+begin_src emacs-lisp
 (use-package json-mode
   :ensure t
   :mode "\\.json$")
  #+end_src
** Visualisation
:PROPERTIES:
:ID:       org_mark_2020-01-24T12-43-54+00-00_mini12:1F9A0E96-B7A9-45BC-BFC4-A1BD0B149E7A
:END:
	 See as a tree.
     #+NAME: org_mark_2020-01-24T12-43-54+00-00_mini12_15E789B8-CDC5-4AEF-97F8-40F5C631D5D8
     #+begin_src emacs-lisp
	 (use-package json-navigator
	   :after json-mode
	   :ensure t)
  #+end_src


* YAML
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:C1D50559-7C96-4DBB-83CB-456585037991
:END:
Setup From grettke Mode from https://github.com/yoshiki/yaml-mode
#+NAME: org_mark_2020-10-26T12-58-28+00-00_mini12.local_7834085F-27FE-48FF-A1FC-BE8B8E52F59F
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :config
  (defun yaml-next-field ()
    "Jump to next yaml field.

URL: `https://stackoverflow.com/questions/12648388/emacs-yaml-editing'"
    (interactive)
    (search-forward-regexp ": *"))
  (defun yaml-prev-field ()
    "Jump to next yaml field.

URL: `https://stackoverflow.com/questions/12648388/emacs-yaml-editing'"
    (interactive)
    (search-backward-regexp ": *"))
  (defun help/yaml-mode-hook-fn ()
    ;; (turn-off-auto-capitalize-mode)
    (turn-off-auto-fill)
    (setq flycheck-checker 'yaml-yamllint))

  :mode-hydra
  ("Navigate"
   (("<next>" yaml-next-field "Next Field")
    ("<prior>" yaml-prev-field "Previous Field")
    ("H-<down>" yaml-next-field "Next Field")
    ("H-<up>" yaml-prev-field "Previous Field"))
   "Other"
   (("i" yaml-indent-line "Indent-line")
    ("n" yaml-narrow-to-block-literal "Narrow")
    ("c" yaml-fill-paragraph "Fill paragraph")))

  :hook (yaml-mode . help/yaml-mode-hook-fn)

  :mode "\\.yml\\'"

  :bind (:map yaml-mode-map
              ("<backspace>" . sp-backward-delete-char )))
#+END_SRC

** lint the yaml
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:AFFF64BD-F09E-4EA7-BE6F-29A32D33237C
:END:
But there is no easy installable version of the executable - wait till I use more

#+NAME: org_mark_2020-10-26T12-58-28+00-00_mini12.local_1AFAF3D8-0DA1-42A1-8D46-1549F325CC57
#+begin_src emacs-lisp
(use-package flycheck-yamllint
  :ensure t
  :disabled
  :after (yaml-mode flycheck-mode)
  :hook (flycheck-mode . flycheck-yamllint-setup )
  :config
  ;;  executable is python from https://github.com/adrienverge/yamllint
  (setq flycheck-yaml-yamllint-executable "/Users/gcr/yamllint/env/bin/yamllint"))
#+END_SRC

** Other yaml support
:PROPERTIES:
:ID:       org_mark_2020-10-26T12-58-28+00-00_mini12.local:55CFB090-054E-4113-A1A3-602134C24F42
:END:
https://github.com/RadekMolenda/yaml-tomato to get the path from point
