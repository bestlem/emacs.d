#+TITLE Emacs configuration - appearance
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content

This covers what emacs looks like and how windows/frames/menus behave

* Colour theme
Aquamacs is stuck with old color themes not the cusomisable ones
#+begin_src emacs-lisp
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-high-contrast)))
#+end_src

* Remove toolbar
#+begin_src emacs-lisp
(tool-bar-mode 0)
#+end_src

* TODO Cursor
Beacon-mode: flash the cursor when switching buffers or scrolling  the goal is to make it easy to find the cursor
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function beacon-mode "beacon.el"))
  :config
  (beacon-mode t))
#+end_src

* Windows
I think I now want mainly one window and have splits but tabs are useful.

** Move/split
 Try hydra from [[https://www.reddit.com/r/emacs/comments/8of6tx/tip_how_to_be_a_beast_with_hydra/][reddit]] but note user is a vi user for movements so will be messed around with. But a few minutes playing does not add much so use forst from [[https://github.com/abo-abo/hydra/wiki/Window-Management][Hydra wiki]] Needs winner mode for some functions to save window state.
 #+begin_src emacs-lisp
 (use-package winner
   :init
   (winner-mode))
 (defhydra hydra-window (:color red
								:hint nil)
   "
  Split: _v_ert _x_:horz
 Delete: _o_nly  _da_ce  _dw_indow  _db_uffer  _df_rame
   Move: _s_wap
 Frames: _f_rame new  _df_ delete
   Misc: _m_ark _a_ce  _u_ndo  _r_edo"
   ("h" windmove-left)
   ("j" windmove-down)
   ("k" windmove-up)
   ("l" windmove-right)
   ("H" hydra-move-splitter-left)
   ("J" hydra-move-splitter-down)
   ("K" hydra-move-splitter-up)
   ("L" hydra-move-splitter-right)
   ("|" (lambda ()
		  (interactive)
		  (split-window-right)
		  (windmove-right)))
   ("_" (lambda ()
		  (interactive)
		  (split-window-below)
		  (windmove-down)))
   ("v" split-window-right)
   ("x" split-window-below)
										 ;("t" transpose-frame "'")
   ;; winner-mode must be enabled
   ("u" winner-undo)
   ("r" winner-redo) ;;Fixme, not working?
   ("o" delete-other-windows :exit t)
   ("a" ace-window :exit t)
   ("f" new-frame :exit t)
   ("s" ace-swap-window)
   ("da" ace-delete-window)
   ("dw" delete-window)
   ("db" kill-this-buffer)
   ("df" delete-frame :exit t)
   ("q" nil)
										 ;("i" ace-maximize-window "ace-one" :color blue)
										 ;("b" ido-switch-buffer "buf")
   ("m" headlong-bookmark-jump))
 (bind-key "H-w" 'hydra-window/body)
 #+end_src

** Stop special buffers opening in new window
 It is an aquamacs setting see [[https://www.emacswiki.org/emacs/AquamacsFAQ#toc19][FAQ]]
 #+begin_src emacs-lisp
 (one-buffer-one-frame-mode -1)
 (setq  special-display-regexps nil)
 #+end_src

* Buffers
Ibuffer seems to be the one. This setup from [[https://emacs.nasy.moe/#org2ffc7b4][nasy.moe]] and
#+begin_src emacs-lisp
(defun mwb/ibuffer-vc-add-vc-filter-groups ()
  (interactive)
  (dolist (group (ibuffer-vc-generate-filter-groups-by-vc-root))
	(add-to-list 'ibuffer-filter-groups group t)))


(use-package ibuffer
  :bind (("C-x C-b" . ibuffer)
		 :map ibuffer-mode-map
		 ("." . hydra-ibuffer-main/body))
  :init
  (setq ibuffer-saved-filter-groups
        '(("Default"
           ("Dired"      (mode . dired-mode))
           ("Emacs"     (or
                         (name . "^\\*dashboard\\*$" )
                         (name . "^\\*scratch\\*$"   )
                         (name . "^\\*Messages\\*$"  )
                         (name . "^\\*Backtrace\\*$" )
                         (name . "^\\*Pp Eval Output\\*$")))
           ("GNUs"      (or
                         (mode . message-mode)
                         (mode . bbdb-mode)
                         (mode . mail-mode)
                         (mode . gnus-group-mode)
                         (mode . gnus-summary-mode)
                         (mode . gnus-article-mode)
                         (name . "^\\.bbdb$")
                         (name . "^\\.newsrc-dribble")))
		   ("Magit"      (name . "^magit"))
		   ("Help"      (or
						 (name . "^\\*Help\\*$")
						 (name . "^\\*Apropos\\*$")
						 (name . "^\\*info\\*$")
						 (name . "^\\*helpful")))
		   ("Custom"    (or
						 (mode . custom-mode)
						 (name . "^\\*Customize")))
           ("Helm"       (mode . helm-major-mode))
           ))
        ibuffer-show-empty-filter-groups nil
        ibuffer-default-sorting-mode     'filename/process)
  :hook ((ibuffer-mode . (lambda ()
						   (ibuffer-switch-to-saved-filter-groups "Default")
						   (mwb/ibuffer-vc-add-vc-filter-groups)))))
#+end_src

** Directory structure
Use version control to define projects - there is a projectile version as well.
#+begin_src emacs-lisp
(use-package ibuffer-vc
  :after ibuffer
  :ensure t)
#+end_src

** Hydra
   #+begin_src emacs-lisp
   (defhydra hydra-ibuffer-main (:color pink :hint nil)
	 "
   ^Mark^         ^Actions^         ^View^          ^Select^              ^Navigation^
   _m_: mark      _D_: delete       _g_: refresh    _q_: quit             _k_:   ↑    _h_
   _u_: unmark    _s_: save marked  _S_: sort       _TAB_: toggle         _RET_: visit
   _*_: specific  _a_: all actions  _/_: filter     _o_: other window     _j_:   ↓    _l_
   _t_: toggle    _._: toggle hydra _H_: help       C-o other win no-select
   "
	 ("m" ibuffer-mark-forward)
	 ("u" ibuffer-unmark-forward)
	 ("*" hydra-ibuffer-mark/body :color blue)
	 ("t" ibuffer-toggle-marks)

	 ("D" ibuffer-do-delete)
	 ("s" ibuffer-do-save)
	 ("a" hydra-ibuffer-action/body :color blue)

	 ("g" ibuffer-update)
	 ("S" hydra-ibuffer-sort/body :color blue)
	 ("/" hydra-ibuffer-filter/body :color blue)
	 ("H" describe-mode :color blue)

	 ("h" ibuffer-backward-filter-group)
	 ("k" ibuffer-backward-line)
	 ("l" ibuffer-forward-filter-group)
	 ("j" ibuffer-forward-line)
	 ("RET" ibuffer-visit-buffer :color blue)

	 ("TAB" ibuffer-toggle-filter-group)

	 ("o" ibuffer-visit-buffer-other-window :color blue)
	 ("q" quit-window :color blue)
	 ("." nil :color blue))


   (defhydra hydra-ibuffer-mark (:color teal :columns 5
								 :after-exit (hydra-ibuffer-main/body))
	 "Mark"
	 ("*" ibuffer-unmark-all "unmark all")
	 ("M" ibuffer-mark-by-mode "mode")
	 ("m" ibuffer-mark-modified-buffers "modified")
	 ("u" ibuffer-mark-unsaved-buffers "unsaved")
	 ("s" ibuffer-mark-special-buffers "special")
	 ("r" ibuffer-mark-read-only-buffers "read-only")
	 ("/" ibuffer-mark-dired-buffers "dired")
	 ("e" ibuffer-mark-dissociated-buffers "dissociated")
	 ("h" ibuffer-mark-help-buffers "help")
	 ("z" ibuffer-mark-compressed-file-buffers "compressed")
	 ("b" hydra-ibuffer-main/body "back" :color blue))

   (defhydra hydra-ibuffer-action (:color teal :columns 4
								   :after-exit
								   (if (eq major-mode 'ibuffer-mode)
									   (hydra-ibuffer-main/body)))
	 "Action"
	 ("A" ibuffer-do-view "view")
	 ("E" ibuffer-do-eval "eval")
	 ("F" ibuffer-do-shell-command-file "shell-command-file")
	 ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
	 ("H" ibuffer-do-view-other-frame "view-other-frame")
	 ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
	 ("M" ibuffer-do-toggle-modified "toggle-modified")
	 ("O" ibuffer-do-occur "occur")
	 ("P" ibuffer-do-print "print")
	 ("Q" ibuffer-do-query-replace "query-replace")
	 ("R" ibuffer-do-rename-uniquely "rename-uniquely")
	 ("T" ibuffer-do-toggle-read-only "toggle-read-only")
	 ("U" ibuffer-do-replace-regexp "replace-regexp")
	 ("V" ibuffer-do-revert "revert")
	 ("W" ibuffer-do-view-and-eval "view-and-eval")
	 ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
	 ("b" nil "back"))

   (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
	 "Sort"
	 ("i" ibuffer-invert-sorting "invert")
	 ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
	 ("v" ibuffer-do-sort-by-recency "recently used")
	 ("s" ibuffer-do-sort-by-size "size")
	 ("f" ibuffer-do-sort-by-filename/process "filename")
	 ("m" ibuffer-do-sort-by-major-mode "mode")
	 ("b" hydra-ibuffer-main/body "back" :color blue))

   (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
	 "Filter"
	 ("m" ibuffer-filter-by-used-mode "mode")
	 ("M" ibuffer-filter-by-derived-mode "derived mode")
	 ("n" ibuffer-filter-by-name "name")
	 ("c" ibuffer-filter-by-content "content")
	 ("e" ibuffer-filter-by-predicate "predicate")
	 ("f" ibuffer-filter-by-filename "filename")
	 (">" ibuffer-filter-by-size-gt "size")
	 ("<" ibuffer-filter-by-size-lt "size")
	 ("/" ibuffer-filter-disable "disable")
	 ("b" hydra-ibuffer-main/body "back" :color blue))
   #+end_src
