#+TITLE Emacs configuration How emacs reacts
#+PROPERTY:header-args :cache yes :tangle (concat "init/" (file-name-base  (buffer-file-name)) ".el") :comments link
* File Handling
** Trash
Well I was going to include [[https://github.com/lunaryorn/osx-trash.el][osx trash]] which uses the trash executable or an applescript to do the proper trash. But realised I don't want to trash files - just those I delete by hand so the patching opf the emacs delete is not a good idea. By default emacs does not delete by moving to trash. It is customisable so set to to nevetr.
Think of editing dired
   #+begin_src emacs-lisp
   (setq delete-by-moving-to-trash nil)
   #+end_src
** Protect library and other files
[[https://github.com/rolandwalker/hardhat][Hardhat]] provides an extra layer of protection in your work. If you visit a file which looks unsafe to edit, Emacs will make the buffer read-only -- even when the underlying file is writable.
#+begin_src emacs-lisp
(use-package hardhat                    ; Protect user-writable files
  :ensure t
  :init (global-hardhat-mode)
  :config (validate-setq hardhat-mode-lighter "â’½"))
#+end_src
**
* TODO General old stuff
#+begin_src emacs-lisp
(setq find-file-visit-truename t)	; visit a file under its true name

(setq find-file-existing-other-name t)

(defun dos-to-unix ()
  "Replace \r\n with \n"
  (interactive)
  (save-excursion
    (goto-char (point-min))
    ( replace-string "\r\n" "\n" )))

;;  Scratch buffer to org mode
(setq initial-major-mode 'org-mode)
;;  Note concat needed to stop the whole end_src command breaking org-mode
(setq initial-scratch-message
	  (concat "This buffer is for notes you don't want to save, and for org mode.
If you want to create a file, visit that file with C-x C-f,then enter the text in that file's own buffer.

,#+begin_src emacs-lisp

#"
			  "+end_src
"))

(setq kill-whole-line t)

; --- highlight words during query replacement ---
;
(setq query-replace-highlight t)
; --- incremental search highlights the current match ---
;
(setq search-highlight t)

;
; --- vertical motion starting at end of line keeps to ends of lines ---
;
(setq track-eol t)
(setq truncate-lines t)

;; tabs
(setq-default tab-width 4)
(setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100))

;; from http://ergoemacs.org/emacs/emacs_make_modern.html but some are in aquamacs
;; and https://github.com/anschwa/emacs.d

;; UTF-8 as default encoding
;; UTF-8 please
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

;; Better selection
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))

;;  Sentences do not end with two spaces
(setq sentence-end-double-space nil)

(progn
  ;; General emacs behaviour
  ;;  From https://sriramkswamy.github.io/dotemacs/

  ;; This package helps to discover the major mode bindings. I use it very occasionally and hence not binding it to any modal binding.
  (use-package discover-my-major
	:ensure t
	:bind (("C-h C-m" . discover-my-major)
		   ("C-h M-m" . discover-my-mode)))



  ;; comment-dwim-2 improves on the existing comment-dwim command for easy commenting. Pretty useful.

  (use-package comment-dwim-2
	:ensure t
	:bind* ("M-;" . comment-dwim-2))
  )
;;  Hide show etc


;;  Completer
;; From https://pages.sachachua.com/.emacs.d/Sacha.html#org04e47b9
#+end_src
* Completion
** Text
This is completion for text in buffer
 I need something and company seems to be the current one
 #+begin_src emacs-lisp
 (use-package company
   :ensure t
   :diminish
   :config (add-hook
			'after-init-hook
			'global-company-mode))
 #+end_src
** Emacs
This is completion for emacs commands. Choice is ido, ivy helm.
I'll try ivy.
Note headers have tangle command in to suppress one or other
*** Ido
:PROPERTIES:
  :header-args:    :tangle no
  :END:

**** Find M-x commands
  This is [[https://www.emacswiki.org/emacs/Smex][smex]] buy ivy replaces it.
  #+begin_quote
  Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface to your recently and most frequently used commands. And to all the other commands, too.
  #+end_quote
  #+begin_src emacs-lisp
	(use-package smex
	  :ensure t
	  :config
	  (smex-initialize))
  #+end_src

*** Ivy
Start with a small setup

**** Ivy
This is the completion tools
Take some for John Widgley
	 #+begin_src emacs-lisp
	 (use-package ivy
	   :ensure t
	   :diminish
	   :demand
	   :bind (("C-x b" . ivy-switch-buffer)
			  ("H-b" . ivy-switch-buffer)
			  ("C-x B" . ivy-switch-buffer-other-window)
			  ("M-H"   . ivy-resume))

	   :bind (:map ivy-minibuffer-map
				   ("<tab>" . ivy-alt-done)
				   ("SPC"   . ivy-alt-done-or-space)
				   ("C-d"   . ivy-done-or-delete-char)
				   ("C-i"   . ivy-partial-or-done)
				   ("C-r"   . ivy-previous-line-or-history)
				   ("M-r"   . ivy-reverse-i-search))

	   :bind (:map ivy-switch-buffer-map
				   ("C-k" . ivy-switch-buffer-kill))
	   :custom
	   (ivy-dynamic-exhibit-delay-ms 200)
	   (ivy-height 10)
	   (ivy-initial-inputs-alist nil t)
	   (ivy-magic-tilde nil)
	   (ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
	   (ivy-use-virtual-buffers t)
	   (ivy-wrap t)
	   :preface
	   (defun ivy-done-or-delete-char ()
		 (interactive)
		 (call-interactively
		  (if (eolp)
			  #'ivy-immediate-done
			#'ivy-delete-char)))

	   (defun ivy-alt-done-or-space ()
		 (interactive)
		 (call-interactively
		  (if (= ivy--length 1)
			  #'ivy-alt-done
			#'self-insert-command)))

	   (defun ivy-switch-buffer-kill ()
		 (interactive)
		 (debug)
		 (let ((bn (ivy-state-current ivy-last)))
		   (when (get-buffer bn)
			 (kill-buffer bn))
		   (unless (buffer-live-p (ivy-state-buffer ivy-last))
			 (setf (ivy-state-buffer ivy-last)
				   (with-ivy-window (current-buffer))))
		   (setq ivy--all-candidates (delete bn ivy--all-candidates))
		   (ivy--exhibit)))

	   ;; This is the value of `magit-completing-read-function', so that we see
	   ;; Magit's own sorting choices.
	   (defun my-ivy-completing-read (&rest args)
		 (let ((ivy-sort-functions-alist '((t . nil))))
		   (apply 'ivy-completing-read args)))
	   :config
	   (ivy-mode 1)
	   (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)

	   ;; Show #/total when scrolling buffers
	   (setq ivy-count-format "%d/%d ")
	   )
#+end_src

**** Ivy hydra
#+begin_src emacs-lisp :
	 (use-package ivy-hydra
	   :ensure t
	   :after (ivy hydra))
#+end_src

**** Ivy rich
More friendly interface for ivy
#+begin_src emacs-lisp :
(use-package ivy-rich
  :after ivy counsel
  :demand t
  :ensure t
  :config
  (ivy-rich-mode 1)
  (setq ivy-virtual-abbreviate 'full
		ivy-rich-switch-buffer-align-virtual-buffer t
		ivy-rich-path-style 'abbrev))
#+end_src

**** Swiper
Replace isearch
#+begin_src emacs-lisp :

(use-package swiper
  :after ivy
  :ensure t
  :bind (("C-s" . swiper)
		 ("C-r" . swiper))
  )
#+end_src

***** Aquamacs
Need to integrate with command FG etc (note thet are separate to C-s
 #+begin_src emacs-lisp :

 (use-package counsel
   :ensure t
   :after ivy
   :bind (("M-x" . counsel-M-x)
		  ("C-x C-f" . counsel-find-file)
		  ("C-x C-r" . counsel-recentf)
		  ("<f1> f" . counsel-describe-function)
		  ("<f1> v" . counsel-describe-variable)
		  ("<f1> l" . counsel-find-library)
										 ; ("<f2> i" . counsel-info-lookup-symbol)
										 ; ("<f2> u" . counsel-unicode-char)
		  ("C-c g" . counsel-git-grep)
		  ("C-c j" . counsel-git)
										 ;("C-c k" . counsel-ag)
		  ("C-c r" . counsel-rg)
		  ("C-x l" . counsel-locate)
		  :map minibuffer-local-map
		  ("C-r" . counsel-minibuffer-add)
		  )
   :config
   (if (executable-find "rg")
	   ;; use ripgrep instead of grep because it's way faster
	   (setq counsel-grep-base-command
			 "rg -i -M 120 --no-heading --line-number --color never '%s' %s"
			 counsel-rg-base-command
			 "rg -i -M 120 --no-heading --line-number --color never %s ."
			 )
	 (warn "\nWARNING: Could not find the ripgrep executable. It "
		   "is recommended you install ripgrep.")
	 )
   )
	  #+end_src
