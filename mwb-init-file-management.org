#+TITLE Emacs configuration - file management
#+PROPERTY:header-args :cache yes :tangle yes :comments link

#+STARTUP: content


* TODO Trash
MacOs needs specific trash management not just mv to ~/.Trash
Perhaps only if in dired or other user controlled file
See [[https://github.com/lunaryorn/osx-trash.el][osx-trash]] but might need to find /opt/local/bin/trash
Or better patch Aquamacs to have this C code - perhaps done?
Need also to exclude some files - basically only iof you edit them
#+begin_src emacs-lisp
#+end_src

* TODO Compressed files
#+begin_src emacs-lisp
;; Transparently open compressed files
(auto-compression-mode t)

;; Old commented out code - need to review

;;  --- uncompress *.Z and *.gz files when visiting ---
;;
;; (autoload 'uncompress-while-visiting "uncompress"
;;   "Temporary \"major mode\" used for .Z and .gz files, to uncompress them.")
;; (setq auto-mode-alist
;; 	  (cons '("\\.Z$" . uncompress-while-visiting) auto-mode-alist))
;; (setq auto-mode-alist
;; 	  (cons '("\\.gz$" . uncompress-while-visiting) auto-mode-alist))
;; (setq auto-mode-alist
;;       (cons '("\\.tgz$" . uncompress-while-visiting) auto-mode-alist))

#+end_src
* Backups
Literate programming suggests each setq should be in a separate block - see later but EOL comment changes where closing parenthesis is maybe better copy code iif we had a macro to do this.
This set of variables is from [[https://www.emacswiki.org/emacs/ForceBackups][Emacs Wiki - Force Backup]] but that is not the best explanation. The version numbers are explained better elsewhere

Need to look in customisation as some things are easier to edit there . e,g, the list for where backup files are. Currently I do to the current directory/.~ which no one's init files seem to have but then found ity in Emacs manual: ü§£üò≥
The best inits I found for this were [[http://pragmaticemacs.com/emacs/auto-save-and-backup-every-save/][Pragmatic Emacs]] and [[https://github.com/jwiegley/dot-emacs/blob/master/init.el][developer of use package]]  which build on [[https://www.emacswiki.org/emacs/ForceBackup][Emacs Wiki Force Backups]]
#+begin_src emacs-lisp
(setq
 backup-by-copying t     ;  Copy all files, don't rename them and don't clobber symlinks
 kept-new-versions 10    ; keep 10 latest versions
 kept-old-versions 0     ; don't bother with old versions
 delete-old-versions "keep them all"   ; t is don't ask about deleting old versions - otyher non nil is don't delete
 version-control t       ; number backups
 vc-make-backup-files t) ; backup version controlled files

#+end_src
** Do the backups
Aquamacs seems to turn this off sometimes in customization so need to investigate more
 #+begin_src emacs-lisp
 (setq make-backup-files t)
 #+end_src
*** Backup on save
 Emacs is odd backups are started when loaded in a session and then not again (I suppose that is what auto save is for) but really we want a copy taken when saved as well.
 All the logs are very clever but what I want is the version number to increase so just see [[https://stackoverflow.com/a/9452080/151019][this SO answer]] I have modified it so that only saves on m,ac save ie when you manually save - possibly not good on emacs exit.
 Note need to change
 Filters are interesting for other reasons
 #+begin_src emacs-lisp
 (defun mwb/mac-key-save-buffer-force-backup ()
   (interactive)
   "Save buffer. If needed, select file by dialog"
   (if buffer-file-name
	   (save-buffer 16)
	 (mac-key-save-file-as)))

 (define-key osx-key-mode-map [remap mac-key-save-file]  'mwb/mac-key-save-buffer-force-backup)
 (define-key osx-key-mode-map [remap save-buffer]  'mwb/mac-key-save-buffer-force-backup)
 #+end_src

** TODO Recent Files
 Should be a customise but Aquamacs sets it so keeps adding to it pr does it need to check
 Exclusion regexes from [[https://www.reddit.com/r/emacs/comments/3g468d/stop_recent_files_showing_elpa_packages/][reddit]]
 #+begin_src emacs-lisp
 ;; Problem is this is set after the recent files are set https://emacs.stackexchange.com/questions/48784/recent-files-in-aquamacs
 ;;  Seems to be OK

 (setq recentf-exclude (append recentf-exclude
							   '("^/var/folders\\.*"
								 "COMMIT_EDITMSG\\'"
								 ".*-autoloads\\.el\\'"
								 "[/\\]\\.elpa/"
								 )))
  #+end_src
* Files
** Sunshine commander
   #+begin_src emacs-lisp
   (setq mwb-sunrise-commander-path (mwb-user-emacs-file "fork/sunrise-commander"))
   (use-package sunrise-commander
	 :defer t
	 :load-path mwb-sunrise-commander-path
	 :commands sunrise
	 :config (require 'sunrise-x-buttons))
   #+end_src
* Project management
Started as file management but actually deals with files and what is in them/ Treemacs looks at git so there are files that cannot be see so dired needed.
** Searching
   rg aka ripgrep seems to be the newest. However there is rg.el and ripgrep.el I am confused
*** [[https://github.com/Wilfred/deadgrep][Dea.dgrep]]
	This seems to provide a cover for ripgrep.
	#+begin_src emacs-lisp
	(use-package deadgrep
	  :ensure t
	  :bind ("<f4>" . deadgrep)
	  :config (unless (executable-find "ripgrep")
				(alert "Please install ripgrep snap...")))
	#+end_src
** Projectile
This add functions. I would use John Wiegley's setup but projectile hung
So take from projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :defer 5
  :diminish
  ;; :bind* (
  ;;         ("H-P" . (lambda () (interactive)
  ;;                      (projectile-cleanup-known-projects)
  ;;                      (projectile-discover-projects-in-search-path))))
  ;; :bind-keymap ("H-p" . projectile-command-map)
  :config
  ;; racket from greghendershott
  (add-to-list 'projectile-globally-ignored-directories "compiled")
  (projectile-register-project-type 'racket '("info.rkt")
									:compile "make setup"
									:test "make test")
  (setq projectile-completion-system 'ivy)
  (projectile-global-mode))
#+end_src
*** Hydra
 I really do not want all but for ease just do it from [[https://github.com/jojojames/matcha][Matcha]] but that is too much as is the Hydra wiki So lets try from [[http://doc.rix.si/cce/cce-code-core.html][Ryan Rix]], also he uses rg (bbatsov has a complex one as well)
 #+begin_src emacs-lisp
 (defhydra hydra-projectile-other-window (:color teal)
   "projectile-other-window"
   ("f"  projectile-find-file-other-window        "file")
   ("g"  projectile-find-file-dwim-other-window   "file dwim")
   ("d"  projectile-find-dir-other-window         "dir")
   ("b"  projectile-switch-to-buffer-other-window "buffer")
   ("q"  nil                                      "cancel" :color blue))

 (defhydra hydra-projectile ( :color teal)
   "
	  PROJECTILE: %(projectile-project-root)

 Search: [_a_] deadgrep  [_A_] counsel-rg
 Find:   [_b_] buffer    [_d_] dir        [_f_] file
 Look:   [_i_] ibuffer   [_j_] imenu

 Fun:    [_o_] other win [_l_] lsp        [_K_] cleanup
 "
   ("a"   deadgrep "rg")
   ("A"   counsel-rg "qrg")
   ("b"   projectile-switch-to-buffer "buf")
   ("d"   projectile-find-dir "dir")
   ("f"   projectile-find-file "file")
   ("i"   projectile-ibuffer "ibuf")
   ("j"   counsel-imenu "imenu")
   ("K"   projectile-kill-buffers)
   ("l"   hydra-lsp/body)
   ("P"   projectile-switch-project)
   ("p"   projectile-switch-project)
   ("r"   projectile-recentf "recentf")
   ("x"   projectile-remove-known-project)
   ("X"   projectile-cleanup-known-projects)
   ("z"   projectile-cache-current-file)
   ("o"   hydra-projectile-other-window/body "other")
   ("q"   nil "cancel" :color blue))

 (bind-key "H-p" 'hydra-projectile/body)
 #+end_src
** Treemacs
This is the visual
 #+begin_src emacs-lisp
 ;; Treemacs
 ;;  first pass has all defaults even if not needed
 (use-package treemacs
   :ensure t
   :defer t
   :init
   (with-eval-after-load 'winum
     (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
   :config
   (progn
     (setq hydra-key-regex "\\[\\|]\\|[-\\[:alnum:] ~.,;:/|?<>={}*+#%@!&^‚áß‚åò‚å•‚Üë‚Üì‚Üê‚Üí‚å´‚å¶‚èé'`()\"$]+?") ; add Mac key symbols

     (setq treemacs-silent-refresh t
           treemacs-persist-file (mwb-user-emacs-file "data/treemacs-persist"))
     (with-eval-after-load 'treemacs
       (add-to-list 'treemacs-pre-file-insert-predicates #'treemacs-is-file-git-ignored?))

     ;; The default width and height of the icons is 22 pixels. If you are
     ;; using a Hi-DPI display, uncomment this to double the icon size.
     ;;(treemacs-resize-icons 44)

     (treemacs-follow-mode t)
     (treemacs-filewatch-mode t)
     (treemacs-fringe-indicator-mode t)
     (pcase (cons (not (null (executable-find "git")))
                  (not (null treemacs-python-executable )))
       (`(t . t)
        (treemacs-git-mode 'deferred))
       (`(t . _)
        (treemacs-git-mode 'simple))))
   :hydra (mwb/hydra-treemacs-mode
           (:color teal)
           ("p" matcha-projectile/body "Projectile")
           ("c" treemacs-add-project-to-workspace "Create Project")
           ("d" treemacs-remove-project-from-workspace "Delete Project")
           ("q" nil "Quit"))
   (mwb/hydra-treemacs-global
    (:color blue)
    ("t" treemacs "Treemacs toggle" :column "Project")
    ("p" mwb/hydra-treemacs-mode/body "Projectile")
    ("0" treemacs-select-window "Select" :column "Other Window")
    ("1" treemacs-delete-other-windows "Delete")
    ("B" treemacs-bookmark "Bookmark" :column "Rest")
    ("f" treemacs-find-file "Find File")
    ("T" treemacs-find-tag "Find Tag"))
   :bind (("H-t" . mwb/hydra-treemacs-global/body)
          :map treemacs-mode-map
          ("<mouse-5>" . treemacs-rightclick-menu)
          ("<mouse-4>" . treemacs-rightclick-menu)))

 (use-package treemacs-projectile
   :after treemacs projectile
   :ensure t)

 (use-package treemacs-icons-dired
   :after treemacs dired
   :ensure t
   :config (treemacs-icons-dired-mode))

 (use-package treemacs-magit
   :after treemacs magit
   :ensure t)


  #+end_src
