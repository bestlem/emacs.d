#+PROPERTY:header-args :cache yes :tangle yes :comments link

* Global key bindings
This file manages my global  key bindings excpet in Aquamacs they are not global.
Other files might have defined global keys e.g. to start particular modes,  but in general we want them here.

** How to bind
The obvious is global key but......Aquamacs has added a map or two mainly to provide the command keys e.g. ‚åòS so [[https://www.emacswiki.org/emacs/AquamacsFAQ#toc13][Aquamacs FAQ]]  suggest (define-key osx-key-mode-map (kbd "H-t") 'treemacs) to alter the OSX map.

This [[https://stackoverflow.com/a/27441815/151019][Stack Overlow answer]] suggests use of bind-key  if we do not want to be overridden.

ALso see [[https://github.com/noctuid/general.el][General package]] but see [[https://github.com/noctuid/general.el/issues/10][comparison]] with bind-key from use package so stick to bind

*** TODO Replace the key definition functions with a mwb one that can switch between global-key and the Aquamacs way
Use bond-key
** Keyboard Thoughts

*** History
I used Teletypes at some stage in the beginning or at least very clicky keyboards. My first professional and heavy programming was in APL so I am used to odd layouts (IBM 3278) and clicky keys. My DOS editor was microemacs so learn some of the control xs xc and ae.

This is really the main piece of Emacs customization I have done over the years. I do not have full history before 2008 which is for Aquamacs and by that stage I had forgotten what all the key definitions were. The rcs log was from 2002 and that was 1.1.1.17 so quite a bit there but even that would have been a conversion to OSX, from my work using NT and  Sun (Linux was all server) and a NeXT PC.

I then read about keyboards especially from Xah Lee and came across the [[http://xahlee.info/kbd/i/NeXT_adb_keyboard_87366.jpg][NeXT adb keyboard for Pizza Box NeXT]] which I then realised is what I used and was where I really started to use Emacs. Note the command key is a bar below space and the keys are Help Alt going out from the space. So I used command as a binding and Help.
These keys are what the \?H bindings were and I had forgotten and probably removed a lot of those as I did not understand them. I also forgot what use the <return> and C-m choices were for. See [[http://ergoemacs.org/emacs/emacs_key_notation_return_vs_RET.html][Xah Lee "<return>" and "RET"]]
 "<return>" is the Return key while emacs runs in a graphical user interface.
 "RET" is the Return key while emacs runs in a terminal.
 "RET" is also equivalent to "C-m" („ÄêCtrl+m„Äë). (For why, see: [[http://ergoemacs.org/emacs/keystroke_rep.html][Emacs's Key Syntax Explained]])


*** Keyboard usage.
Following Xah Lee's comments and seeing [[http://xahlee.info/kbd/space-cadet_keyboard.html][The Space Cadet Keyboard]] which is what emacs was implemented on and they keys outwards of space are control, Meta, Special and Hyper. SO I tried bindin so it went control, meta, super and caps lock as hyper but I am too used to the Apple bindinhg so went back to Command, Meta and control with caps lock as hyper (and right Windows key). However the control key is difficult to hit.

**** TODO Xah Lee bracket binding
Alt-J etc as suggested [[http://xahlee.info/kbd/best_way_to_insert_brackets.html][here]]

**** Typing style
I can't touch type but seem to have two modes. One is two or more finger for text. Then a mode switch to alter things where I have a right hand on the mouse and left with thumb on ‚åò, little finger near caps lock, next on a etc. Thus ‚åòzxcvasd are easy most of those are Apple keys, similarly the alt versions are OK but emacs does use that. The control ones are difficult. The Hyper ones are OK.
I discovered [[https://github.com/abo-abo/hydra][Hydra Mode]] which allows you to define keys and a menu to show what they do. I realised that for a new to me mode I could bind the most interesting functions to a hydra to help me learn what the mode does and also cut down on control-C (That's interrupt, isn't it ü§£must bind control-C to control-G as I have wanted that for ages)

So hyper-A is now a mode hydra key and I have started defining a hydra on that,

* Implementation

** Which Key
   Package [[https://github.com/justbur/emacs-which-key][which-key]] shows after a key press what you can do next (not useful for control-C as there are too many to show and you can't scroll).
   #+begin_src emacs-lisp
   (use-package
	 which-key
	 :ensure t
	 :defer 5
	 :config (which-key-setup-side-window-right-bottom)
	 (setq which-key-sort-order 'which-key-key-order-alpha
		   which-key-side-window-max-width 0.33
		   which-key-idle-delay 0.05)
	 (which-key-mode)
	 :diminish which-key-mode)
   #+end_src

** Mac modifier key Bindings
We have fn available so have it as hyper and then use Karabiner  (try iCue later) to map Caps Lock and Window key to hyper. Super is used sometimes so UI think is confusing and as noted sequence of keys (emacs key-chord and hydra) is better.
I don't use the right hand modifier keys so not set separately.
#+begin_src emacs-lisp
	 (setq ns-function-modifier 'hyper)
#+end_src
*** Display in help and menus
Note that you can control what the screen displays A for Alt or ‚å•. Emacs is not that clever and looks at what it is told and not what appears on the key but I am back to the normal bindings so does not matter. Although hydra seems to object. Set the value to non=nil to use Mac symbols.
#+begin_src emacs-lisp
	(setq ns-use-mac-modifier-symbols  t)
#+end_src
*** Home/End/Paging
 #+begin_src emacs-lisp
	 (define-key osx-key-mode-map [end] 'end-of-line )
	 (define-key osx-key-mode-map [home] 'beginning-of-line )
	 ;;(define-key osx-key-mode-map [C-end] 'end-of-buffer )
	 (define-key osx-key-mode-map [C-home] 'beginning-of-buffer )
	 (define-key osx-key-mode-map [C-kp-end] 'end-of-buffer )
	 (define-key osx-key-mode-map [C-kp-home] 'beginning-of-buffer )
	 (define-key osx-key-mode-map [S-kp-next] 'scroll-other-window-down )
	 (define-key osx-key-mode-map [S-kp-prior] 'scroll-other-window )

	 ;; Apple
	 ;; Aquamacs thinks the insert key is <help>
	 (global-set-key [S-kp-delete] 'cua-cut-region)
	 ;; Cocoa emacs does not recognise this key
	 (global-set-key [S-kp-insert] 'cua-paste)
	 (global-set-key [C-kp-insert] 'cua-copy-region)

	 (global-set-key [end] 'end-of-line )
	 (global-set-key [home] 'beginning-of-line )

	 ;; Aqua macs defaults these to same
	 ;(global-set-key [C-end] 'end-of-buffer )
	 ;(global-set-key [C-home] 'beginning-of-buffer )

	 ;; Unknown
	 (global-set-key [C-kp-end] 'end-of-buffer )
	 (global-set-key [C-kp-home] 'beginning-of-buffer )
	 (global-set-key [S-kp-next] 'scroll-other-window-down )
	 (global-set-key [S-kp-prior] 'scroll-other-window )

	 ;(global-set-key [s-left] 'scroll-left)
	 ;(global-set-key [s-right] 'scroll-right)


#+end_src
** Kill buffer
Normally when you are in a buffer you do ^x-^k to kill the current buffer but emacs asks you for the name. [[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Pragmatic Emacs]] suggests this.
  #+begin_src emacs-lisp
	 ;;  By default C-x k runs the command kill-buffer which prompts you for which buffer you want to kill, defaulting to the current active buffer. I don‚Äôt know about you, but I rarely want to kill a different buffer than the one I am looking at, so I rebind C-x k to kill-this-buffer which just kills the current buffer without prompting (unless there are unsaved changes).
	 (defun bjm/kill-this-buffer ()
	   "Kill the current buffer."
	   (interactive)
	   (kill-buffer (current-buffer)))

	 (define-key osx-key-mode-map (kbd "C-x k") 'bjm/kill-this-buffer)
#+end_src
** Deleting and return
  #+begin_src emacs-lisp


	 ;; (global-set-key [C-return] 'newline-and-indent )
	 ;;(global-set-key [?\M-left] 'scroll-left )


	 ;(global-set-key [C-backspace] 'backward-delete-char-untabify )
	 (global-set-key [kp-delete] 'delete-char )
	 (global-set-key [backspace] 'backward-delete-char-untabify)

	 ;(global-set-key [?\A-backspace] 'undo )
#+end_src
** Goto line
Now these are very old
  #+begin_src emacs-lisp
	 (global-set-key (kbd "M-g") 'goto-line)
	 (global-set-key (kbd "A-u") 'revert-buffer )
#+end_src
** Let search continue with arrows
But point seems to be messed up and does Aquamacs do something.
[[http://ergoemacs.org/emacs/emacs_isearch_by_arrow_keys.html][Xah Lee  again]] set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
#+begin_src emacs-lisp

	 (progn
	   (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
	   (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )

	   (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
	   (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)

	   (define-key minibuffer-local-isearch-map (kbd "<left>") 'isearch-reverse-exit-minibuffer)
	   (define-key minibuffer-local-isearch-map (kbd "<right>") 'isearch-forward-exit-minibuffer))
#+end_src
*** TODO Use with cmd-F
Aquamacs also messes around with isearch and the two don't exactly match
** Function keys
Originally fit in with Visual C 6 (or earlier) keys. F1 help and can't redo in emacs. Just discovered that GNU say what F1-4 should be and seemed good for keyboard macros not my F7. ALso I need to forget F4 for grep but then again I need to see what grep I want. But a hydra will be better allowing start/start/go and format as elisp.

#+begin_src emacs-lisp

	 (bind-key* [f2] 'er/expand-region) ; I never use 2 column

	 ;; (global-set-key [f3] 'gdb)
	 ;; (global-set-key [f4] 'grep )
	 (global-set-key [f5] 'compile )
	 (global-set-key [S-f4] 'grep )
	 ;; These are the VC6 ones - not used for 15 years so can learn new ones,
	 ;; (global-set-key [kp-f3] 'gdb)
	 ;; (global-set-key [f12] 'gud-step )
	 ;; (global-set-key [f11] 'gud-next )
	 ;; (global-set-key [C-f10] 'gud-cont )
	 ;; (global-set-key [f10] 'gud-finish )
	 ;; (global-set-key [C-f11] 'gud-break )
	 ;; (global-set-key [C-f12] 'gud-tbreak )

	 ;;  More VC6 keys
	 (global-set-key [S-f7]  'next-error )
	 (global-set-key [S-f8] 'previous-error)

#+end_src
** Old bindings
These will be old NeXT Pizza bindings


	 ;(global-set-key [?\A-=] 'what-line )
	 ;(global-set-key [?\M-g] 'goto-line)
	 ;(global-set-key [?\A-g] 'goto-line)
	 ;(global-set-key "\M-q" 'query-replace)
	 ;(global-set-key "\M-r" 'replace-string)
	 ;(global-set-key "\M-i" 'indent-region)
** Matcha
Global hydra from [[https://github.com/jojojames/matcha][Matcha github]] but no idea how good. I didn't want it all but that was the easiest.
Also see [[https://github.com/jerrypnz/major-mode-hydra.el][Major mode hydra]] for similar but grabs a major mode hydra from somewhere. Actually it is more like my H-A but automated it looks for
#+begin_src emacs-lisp
(use-package matcha
:disabled
  :config
  (matcha-setup))


(defhydra hydra-space (:color blue :hint nil :idle .2)
  "

   Space: %s`default-directory

    Find              Manage             Do                Mode
  ------------------------------------------------------------------------------
    _f_ File       _w_ Window      _s_ Search           _m_ Mode
    _b_ Buffer     _g_ Git         _R_ Refactor         _d_ Debug
    _r_ Recent     _p_ Project     _v_ Edit Init.el     _e_ Eval
    _n_ Sidebar    _y_ System      _o_ Org              _t_ Test
    _SPC_ Any      _U_ Undo        _u_ Universal Arg..  _=_ Format

"
  ("1" digit-argument)
  ("2" digit-argument)
  ("3" digit-argument)
  ("4" digit-argument)
  ("5" digit-argument)
  ("6" digit-argument)
  ("7" digit-argument)
  ("8" digit-argument)
  ("9" digit-argument)
  ("0" digit-argument)
  ("u" universal-argument)
  ("f" +find-file-dwim)
  ("b" +buffers-dwim)
  ("r" +recentf-dwim)
  ("w" hydra-window/body)
  ("-" split-window-below)
  ("|" split-window-right)
  ("\\" split-window-right)
  ("<backspace>" delete-window)
  ("DEL" delete-window) ;; For terminals.
  ("s" hydra-search/body)
  ("v" (lambda () (interactive) (find-file "~/.emacs.d/init.el")))
  ("U" undo-tree-visualize)
  ("x" kill-buffer)
  ("y" hydra-system/body)
  ("n" dired-sidebar-toggle-sidebar)
  ("p" matcha-projectile/body)
  ("g" +show-vc-hydra)
  ("SPC" counsel-fzf)
  ("RET" quickrun)
  (";" counsel-M-x)
  (":" eval-expression)
  ("o" hydra-org-space/body)
  ("S" +save-all-buffers)
  ("R" matcha-run-refactor-command)
  ("=" matcha-run-format-command)
  ("d" matcha-run-debug-command)
  ("m" matcha-run-mode-command)
  ("e" matcha-run-eval-command)
  ("t" matcha-run-test-command))

#+end_src
** Hyper global key bindings
#+begin_src emacs-lisp

(bind-key (kbd "H-1")  'delete-other-windows osx-key-mode-map)
(bind-key (kbd "H-0")  'delete-window osx-key-mode-map)
;; H-a is major mode specific Hydra so bound to mode keymap by use-packag :hydra
;; (bind-key (kbd "H-h") 'hydra-space/body)
(bind-key (kbd "H-n") 'tabbar-move-current-buffer-to-new-frame osx-key-mode-map)
;; H-r is register
;; H-s is return from org special edit
(bind-key (kbd "H-t") 'treemacs osx-key-mode-map)

(bind-key "H-<return>" 'cua-set-rectangle-mark cua-global-keymap)
(unbind-key "C-<return>" cua-global-keymap)
	 #+end_src
** Command key bindings
These should be mac based adding to Aquamacs but some I do not used.
Note that the Aquamacs binding does not fit through bind-keys
#+begin_src emacs-lisp
(bind-key "A-/" 'comment-or-uncomment-region-or-line)
(bind-key "A-<kp-add>" 'zoom-font)
(bind-key "A-<kp-subtract>" 'zoom-font-out)
#+end_src
