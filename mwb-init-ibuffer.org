#+TITLE Emacs configuration - ibuffer
#+PROPERTY:header-args :cache yes :tangle yes :comments link
#+STARTUP: content
* Buffers

Ibuffer seems to be the one.
I would note that this is where use-package and other code reasons to keep together conflict with literate programming. Current use literate-programming but I suspect noweb is the way here once I have a working setup. use-package benefit includes a total fail if issue.
Current attempt is a halfway. Instead of noweb I call a new org file. This keeps all the code in org files as valid lisp. AT some stage for e.g. hydr it might make sense for nopweb as framents are not valid lisp.

There is some comment on internet that other things in ibuffer are a mess. I would say that the list of grouping is another.

This setup from [[https://emacs.nasy.moe/#org2ffc7b4][nasy.moe]] and others for the default and [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]] for the grouping

However much of the same code appears in many places so I don't know the real source

** Main use
   The overal load.
   #+begin_src emacs-lisp
   (use-package ibuffer
	 :bind (("C-x C-b" . ibuffer)
			:map ibuffer-mode-map
			("." . hydra-mwb-ibuffer-main/body))
	 :init
	 (setq ibuffer-show-empty-filter-groups nil
		   ibuffer-default-sorting-mode 'filename/process)
	 :config
	 (mwb-init-load "mwb-init-ibuffer-config"))
   #+end_src

** Display functions
#+begin_src emacs-lisp
;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size" :inline nil)
  (let ((bs (buffer-size)))
	(cond ((> bs 1e6) (format "%7.1fMB" (/ bs 1e6)))
		  ((> bs 1e3) (format "%7.1fkB" (/ bs 1e3)))
		  (t          (format "%7d  " bs)))))

(setq ibuffer-formats
	  '((mark modified read-only vc-status-mini " "
			  (name 30 30 :left :elide)
			  " "
			  (size-h 9 -1 :right)
			  " "
			  (mode 10 10 :left :elide)
			  " "
			  (vc-status 10 10 :left)
			  " "
			  filename-and-process)))
  #+end_src

** Groups
This is from  [[https://www.reddit.com/r/emacs/comments/64kr02/emacs_workflow_some_guidance_please/][reddit]]

*** Collapse buffer groups
***** Choose the groups
 #+begin_src emacs-lisp
 (defvar gk-ibuffer-collapsed-groups
   (list
	"Special buffers"
	"Emacs"
	"Emacs Documentation"
	"Help"
	"GNUs"
	"Magit"
	"Custom"
	"Helm"
	;; "Special buffers"
	"EWW Reading"
	"VC"))
#+end_src
***** Do the collapsing
#+begin_src emacs-lisp
(define-advice ibuffer (:after (&rest args) gk-hidden-groups)
  "Hide groups in ‘gk-ibuffer-collapsed-groups’."
  (ignore args)
  (save-excursion
	(dolist (group gk-ibuffer-collapsed-groups)
	  (ignore-errors
		(ibuffer-jump-to-filter-group group)
		(ibuffer-toggle-filter-group)))))
#+end_src
*** Add the hook for the grouping
#+begin_src emacs-lisp
(cl-defun gk-ibuffer-hook ()
   (unless (eq ibuffer-sorting-mode 'alphabetic)
	 (ibuffer-do-sort-by-filename/process))
   (ibuffer-update nil t))

(add-hook 'ibuffer-hook 'gk-ibuffer-hook)
	#+end_src

** Put cursor on most recent buffer
   Switching to ibuffer puts the cursor on the most recent buffer and where advices go with use-package to be found out.

   #+begin_src emacs-lisp
   (defadvice ibuffer (around ibuffer-point-to-most-recent) ()
	 "Open ibuffer with cursor pointed to most recent buffer name"
	 (let ((recent-buffer-name (buffer-name)))
	   ad-do-it
	   (ibuffer-jump-to-buffer recent-buffer-name)))

   (ad-activate 'ibuffer)
   #+end_src
** Hydra
   #+begin_src emacs-lisp
   (defhydra hydra-mwb-ibuffer-main (:color pink :hint nil)
	 "
   ^Mark^         ^Actions^         ^View^          ^Select^              ^Navigation^
   _m_: mark      _D_: delete       _g_: refresh    _q_: quit             _k_:   ↑    _h_
   _u_: unmark    _s_: save marked  _S_: sort       _TAB_: toggle         _RET_: visit
   _*_: specific  _a_: all actions  _/_: filter     _o_: other window     _j_:   ↓    _l_
   _t_: toggle    _._: toggle hydra _H_: help       C-o other win no-select
   "
	 ("m" ibuffer-mark-forward)
	 ("u" ibuffer-unmark-forward)
	 ("*" hydra-ibuffer-mark/body :color blue)
	 ("t" ibuffer-toggle-marks)

	 ("D" ibuffer-do-delete)
	 ("s" ibuffer-do-save)
	 ("a" hydra-ibuffer-action/body :color blue)

	 ("g" ibuffer-update)
	 ("S" hydra-ibuffer-sort/body :color blue)
	 ("/" hydra-ibuffer-filter/body :color blue)
	 ("H" describe-mode :color blue)

	 ("h" ibuffer-backward-filter-group)
	 ("k" ibuffer-backward-line)
	 ("l" ibuffer-forward-filter-group)
	 ("j" ibuffer-forward-line)
	 ("RET" ibuffer-visit-buffer :color blue)

	 ("TAB" ibuffer-toggle-filter-group)

	 ("o" ibuffer-visit-buffer-other-window :color blue)
	 ("q" quit-window :color blue)
	 ("." nil :color blue))


   (defhydra hydra-ibuffer-mark (:color teal :columns 5
								 :after-exit (hydra-ibuffer-main/body))
	 "Mark"
	 ("*" ibuffer-unmark-all "unmark all")
	 ("M" ibuffer-mark-by-mode "mode")
	 ("m" ibuffer-mark-modified-buffers "modified")
	 ("u" ibuffer-mark-unsaved-buffers "unsaved")
	 ("s" ibuffer-mark-special-buffers "special")
	 ("r" ibuffer-mark-read-only-buffers "read-only")
	 ("/" ibuffer-mark-dired-buffers "dired")
	 ("e" ibuffer-mark-dissociated-buffers "dissociated")
	 ("h" ibuffer-mark-help-buffers "help")
	 ("z" ibuffer-mark-compressed-file-buffers "compressed")
	 ("b" hydra-ibuffer-main/body "back" :color blue))

   (defhydra hydra-ibuffer-action (:color teal :columns 4
								   :after-exit
								   (if (eq major-mode 'ibuffer-mode)
									   (hydra-ibuffer-main/body)))
	 "Action"
	 ("A" ibuffer-do-view "view")
	 ("E" ibuffer-do-eval "eval")
	 ("F" ibuffer-do-shell-command-file "shell-command-file")
	 ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
	 ("H" ibuffer-do-view-other-frame "view-other-frame")
	 ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
	 ("M" ibuffer-do-toggle-modified "toggle-modified")
	 ("O" ibuffer-do-occur "occur")
	 ("P" ibuffer-do-print "print")
	 ("Q" ibuffer-do-query-replace "query-replace")
	 ("R" ibuffer-do-rename-uniquely "rename-uniquely")
	 ("T" ibuffer-do-toggle-read-only "toggle-read-only")
	 ("U" ibuffer-do-replace-regexp "replace-regexp")
	 ("V" ibuffer-do-revert "revert")
	 ("W" ibuffer-do-view-and-eval "view-and-eval")
	 ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
	 ("b" nil "back"))

   (defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
	 "Sort"
	 ("i" ibuffer-invert-sorting "invert")
	 ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
	 ("v" ibuffer-do-sort-by-recency "recently used")
	 ("s" ibuffer-do-sort-by-size "size")
	 ("f" ibuffer-do-sort-by-filename/process "filename")
	 ("m" ibuffer-do-sort-by-major-mode "mode")
	 ("b" hydra-ibuffer-main/body "back" :color blue))

   (defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
	 "Filter"
	 ("m" ibuffer-filter-by-used-mode "mode")
	 ("M" ibuffer-filter-by-derived-mode "derived mode")
	 ("n" ibuffer-filter-by-name "name")
	 ("c" ibuffer-filter-by-content "content")
	 ("e" ibuffer-filter-by-predicate "predicate")
	 ("f" ibuffer-filter-by-filename "filename")
	 (">" ibuffer-filter-by-size-gt "size")
	 ("<" ibuffer-filter-by-size-lt "size")
	 ("/" ibuffer-filter-disable "disable")
	 ("b" hydra-ibuffer-main/body "back" :color blue))
   #+end_src
