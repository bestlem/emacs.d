#+TITLE Emacs configuration - lisp
#+PROPERTY:header-args :cache yes :tangle (concat "init/" (file-name-base  (buffer-file-name)) ".el") :comments link

#+STARTUP: content

* Lisp running environment
We might try a few but Emacs Lisp is the only one currently

** Common to all

*** Make parentheses pretty
Although that should be in prog mode
	#+begin_src emacs-lisp
 (use-package
   rainbow-delimiters
   :ensure t
   :delight rainbow-delimiters-mode
   :hook (prog-mode . rainbow-delimiters-mode))
	#+end_src

*** Add lisp interaction mode

**** Lispy
	 #+begin_src emacs-lisp
	 (use-package lispy
	   :ensure t
	   :hook ((emacs-lisp-mode lisp-interaction-mode) . lispy-mode))
	 #+end_src

**** and interaction hydra
	 #+begin_src emacs-lisp
	 (use-package lispy-mnemonic
	   :hook ('emacs-lisp-mode . 'lispy-mnemonic-mode)
	   :bind ("H-d" . 'hydra-lispy-debug/body)
	   )
	 #+end_src
** Emacs Lisp
*** Formatter
I am not certain this is needed now as other things do this
#+begin_src  emacs-lisp
(use-package
	elisp-format
	:ensure t)
#+end_src
*** Protect system emacs lisp from editing
Idea come from [[https://github.com/purcell/emacs.d][A Resonable Emacs]]
**** Increase list to exclude Aquamacs etc.
Look at directory variables and then use a customised list to hold directories, loop/map setting them See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html#Directory-Variables][Gnu Emacs Manual]]
#+begin_src emacs-lisp
   (defun sanityinc/maybe-set-bundled-elisp-readonly ()
	 "If this elisp appears to be part of Emacs, then disallow editing."
	 (when (and (buffer-file-name)
				(string-match-p "\\.el\\.gz\\'" (buffer-file-name)))
       (setq buffer-read-only t)
       (view-mode 1)))

   (add-hook 'emacs-lisp-mode-hook 'sanityinc/maybe-set-bundled-elisp-readonly)
#+end_src
*** Keyboard Macros
Well not really lisp but much can be converted to it
**** Show as emacs lisp
***** TODO Put these together
***** Load the converter to elisp
	#+begin_src emacs-lisp
	(use-package elmacro :ensure t)
	#+end_src
***** Hydra for macros
From [[https://github.com/abo-abo/hydra/wiki/Macro][Hydra wiki]]
	  #+begin_src emacs-lisp
	  (defhydra hydra-macro (:hint nil :color pink :pre
								   (when defining-kbd-macro
									 (kmacro-end-macro 1)))
		"
		^Create-Cycle^   ^Basic^           ^Insert^        ^Save^         ^Edit^
	  ╭─────────────────────────────────────────────────────────────────────────╯
		   ^_i_^           [_e_] execute    [_n_] insert    [_b_] name      [_'_] previous
		   ^^↑^^           [_d_] delete     [_t_] set       [_K_] key       [_,_] last
	   _j_ ←   → _l_       [_o_] edit       [_a_] add       [_x_] register
		   ^^↓^^           [_r_] region     [_f_] format    [_B_] defun
		   ^_k_^           [_m_] step
		  ^^   ^^          [_s_] swap
	  "
		("j" kmacro-start-macro :color blue)
		("l" kmacro-end-or-call-macro-repeat)
		("i" kmacro-cycle-ring-previous)
		("k" kmacro-cycle-ring-next)
		("r" apply-macro-to-region-lines)
		("d" kmacro-delete-ring-head)
		("e" kmacro-end-or-call-macro-repeat)
		("o" kmacro-edit-macro-repeat)
		("m" kmacro-step-edit-macro)
		("s" kmacro-swap-ring)
		("n" kmacro-insert-counter)
		("t" kmacro-set-counter)
		("a" kmacro-add-counter)
		("f" kmacro-set-format)
		("b" kmacro-name-last-macro)
		("K" kmacro-bind-to-key)
		("B" insert-kbd-macro)
		("x" kmacro-to-register)
		("'" kmacro-edit-macro)
		("," edit-kbd-macro)
		("q" nil :color blue))

	  (bind-key "<f3>" 'hydra-macro/body)

	  #+end_src
