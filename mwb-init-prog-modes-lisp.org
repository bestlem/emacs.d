#+TITLE Emacs configuration - lisp
#+PROPERTY:header-args :cache yes :tangle yes  :comments link
#+STARTUP: content

* Lisp running environment
We might try a few but Emacs Lisp is the only one currently

** Common to all

*** Make parentheses pretty
Although that should be in prog mode
	#+begin_src emacs-lisp
 (use-package
   rainbow-delimiters
   :ensure t
   :delight rainbow-delimiters-mode
   :hook (prog-mode . rainbow-delimiters-mode))
	#+end_src

*** Add lisp interaction mode
**** xah mode
	 This does more formatting and has useful abbreviations but I don't know if will work with lispy
     #+begin_src emacs-lisp
	 (use-package xah-elisp-mode
	   :ensure t
	   :disabled
	   :hook emacs-lisp-mode)
     #+end_src
**** Lispy
	 #+begin_src emacs-lisp
	 (use-package lispy
	   :ensure t
	   ;; :config (add-to-list lispy-elisp-modes xah-elisp-mode)
	   :hook ((emacs-lisp-mode lisp-interaction-mode racket-mode) . lispy-mode)
	   :bind (:map lispy-mode-map
				   ("<backspace>" . lispy-delete-backward)
				   ("<kp-delete>" . lispy-delete)))
	 #+end_src
**** and interaction hydra
	 Changes are now made directly to the package which is only now here
	 #+begin_src emacs-lisp
	 (use-package lispy-mnemonic
	   :after (lispy eros)
	   :hook (emacs-lisp-mode . lispy-mnemonic-mode))
	 #+end_src
*** Evaluation
	Instead of displaying the results in a separate buffer (like the iElm does), The [[https://github.com/xiongtx/eros][EROS project]] displays the results temporarily  /in the buffer/ in an overlay.  No need to do anything special:
However it does uit by remapping the eval keys so interferes with lispy so need to sort that out. PBest idea is make it one of the possible parts of lispy-mnemonic eval.
	#+BEGIN_SRC elisp
	(use-package eros
	  :ensure t
	  :hook ((emacs-lisp-mode lisp-interaction-mode racket-mode) . eros-mode))
   #+END_SRC
** Emacs Lisp
*** Formatter
	I am not certain this is needed now as other things do this
    #+begin_src  emacs-lisp
	(use-package elisp-format :defer 10 :ensure t)
    #+end_src
*** See macros
	#+begin_src emacs-lisp
	(use-package macrostep
	  :ensure t
	  :after emacs-lisp
	  :commands (macrostep-expand
				 macrostep-mode)
	  :bind (:map emacs-lisp-mode
				  ("C-c e m" . macrostep-expand)))
	#+end_src
*** Extras
	Seen but not used yet [[https://github.com/ScottyB/edebug-x][edebug-x]]
	#+begin_src emacs-lisp
	(use-package edebug-x :ensure t)
	#+end_src
*** Completion
Add company backend from John Widgley
#+begin_src emacs-lisp
(use-package company-elisp
  :after company
  :config
  (push 'company-elisp company-backends))

(setq-local company-backend '(company-elisp))
#+end_src
*** Keyboard Macros
Well not really lisp but much can be converted to it
**** Show as emacs lisp
***** TODO Put these together
***** Load the converter to elisp
	#+begin_src emacs-lisp
	(use-package elmacro
	  :ensure t
	  :commands (elmacro-show-last-macro elmacro-show-last-commands))
	#+end_src
***** Hydra for macros
From [[https://github.com/abo-abo/hydra/wiki/Macro][Hydra wiki]] and [[https://github.com/edil3ra/emacs_save/blob/master/settings.org][another init file]] but not the latter seems to have some odd entries as well so an edit of the two
	  #+begin_src emacs-lisp
	  (defhydra hydra-macro (:hint nil :color pink :pre
								   (when defining-kbd-macro
									 (kmacro-end-macro 1)))
		"
			  ^Create-Cycle^         ^Basic^          ^Insert^        ^Save^         ^Edit^
			╭─────────────────────────────────────────────────────────────────────────╯
					^_p_^           [_e_] execute    [_i_] insert    [_b_] name      [_'_] previous
					^^↑^^           [_d_] delete     [_c_] set       [_K_] key       [_,_] last
			 _<f2>_ ←   → _e_       [_o_] edit       [_a_] add       [_x_] register  [_._] losage
					^^↓^^           [_r_] region     [_f_] format    [_B_] defun     [_v_] view
					^_k_^           [_m_] step                                       [_l_] prev lisp
				   ^^   ^^          [_s_] swap                                       [_L_] commands
			"
		("<f2>" kmacro-start-macro :color blue)
		("e" kmacro-end-or-call-macro-repeat)
		("E" kmacro-end-or-call-macro-repeat :color blue)

		("p" kmacro-cycle-ring-previous)
		("k" kmacro-cycle-ring-next)
		("r" apply-macro-to-region-lines)
		("d" kmacro-delete-ring-head)
		("e" kmacro-end-or-call-macro-repeat)
		("o" kmacro-edit-macro-repeat)
		("m" kmacro-step-edit-macro)
		("s" kmacro-swap-ring)
		("i" kmacro-insert-counter)
		("c" kmacro-set-counter)
		("a" kmacro-add-counter)
		("f" kmacro-set-format)
		("b" kmacro-name-last-macro)
		("K" kmacro-bind-to-key)
		("B" insert-kbd-macro)
		("x" kmacro-to-register)
		("'" kmacro-edit-macro)
		("," edit-kbd-macro)
		("." kmacro-edit-lossage)
		("u" universal-argument)
		("v" kmacro-view-macro)
		("V" kmacro-view-ring-2nd-repeat)
		("l" elmacro-show-last-macro)
		("L" elmacro-show-last-commands)
		("q" nil :color blue))

	  (bind-key "<f3>" 'hydra-macro/body)

	  #+end_src
