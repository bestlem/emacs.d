#+TITLE Emacs configuration org Programming and structured data modes
#+PROPERTY:header-args :cache yes :tangle (concat "init/" (file-name-base  (buffer-file-name)) ".el") :comments link

* Common to all programming modes

** Structure
Indentation and tabs
Look at smart-tabs-insinuate
*** Highlight indents
 I have wanted a good visual identification of indentation since I had the dos pronter program in mid 80s. I *now* have it

  #+begin_src emacs-lisp

  (use-package highlight-indent-guides
	:ensure t
	:diminish highlight-indent-guides-mode
	:config
	(setq highlight-indent-guides-method 'fill)
	;; Indent character samples: ┃| ┆ ┊
	(setq highlight-indent-guides-character ?\┃)
	(setq highlight-indent-guides-auto-odd-face-perc 50)
	(setq highlight-indent-guides-auto-even-face-perc 20)
	(setq highlight-indent-guides-auto-character-face-perc 20)
	:hook (prog-mode . highlight-indent-guides-mode))
 #+end_src
*** Aggressive indent
 Indent as you type. Only for emacs lisp at the moment
 #+begin_src emacs-lisp
  ;;  Aggressive indent make indents as you type
  (use-package
	aggressive-indent
	:ensure t
	:hook (emacs-lisp-mode . aggressive-indent-mode))
 #+end_src
*** Clean up whitespace
 Only do it on my edits
**** Whitespace at end of line
  #+begin_src emacs-lisp
   (use-package ws-butler
	 :ensure t
	 :diminish ws-butler-mode
	 :hook ((prog-mode org-mode) . ws-butler-mode ))
 #+end_src
**** TODO Need to look at this more
** TODO Flymake
Need to start from scratch. I do have it for emacs but as code in org mode not an elisp file a bit of a waste
#+begin_src emacs-lisp

  ;;;; flymake - syntax checking
  (use-package flymake
	:disabled
	:diminish
	:hook ((sh-mode json-mode nxml-mode python-mode emacs-lisp-mode lisp-interaction-mode) . flymake-mode-on)
	:config (flymake-mode-on))
#+end_src
** Completion
I need something and company seems to be the current one
#+begin_src emacs-lisp
  ;;  Start completion
  (use-package
	company
	:ensure t
	:config (add-hook
			 'after-init-hook
			 'global-company-mode))
#+end_src
* Specific groups
Where there is common put them together. This part is really why I have separate files so I can deal with one thing at a time
** Lisp
 #+begin_src emacs-lisp
   (mwb-init-load "mwb-init-lisp")
#+end_src
** Build systems
As Emacs is bad for java my java setup is now just gradle so that should be a generic build when I rename.
#+begin_src emacs-lisp
   (load "setup-java-env")
#+end_src
** Python
Really need to start from scratch
#+begin_src emacs-lisp
   (load "setup-python")
#+end_src
** Git
#+begin_src emacs-lisp
   (load "setup-git")
#+end_src
** Structured data
#+begin_src emacs-lisp
   (load "setup-structured-data.el")
#+end_src
** SQL
#+begin_src emacs-lisp
   (load "setup-sql")
#+end_src
** C
This is where I have really lost history there used to be all sorts of indenation rules.
#+begin_src emacs-lisp
   ;; objective C
   (add-to-list 'auto-mode-alist '("\\.h$" . objc-mode) )
   (add-to-list 'auto-mode-alist '("\\.m$" . objc-mode))
   (add-to-list 'auto-mode-alist '("\\.mm$" . objc-mode))
#+end_src
** Perl
Possibly lost as I did have cperl at one time but from comments that might have been before heavy development
#+begin_src emacs-lisp
   (setq auto-mode-alist
		 (cons '("\\.pl$" . perl-mode) auto-mode-alist))
   (setq auto-mode-alist
		 (cons '("\\.pm$" . perl-mode) auto-mode-alist))

   ;; set keys
   ;(load-library "perldb")

   (defun my-perl-mode-hook ()
	 "My Perl settings"
	 (define-key perl-mode-map [return] 'newline-and-indent )
	 (define-key perl-mode-map [C-return] 'newline )
	 (setq perl-indent-level 4)
	 (setq perl-continued-statement-offset 4)
	 (setq perl-continued-brace-offset -4)
	 (setq perl-brace-offset 0)
	 (setq perl-brace-imaginary-offset 0)
	 (setq  perl-label-offset -2)
	 (define-key perl-mode-map [f3] 'perldb )
   ;  (setq perldb-command-name "/run/pd/packages/perl/5.003/bin/perl")
   ;  (setq perldb-command-name "/sbcimp/run/pd/perl/prod/bin/perl")
	 )
   (add-hook 'perl-mode-hook 'my-perl-mode-hook)

   ;; perl debug
   ;; (defun my-perldb-mode-hook ()
   ;;   (setq perldb-command-name "/run/pd/packages/perl/5.003/bin/perl")
   ;; )
   ;; (add-hook 'perldb-mode-hook 'my-perldb-mode-hook)
#+end_src
