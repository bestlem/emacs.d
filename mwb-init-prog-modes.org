#+TITLE Emacs configuration org Programming and structured data modes
#+PROPERTY:header-args :cache yes :tangle (concat "init/" (file-name-base  (buffer-file-name)) ".el") :comments link

* Common to all programming modes

** Code Edit Structure
Indentation and tabs
Look at smart-tabs-insinuate
*** Highlight indents
 I have wanted a good visual identification of indentation since I had the dos pronter program in mid 80s. I *now* have it

  #+begin_src emacs-lisp

  (use-package highlight-indent-guides
	:ensure t
	:diminish highlight-indent-guides-mode
	:config
	(setq highlight-indent-guides-method 'fill)
	;; Indent character samples: ┃| ┆ ┊
	(setq highlight-indent-guides-character ?\┃)
	(setq highlight-indent-guides-auto-odd-face-perc 50)
	(setq highlight-indent-guides-auto-even-face-perc 20)
	(setq highlight-indent-guides-auto-character-face-perc 20)
	:hook (prog-mode . highlight-indent-guides-mode))
 #+end_src
*** Aggressive indent
 Indent as you type. Only for emacs lisp at the moment
 #+begin_src emacs-lisp
  ;;  Aggressive indent make indents as you type
  (use-package
	aggressive-indent
	:ensure t
	:hook (emacs-lisp-mode . aggressive-indent-mode))
 #+end_src
*** Clean up whitespace
 Only do it on my edits
**** Whitespace at end of line
  #+begin_src emacs-lisp
   (use-package ws-butler
	 :ensure t
	 :diminish ws-butler-mode
	 :hook ((prog-mode org-mode) . ws-butler-mode ))
 #+end_src
**** TODO Need to look at this more
*** iMenu in all buffers
	#+begin_src emacs-lisp
	(add-hook 'prog-mode-hook (lambda () (imenu-add-to-menubar "Imenu")))
	#+end_src
** Build systems
*** Gradle
 As Emacs is bad for java my java setup is now just gradle so that should be a generic build when I rename.
 #+begin_src emacs-lisp

 ;; gradle and other java
 ;; from http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html#orgac34543

 (use-package groovy-mode
   :ensure t
   :mode ("\.groovy$" "\.gradle$")
   :interpreter ("gradle" "groovy")
   :config
   (autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process")
   (autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode")

   ;; Some keys for
   (add-hook 'groovy-mode-hook
             '(lambda ()
				(inf-groovy-keys))))

 ;; Subpackages
 (use-package groovy-imports :ensure t)


 ;; ;; This does work with Aquamacs
 ;; (add-to-list 'auto-mode-alist (cons "\\.gradle\\'" 'groovy-mode))
 ;; (add-to-list 'auto-mode-alist (cons "\\.groovy\\'" 'groovy-mode))
 ;; ;; This _might_ not work with Aquamacs (not sure what value it offers)
 ;; ;(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
 ;; ;(add-to-list 'interpreter-mode-alist '("gradle" . groovy-mode))

 ;; ;;; make Groovy mode electric by default.
 ;; (add-hook 'groovy-mode-hook
 ;;           '(lambda ()
 ;;              (require 'groovy-electric)
 ;;              (groovy-electric-mode)))
 ;; (require 'gradle)

 (use-package gradle-mode
   :ensure t
	:diminish
   :config
   (setq gradle-gradlew-executable "./gradlew"
         gradle-use-gradlew t)
   (gradle-mode))
 #+end_src
**** TODO Flymake
  Need to start from scratch. I do have it for emacs but as code in org mode not an elisp file a bit of a waste
  #+begin_src emacs-lisp

	;;;; flymake - syntax checking
	(use-package flymake
	  :disabled
	  :diminish
	  :hook ((sh-mode json-mode nxml-mode python-mode emacs-lisp-mode lisp-interaction-mode) . flymake-mode-on)
	  :config (flymake-mode-on))
  #+end_src
** Git
#+begin_src emacs-lisp
(mwb-init-load "mwb-init-prog-modes-git")
#+end_src
* Specific groups
Where there is common put them together. This part is really why I have separate files so I can deal with one thing at a time

** Lisp
 #+begin_src emacs-lisp
   (mwb-init-load "mwb-init-prog-modes-lisp")
#+end_src
** Python
Really need to start from scratch
#+begin_src emacs-lisp
(mwb-init-load "mwb-init-prog-modes-python")
#+end_src
** Structured data
Do inline
*** XML
This has been there for a long time (actually only after retirement I suppose I had XML-spy at work)
Just a pretty print
From http://blog.bookworm.at/2007/03/pretty-print-xml-with-emacs.html
 #+begin_src emacs-lisp
(defun nxml-pretty-print-xml-region (begin end)
  "Pretty format XML markup in region. You need to have nxml-mode
http://www.emacswiki.org/cgi-bin/wiki/NxmlMode installed to do
this.  The function inserts linebreaks to separate tags that have
nothing but whitespace between them.  It then indents the markup
by using nxml's indentation rules."
  (interactive "r")
  (save-excursion
      (nxml-mode)
      (goto-char begin)
      (while (search-forward-regexp "\>[ \\t]*\<" nil t)
        (backward-char) (insert "\n"))
      (indent-region begin end))
  (message "Ah, much better!"))
 #+end_src
*** Json
**** Editing
This is the standard mode
  #+begin_src emacs-lisp
 (use-package json-mode
   :ensure t
   :mode "\\.json$")
  #+end_src
**** Visualisation
See as a tree.
  #+begin_src emacs-lisp
(use-package json-navigator
  :ensure t)
  #+end_src
** SQL
Not worth separating out.
Note this is not the internal mode. It is from Emacs wiki as I like the interaction buffer better. Emacs' ones gave too many. Probably was my most use mode at work. As Java was Eclipse.
Now I have no idea if it works
#+begin_src emacs-lisp
(autoload 'sql "sql-mode"
  "Start the interactive SQL interpreter in a new buffer." t)

(autoload 'sql-mode "sql-mode"
  "Mode for editing SQL files and running a SQL interpreter." t)

(autoload 'sql-buffer "sql-mode"
  "Create or move to the sql-mode \"*SQL commands*\" buffer." t)

(setq auto-mode-alist (cons '("\\.sql$" . sql-mode) auto-mode-alist))
#+end_src
** C
This is where I have really lost history there used to be all sorts of indenation rules.
#+begin_src emacs-lisp
   ;; objective C
   (add-to-list 'auto-mode-alist '("\\.h$" . objc-mode) )
   (add-to-list 'auto-mode-alist '("\\.m$" . objc-mode))
   (add-to-list 'auto-mode-alist '("\\.mm$" . objc-mode))
#+end_src
** Perl
Possibly lost as I did have cperl at one time but from comments that might have been before heavy development
#+begin_src emacs-lisp
   (setq auto-mode-alist
		 (cons '("\\.pl$" . perl-mode) auto-mode-alist))
   (setq auto-mode-alist
		 (cons '("\\.pm$" . perl-mode) auto-mode-alist))

   ;; set keys
   ;(load-library "perldb")

   (defun my-perl-mode-hook ()
	 "My Perl settings"
	 (define-key perl-mode-map [return] 'newline-and-indent )
	 (define-key perl-mode-map [C-return] 'newline )
	 (setq perl-indent-level 4)
	 (setq perl-continued-statement-offset 4)
	 (setq perl-continued-brace-offset -4)
	 (setq perl-brace-offset 0)
	 (setq perl-brace-imaginary-offset 0)
	 (setq  perl-label-offset -2)
	 (define-key perl-mode-map [f3] 'perldb )
   ;  (setq perldb-command-name "/run/pd/packages/perl/5.003/bin/perl")
   ;  (setq perldb-command-name "/sbcimp/run/pd/perl/prod/bin/perl")
	 )
   (add-hook 'perl-mode-hook 'my-perl-mode-hook)

   ;; perl debug
   ;; (defun my-perldb-mode-hook ()
   ;;   (setq perldb-command-name "/run/pd/packages/perl/5.003/bin/perl")
   ;; )
   ;; (add-hook 'perldb-mode-hook 'my-perldb-mode-hook)
#+end_src
